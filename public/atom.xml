<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乱码</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-25T02:12:37.589Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiaowuzi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>柯里化函数</title>
    <link href="http://yoursite.com/2017/11/25/kelihua/"/>
    <id>http://yoursite.com/2017/11/25/kelihua/</id>
    <published>2017-11-25T02:11:41.000Z</published>
    <updated>2017-11-25T02:12:37.589Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'nullwu'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj</span></span><br><span class="line"><span class="comment">// 1、用call，但是需要包裹一个匿名函数</span></span><br><span class="line"><span class="comment">// setTimeout(function()&#123;</span></span><br><span class="line"><span class="comment">//     fn.call(obj)</span></span><br><span class="line"><span class="comment">// &#125;,1000)</span></span><br><span class="line"><span class="comment">// // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值</span></span><br><span class="line"><span class="comment">// setTimeout(fn.bind(obj), 1000)</span></span><br><span class="line"><span class="comment">// 3、自定义bind来实现</span></span><br><span class="line"><span class="comment">// setTimeout(bind(fn,obj,100,200),1000)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">callback, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> outerArg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>) <span class="comment">//获取除了前两个以外的参数(传的参数)</span></span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    <span class="comment">// 点击以后会这行这个小函数，所以实际上事件对象会在这里出现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> innerArg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</span><br><span class="line">        callback.apply(context, outerArg.concat(innerArg))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// context是要把this改为谁</span></span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//  获取剩余的参数</span></span><br><span class="line">    <span class="keyword">var</span> outerArg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'bind'</span> <span class="keyword">in</span> <span class="built_in">Function</span>.prototype) &#123;</span><br><span class="line">        <span class="comment">//  把参数传给原生的bind</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bind.apply(<span class="keyword">this</span>, [context].concat(outerArg)) <span class="comment">//this是调用者</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  获取事件对象</span></span><br><span class="line">        <span class="keyword">var</span> innerArg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//  兼容ie6-8的事件对象</span></span><br><span class="line">        innerArg.length === <span class="number">0</span> ? innerArg[innerArg.length] = <span class="built_in">window</span>.event : <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//  将剩余参数和事件对象拼接</span></span><br><span class="line">        <span class="keyword">var</span> arg = outerArg.concat(innerArg)</span><br><span class="line">        _this.apply(context, arg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.onclick = fn.mybind(obj, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/11/25/test/"/>
    <id>http://yoursite.com/2017/11/25/test/</id>
    <published>2017-11-25T00:54:31.488Z</published>
    <updated>2017-11-25T02:09:58.069Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>Document</title></head><body>    柯里化函数思想：一个js预处理的思想</body></html><script>    var obj = {        name: 'nullwu'    }    function fn(a, e) {        console.log(a, e)    }    // 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj    // 1、用call，但是需要包裹一个匿名函数    // setTimeout(function(){    //     fn.call(obj)    // },1000)    // // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值    // setTimeout(fn.bind(obj), 1000)    // 3、自定义bind来实现    // setTimeout(bind(fn,obj,100,200),1000)    function bind(callback, context) {        var outerArg = Array.prototype.slice.call(arguments, 2) //获取除了前两个以外的参数(传的参数)        context = context || window        // 点击以后会这行这个小函数，所以实际上事件对象会在这里出现        return function (e) {            var innerArg = Array.prototype.slice.call(arguments, 0)            callback.apply(context, outerArg.concat(innerArg))        }    }    // document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理    Function.prototype.mybind = function (context) {        // context是要把this改为谁        var _this = this;        //  获取剩余的参数        var outerArg = Array.prototype.slice.call(arguments, 1)        if ('bind' in Function.prototype) {            //  把参数传给原生的bind            return this.bind.apply(this, [context].concat(outerArg)) //this是调用者        }        return function () {            //  获取事件对象            var innerArg = Array.prototype.slice.call(arguments, 0)            //  兼容ie6-8的事件对象            innerArg.length === 0 ? innerArg[innerArg.length] = window.event : null;            //  将剩余参数和事件对象拼接            var arg = outerArg.concat(innerArg)            _this.apply(context, arg)        }    }    document.body.onclick = fn.mybind(obj, 100)</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sport</title>
    <link href="http://yoursite.com/2017/11/24/sport/"/>
    <id>http://yoursite.com/2017/11/24/sport/</id>
    <published>2017-11-24T04:08:36.000Z</published>
    <updated>2017-11-25T02:42:35.306Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1=&gt;  2秒钟匀速运动到line处</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line">    <span class="keyword">var</span> step = <span class="number">400</span> / <span class="number">2000</span> * <span class="number">10</span> <span class="comment">//  总长400,每一步需要多少</span></span><br><span class="line">    <span class="keyword">var</span> curLeft = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> end = <span class="number">400</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (curLeft + step &gt;= end) &#123; <span class="comment">//如果下一步超出，那么直接到指定位置</span></span><br><span class="line">            clearInterval()</span><br><span class="line">            curLeft = end</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curLeft += step;</span><br><span class="line">        &#125;</span><br><span class="line">        box.style.left = curLeft + <span class="string">'px'</span></span><br><span class="line">    &#125;, <span class="number">10</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2=&gt; 不限时缓冲运动到line处</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box2'</span>)</span><br><span class="line">    <span class="keyword">var</span> end = <span class="number">400</span></span><br><span class="line">    <span class="keyword">var</span> curLeft = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> step = (end - box.offsetLeft) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step)</span><br><span class="line">        <span class="keyword">if</span> (curLeft + step &gt;= end) &#123;</span><br><span class="line">            clearInterval()</span><br><span class="line">            curLeft = end</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curLeft += step;</span><br><span class="line">        &#125;</span><br><span class="line">        box.style.left = curLeft + <span class="string">'px'</span></span><br><span class="line">    &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3=》匀速第二种方式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box3'</span>)</span><br><span class="line">    <span class="keyword">var</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> end = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">var</span> change=end-start;</span><br><span class="line">    <span class="keyword">var</span> times = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 现在应该出现的地点=总长*走过的时间/总时间+起点</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">linear</span>(<span class="params">s, c, t, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + c * n / t</span><br><span class="line">    &#125;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (now &gt;= times) &#123;</span><br><span class="line">            box.style.left = end + <span class="string">'px'</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        box.style.left = linear(<span class="number">0</span>, <span class="number">400</span>, <span class="number">2000</span>, now) + <span class="string">'px'</span></span><br><span class="line">        now += <span class="number">10</span>;</span><br><span class="line">    &#125;, <span class="number">10</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4=&gt;用settimeout来实现第一种方法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box4'</span>)</span><br><span class="line">    <span class="keyword">var</span> step = <span class="number">400</span> / <span class="number">2000</span> * <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> curLeft = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> end = <span class="number">400</span>;</span><br><span class="line">    <span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     if (curLeft + step &gt;= end) &#123;</span></span><br><span class="line">    <span class="comment">//         clearInterval()</span></span><br><span class="line">    <span class="comment">//         curLeft = end</span></span><br><span class="line">    <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//         curLeft += step;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     box.style.left = curLeft + 'px'</span></span><br><span class="line">    <span class="comment">// &#125;, 10)</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        <span class="keyword">if</span> (curLeft + step &gt;= end) &#123;</span><br><span class="line">            clearTimeout()</span><br><span class="line">            curLeft = end</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curLeft += step;</span><br><span class="line">        &#125;</span><br><span class="line">        box.style.left = curLeft + <span class="string">'px'</span></span><br><span class="line">        timer = setTimeout(move, <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    move()</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bangding</title>
    <link href="http://yoursite.com/2017/11/24/bangding/"/>
    <id>http://yoursite.com/2017/11/24/bangding/</id>
    <published>2017-11-24T03:23:06.000Z</published>
    <updated>2017-11-24T03:48:03.858Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击的时候才执行</span></span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 直接执行fn,将返回值赋给点击事件，如果没有返回值，就是undefined</span></span><br><span class="line">box.onclick = fn()</span><br><span class="line"><span class="comment">// 同第一种方法，如果需要传参就需要换成第一种</span></span><br><span class="line">box.onclick = fn</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>yibu</title>
    <link href="http://yoursite.com/2017/11/23/yibu/"/>
    <id>http://yoursite.com/2017/11/23/yibu/</id>
    <published>2017-11-23T15:14:09.000Z</published>
    <updated>2017-11-24T10:13:48.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><blockquote><p>在js中异步编程有四种情况：定时器、事件绑定、ajax读取数据可以设置为异步，回调函数。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>每一个浏览器对于定时器的等待时间都有一个最小的数值，如果设置的等待时间小于这个数值，按照最小时间来执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   n++;</span><br><span class="line">   <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(n)  <span class="comment">//这个依旧先执行</span></span><br></pre></td></tr></table></figure></p><p>我们定时器设置的等待时间不一定就是最后执行的时间，如果定时器之后还有其它的事情正在处理中，不管定时器的时间有没有到，都是不会执行定时器。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   n++;</span><br><span class="line">   <span class="built_in">console</span>.log(n)  <span class="comment">//不执行</span></span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(n)    <span class="comment">//首先执行，0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;  <span class="comment">//死循环</span></span><br><span class="line">    n++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">//不执行</span></span><br></pre></td></tr></table></figure><blockquote><p>定时器之间，快的先执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line">&#125;, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'d'</span>)</span><br><span class="line"><span class="comment">//执行顺序 c - d - b -a</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;同步和异步&quot;&gt;&lt;a href=&quot;#同步和异步&quot; class=&quot;headerlink&quot; title=&quot;同步和异步&quot;&gt;&lt;/a&gt;同步和异步&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在js中异步编程有四种情况：定时器、事件绑定、ajax读取数据可以设置为异步，回调函数。&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>this</title>
    <link href="http://yoursite.com/2017/11/23/this/"/>
    <id>http://yoursite.com/2017/11/23/this/</id>
    <published>2017-11-23T14:34:39.000Z</published>
    <updated>2017-11-24T10:11:58.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This"><a href="#This" class="headerlink" title="This"></a>This</h1><blockquote><p>this是谁与函数在哪里定义的，在哪里执行的没有任何关系。</p><p>函数执行，首先看函数名前面是否有”.”，如果有”.”前面是谁this就是谁，如果没有this就是window</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn();<span class="comment">// window</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">fn</span>: fn &#125;</span><br><span class="line">obj.fn()  <span class="comment">//obj</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line">sum();  <span class="comment">//window</span></span><br><span class="line"><span class="comment">// 执行this的函数是fn，所以我们只需要观察fn前面是否有"."</span></span><br><span class="line"><span class="keyword">var</span> oo = &#123;</span><br><span class="line">    sum: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">oo.sum();  <span class="comment">//window</span></span><br></pre></td></tr></table></figure><blockquote><p>给一个元素的某个事件绑定方法，当事件触发的时候，执行对应的方法，方法中的this是当前的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'div'</span>).onclick=fn; <span class="comment">//#div</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'div'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fn()  <span class="comment">//window</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#call和apply</p><blockquote><p>call和apply强制改变this的指向,以上所有的this情况在遇到call/apply的时候都不好使,都已强制改变的为主</p></blockquote>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.fn.call(<span class="number">1</span>);<span class="comment">//this-&gt;1</span></span><br></pre></td></tr></table></figure><blockquote><p> 一般情况下,我们执行call方法第一个传递的参数值是谁,那么fn中的this就是谁<br>  [在非严格模式下]<br>  第一个参数没有传递值、传递的是null、传递的是undefined fn中的this都是window<br>  [严格模式下]<br>  第一个参数传递的是谁this就是谁,传递null/undefined,fn中的this都是对应的null/undefined,不传递值默认也是undefined<br>综上所述，严格模式下的this相对于非严格模式下的this主要区别在于：对于js代码中没有写执行主体的情况下，非严格模式下默认都是window执行的，所以this指向的是window,<br>但是在严格模式下，没有写就是没有执行主体，this指向的是undefined.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;                 </span><br><span class="line">fn.call()            <span class="comment">//undefined  </span></span><br><span class="line">fn.call(<span class="literal">undefined</span>)  <span class="comment">//undefined</span></span><br><span class="line">fn.call(<span class="literal">null</span>)       <span class="comment">// null</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;This&quot;&gt;&lt;a href=&quot;#This&quot; class=&quot;headerlink&quot; title=&quot;This&quot;&gt;&lt;/a&gt;This&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;this是谁与函数在哪里定义的，在哪里执行的没有任何关系。&lt;/p&gt;
&lt;p&gt;函数执行，首先看函数名前
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>借用方法</title>
    <link href="http://yoursite.com/2017/11/23/jieyong/"/>
    <id>http://yoursite.com/2017/11/23/jieyong/</id>
    <published>2017-11-23T08:43:09.000Z</published>
    <updated>2017-11-24T09:45:01.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="借用原型上的方法"><a href="#借用原型上的方法" class="headerlink" title="借用原型上的方法"></a>借用原型上的方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、使用原生slice方法</span></span><br><span class="line"> <span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> a.slice()</span><br><span class="line"><span class="comment">//  slice实现机制如下</span></span><br><span class="line">   <span class="built_in">Array</span>.prototype.slice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">            arr[arr.length] = <span class="keyword">this</span>[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//可以看出，实际是从原型链上去寻找slice并让他执行，内部机制通过this去操作调用者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、手写一个函数将类数组转为数组</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">listtoArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            arr[arr.length] = <span class="built_in">arguments</span>[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    listtoArray(a)</span><br><span class="line">    <span class="comment">//3、比较两者可以看出，区别就在于原生的slice方法中，需要一个数组去调用，</span></span><br><span class="line">    <span class="comment">//内部用this去实现操作。而现在的做法是将数组当作参数传入。我们只需</span></span><br><span class="line">    <span class="comment">//将原生方法中的this改为arguments即可</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">listtoArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="将类数组转为数组"><a href="#将类数组转为数组" class="headerlink" title="将类数组转为数组"></a>将类数组转为数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> olis=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> ary=<span class="built_in">Array</span>.prototype.slice.call(olis)</span><br><span class="line"><span class="comment">//问题：在ie6-8下，不支持借用数组的slice实现将元素集合的类数组转为数组，但是arguments不存在这个兼容问题</span></span><br><span class="line"><span class="comment">//以下是兼容方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToArray</span>(<span class="params">likeAry</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(likeAry, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ary = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; likeAry.length; i++) &#123;</span><br><span class="line">ary[ary.length] = likeAry[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//从某一处开始克隆</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> aru=[].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>)<span class="comment">//从第二项开始克隆</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//求平均数实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">avgFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">Array</span>.prototype.sort.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="built_in">Array</span>.prototype.pop.call(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">eval</span>([].join.call(<span class="built_in">arguments</span>, <span class="string">'+'</span>)) / <span class="built_in">arguments</span>.length).toFixed(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = avgFn(<span class="number">3.4</span>, <span class="number">5.5</span>, <span class="number">5.4</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;借用原型上的方法&quot;&gt;&lt;a href=&quot;#借用原型上的方法&quot; class=&quot;headerlink&quot; title=&quot;借用原型上的方法&quot;&gt;&lt;/a&gt;借用原型上的方法&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>call</title>
    <link href="http://yoursite.com/2017/11/22/call/"/>
    <id>http://yoursite.com/2017/11/22/call/</id>
    <published>2017-11-22T07:17:47.000Z</published>
    <updated>2017-11-24T07:52:13.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="call的作用"><a href="#call的作用" class="headerlink" title="call的作用"></a>call的作用</h1><blockquote><p>改变函数中this的指向</p></blockquote><h1 id="call方法实现机制"><a href="#call方法实现机制" class="headerlink" title="call方法实现机制"></a>call方法实现机制</h1><blockquote><p>一个函数调用call方法，实际上是从Function的原型链上找到call这个方法，并让call()执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="number">1</span>、让<span class="keyword">this</span>(这个<span class="keyword">this</span>指的是调用者)这个函数中的<span class="keyword">this</span>(这个<span class="keyword">this</span>指的是调用者的<span class="keyword">this</span>)关键字变为data</span><br><span class="line">    <span class="number">2</span>、让<span class="keyword">this</span>方法(调用者)执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">1</span>)  <span class="comment">//1</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">2</span>)  <span class="comment">//2</span></span><br><span class="line"> &#125;</span><br><span class="line"> fn1.call(fn2)</span><br><span class="line"> <span class="comment">//首先fn1通过原型链找到Function.prototype上的call方法，让call方法执行</span></span><br><span class="line"> <span class="comment">//执行的时候让fn1的this指向了fn2,然后再让fn1执行</span></span><br><span class="line"> fn1.call.call(fn2)</span><br><span class="line"> <span class="comment">//首先fn1通过原型链找到Function.prototype上的call方法</span></span><br><span class="line"> <span class="comment">//让call方法通过原型找到Function原型上的call(因为call本身的值也是一个函数，所以同样可以找到Function.protoype),</span></span><br><span class="line"><span class="comment">// 在第二次找到call的时候让方法执行，方法中的this是fn1.call,首先让这个方法中的this变为fn2,然后再让fn1.call执行</span></span><br></pre></td></tr></table></figure><h1 id="call参数"><a href="#call参数" class="headerlink" title="call参数"></a>call参数</h1><blockquote><p>call中的第一个参数是改变的this指向，后面的才是传递的参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(a + b)    <span class="comment">//3</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>)     <span class="comment">// obj</span></span><br><span class="line"> &#125;</span><br><span class="line"> fn.call(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h1 id="严格模式和非严格"><a href="#严格模式和非严格" class="headerlink" title="严格模式和非严格"></a>严格模式和非严格</h1><blockquote><p>严格模式下，写什么指向什么，非严格模式，都指向window</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;                 </span><br><span class="line">fn.call()            <span class="comment">//undefined  </span></span><br><span class="line">fn.call(<span class="literal">undefined</span>)  <span class="comment">//undefined</span></span><br><span class="line">fn.call(<span class="literal">null</span>)       <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h1 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h1><blockquote><p>和call几乎一样,只不过传递参数的时候放进一个数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn.apply(obj, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><blockquote><p>bind在ie6-8下不兼容,和call,apply类似都是用来改变this关键字。区别是只是改变this指向，并且传递了参数，但是<br>此时并没有把fn这个函数执行，但是会有一个返回值可以执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fn.bind(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a()</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;call的作用&quot;&gt;&lt;a href=&quot;#call的作用&quot; class=&quot;headerlink&quot; title=&quot;call的作用&quot;&gt;&lt;/a&gt;call的作用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;改变函数中this的指向&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内置的dom操作属性和方法</title>
    <link href="http://yoursite.com/2017/11/22/dom/"/>
    <id>http://yoursite.com/2017/11/22/dom/</id>
    <published>2017-11-22T07:17:47.000Z</published>
    <updated>2017-11-25T06:45:58.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不存在兼容问题"><a href="#不存在兼容问题" class="headerlink" title="不存在兼容问题"></a>不存在兼容问题</h1><ul><li>getElementById</li><li>getElementByTagName</li><li>childNodes</li><li>parentNode</li><li>nodeType</li><li>nodeName</li><li>firstChild</li><li>lastChild</li><li>previousSibling</li><li>nextSibling</li><li>appendChild</li><li>insertBefore</li><li>cloneNode(true</li></ul><h1 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h1><ul><li>children(谷歌下是子元素节点，ie8得出元素+非法标签+注释，ie7元素+注释)</li><li>以下属性ie6-8下不存在<ul><li>getElementsByClassName</li><li>firstElementChild</li><li>lastElementChild</li><li>previousElementSibling</li><li>nextElementSibling</li></ul></li><li>以下方法ie6-7不支持</li><li>getAttribute</li><li>setAttribute</li><li>removeAttribute</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不存在兼容问题&quot;&gt;&lt;a href=&quot;#不存在兼容问题&quot; class=&quot;headerlink&quot; title=&quot;不存在兼容问题&quot;&gt;&lt;/a&gt;不存在兼容问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;getElementById&lt;/li&gt;
&lt;li&gt;getElementByTagName&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js-box</title>
    <link href="http://yoursite.com/2017/11/22/js-box/"/>
    <id>http://yoursite.com/2017/11/22/js-box/</id>
    <published>2017-11-22T01:49:47.000Z</published>
    <updated>2017-11-23T13:37:59.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js盒模型"><a href="#js盒模型" class="headerlink" title="js盒模型"></a>js盒模型</h1><blockquote><p>通过js中提供的一系列的方法和属性获取页面中元素的样式信息值</p></blockquote><h1 id="client"><a href="#client" class="headerlink" title="client"></a>client</h1><h2 id="1、clientWidth-clientHeight"><a href="#1、clientWidth-clientHeight" class="headerlink" title="1、clientWidth/clientHeight"></a>1、clientWidth/clientHeight</h2><blockquote><p>如果元素设置了<code>height</code>属性，那么它的<code>clientHeight</code>=height+padding-top+padding-bottom,<br>与真实内容无关（真实内容即填充的元素）。如果没有设置，那这个height就是真实的高度。</p></blockquote><h2 id="2、clientLeft-clientTop"><a href="#2、clientLeft-clientTop" class="headerlink" title="2、clientLeft/clientTop"></a>2、clientLeft/clientTop</h2><blockquote><p>左边框宽度/上边框宽度 即border-left/border-top</p></blockquote><h1 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h1><h2 id="1、offsetWidth-offsetHeight"><a href="#1、offsetWidth-offsetHeight" class="headerlink" title="1、offsetWidth/offsetHeight"></a>1、offsetWidth/offsetHeight</h2><blockquote><p>高度+上下填充+上下边框。实际上这个值也可以写成clientHeight+上下边框</p></blockquote><h2 id="2、offsetLeft-offsetTop"><a href="#2、offsetLeft-offsetTop" class="headerlink" title="2、offsetLeft/offsetTop"></a>2、offsetLeft/offsetTop</h2><blockquote><p>当前元素<code>外边框</code>距离父元素<code>内边框</code>的偏移量</p></blockquote><h1 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h1><h2 id="1、scrollHeight-scrollWidth"><a href="#1、scrollHeight-scrollWidth" class="headerlink" title="1、scrollHeight/scrollWidth"></a>1、scrollHeight/scrollWidth</h2><blockquote><p>它和clientWidth唯一的区别是，有内容溢出的时候，clientHeight和设置的height有关，而scrollHeight只和真实的高度有关，与设置的height无关。<br>注意：这个数值是约等于的。<br>1、同一个浏览器overflow:hodden不同<br>2、不同的浏览器获取的结果不同</p></blockquote><h2 id="2、scrollTop-scrollLeft"><a href="#2、scrollTop-scrollLeft" class="headerlink" title="2、scrollTop/scrollLeft"></a>2、scrollTop/scrollLeft</h2><h1 id="关于js盒子模型属性取值的问题"><a href="#关于js盒子模型属性取值的问题" class="headerlink" title="关于js盒子模型属性取值的问题"></a>关于js盒子模型属性取值的问题</h1><blockquote><p>通过这些属性获取的结果永远不可能出现小数，浏览器获取结果的时候，在原来真实结果的基础上进行四舍五入。</p></blockquote><h1 id="关于操作浏览器本身的盒子模型"><a href="#关于操作浏览器本身的盒子模型" class="headerlink" title="关于操作浏览器本身的盒子模型"></a>关于操作浏览器本身的盒子模型</h1><blockquote><p>clientWidth/clientHeight是当前浏览器可视窗口的宽度和高度<br>scrollWidth/scrollHeight是当前页面的真实宽度和高度（所有屏加起来）<br>目前测得需要兼容的是scorllTop，在火狐和ie6-8下用document,在谷歌下用body<br>但是是一个约等于的数值。<br>为了兼容，所有操作浏览器的盒子模型都要写两套。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">win</span>(<span class="params">attr, value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> value === <span class="string">"undefined"</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.documentElement[attr] || <span class="built_in">document</span>.body[attr];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.documentElement[attr] = value;</span><br><span class="line"><span class="built_in">document</span>.body[attr] = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js盒模型&quot;&gt;&lt;a href=&quot;#js盒模型&quot; class=&quot;headerlink&quot; title=&quot;js盒模型&quot;&gt;&lt;/a&gt;js盒模型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;通过js中提供的一系列的方法和属性获取页面中元素的样式信息值&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/13/hello-world/"/>
    <id>http://yoursite.com/2017/11/13/hello-world/</id>
    <published>2017-11-13T05:23:52.157Z</published>
    <updated>2017-11-23T13:37:59.258Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check [documentation]<br><a id="more"></a><br>(<a href="https://hexo.io/docs/" target="_blank" rel="external">https://hexo.io/docs/</a>) for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check [documentation]&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>websocket</title>
    <link href="http://yoursite.com/2017/10/22/websocket/"/>
    <id>http://yoursite.com/2017/10/22/websocket/</id>
    <published>2017-10-22T01:39:08.000Z</published>
    <updated>2017-11-23T13:37:59.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="first"><a href="#first" class="headerlink" title="first"></a>first</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sendTxt"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendBtn"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"recv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://echo.websocket.org/"</span>)</span></span><br><span class="line"><span class="javascript">        websocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'websocket已经连接'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'recv'</span>).innerHTML = <span class="string">'websocket已经连接'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        websocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'websocket关闭'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        websocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'recv'</span>).innerHTML = e.data;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'sendBtn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> txt = <span class="built_in">document</span>.getElementById(<span class="string">'sendTxt'</span>).value;</span></span><br><span class="line"><span class="undefined">            websocket.send(txt)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一打开页面就显示’websocket已经连接’</p><p>当输入文本框发送的时候，服务端返回的数据中，其中的data是我们发送的数据</p><h2 id="sec"><a href="#sec" class="headerlink" title="sec"></a>sec</h2><p><code>https://github.com/sitegui/nodejs-websocket</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;first&quot;&gt;&lt;a href=&quot;#first&quot; class=&quot;headerlink&quot; title=&quot;first&quot;&gt;&lt;/a&gt;first&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="websocket" scheme="http://yoursite.com/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Node.js中的path模块</title>
    <link href="http://yoursite.com/2017/10/20/node-path/"/>
    <id>http://yoursite.com/2017/10/20/node-path/</id>
    <published>2017-10-20T00:26:55.000Z</published>
    <updated>2017-11-23T13:37:59.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>该方法将多个参数值字符串结合成一个路径字符串，使用方式如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.join([path1],[path2],[...])</span><br></pre></td></tr></table></figure></p><p>在该方法中，使用一个或者多个字符串值参数，该参数返回将这些字符串值参数结合而成的路径。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> joinPath=path.join(__dirname,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(joinPath) <span class="comment">// D:\nodePro\fileTest\a\b\c</span></span><br><span class="line">__dirname变量值代表程序运行的根目录。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;join&quot;&gt;&lt;a href=&quot;#join&quot; class=&quot;headerlink&quot; title=&quot;join&quot;&gt;&lt;/a&gt;join&lt;/h2&gt;&lt;p&gt;该方法将多个参数值字符串结合成一个路径字符串，使用方式如下:&lt;br&gt;&lt;figure class=&quot;highlight jav
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpackdemo</title>
    <link href="http://yoursite.com/2017/10/19/webpackdemo/"/>
    <id>http://yoursite.com/2017/10/19/webpackdemo/</id>
    <published>2017-10-19T00:37:26.000Z</published>
    <updated>2017-11-23T13:37:59.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>a.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">..</span><br></pre></td></tr></table></figure><p>people.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&apos;Hello EveryBody&apos;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(require(&apos;./people&apos;)) //路径必须./即使是当前目录</span><br></pre></td></tr></table></figure><p>执行命令<code>webpack app.js index.js</code>即生成index.js,<br>打开index.html弹出<code>&#39;Hello EveryBody&#39;</code></p><p>执行命令的时候 –watch 即可监听，app.js有变化自动打包</p><h2 id="运用第三方库"><a href="#运用第三方库" class="headerlink" title="运用第三方库"></a>运用第三方库</h2><p><code>cnpm install style-loader css-loader --save</code><br>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&apos;dist/index.js&apos;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>style.css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>app.js</p><p><code>require(&quot;!style-loader!css-loader!./style.css&quot;)</code></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">// 入口文件</span></span><br><span class="line">    entry:<span class="string">'./app.js'</span>,</span><br><span class="line">    <span class="comment">// 出口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        path:__dirname+<span class="string">'/dist'</span>,</span><br><span class="line">        filename:<span class="string">'index.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 需要依赖的插件或者是装载器</span></span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        loaders:[</span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="attr">loader</span>:<span class="string">"style-loader!css-loader"</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;./style.css&apos;)</span><br></pre></td></tr></table></figure><p><code>webpack</code>即可<br>webpack    开发环境下编译（打包）<br>webpack -p 生产环境下编译（压缩）<br>webpack -w 监听文件改动（自动编译）<br>webpack -d 开启(生成)source map<br>webpack -wdp </p><h2 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h2><p>webpack –config config.js</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;:&quot;webpack&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>即可用 <code>npm run build</code>来代替执行<code>webpack</code></p><h2 id="搭建服务器运行"><a href="#搭建服务器运行" class="headerlink" title="搭建服务器运行"></a>搭建服务器运行</h2><p><code>cnpm install webpack-dev-server -g --save-dev</code></p><p>package.json</p><p>加入start字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;webpack-dev-server --entry ./app.js --output-filename ./dist/index.js&quot;,</span><br><span class="line">  &quot;build&quot;:&quot;webpack&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>npm start 自动开启8080端口，自动监听无需刷新。这样就不需要执行webpack命令，或者说不需要在webpack.config.js中配置入口和出口，但是指定的加载器模块仍然要写上。</p><h2 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h2><p>cnpm install babel-core babel-loader babel-preset-es2015 –save-dev</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要依赖的插件或者是装载器</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader: <span class="string">"style-loader!css-loader"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                query: &#123;</span><br><span class="line">                    presets: [<span class="string">"es2015"</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//另一种方式，去掉query,建立.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>:[<span class="string">'es2015'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        vendor:[<span class="string">'jquery'</span>,<span class="string">'./src/js/common.js'</span>],</span><br><span class="line">        <span class="comment">// 多页面有几个页面就有几个入口,单页面只有一个入口</span></span><br><span class="line">        index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">        cart: <span class="string">'./src/js/cart.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>), <span class="comment">//出口必须是绝对路径</span></span><br><span class="line">        filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">        publicPath: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            include: path.join(__dirname, <span class="string">'src'</span>),</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            <span class="comment">// 这种方法是抽取成单独的css文件</span></span><br><span class="line">            <span class="comment">// use: ExtractTextPlugin.extract(&#123;</span></span><br><span class="line">            <span class="comment">//     fallback: 'style-loader',</span></span><br><span class="line">            <span class="comment">//     use: 'css-loader'</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">            <span class="comment">// 这种方法是行内</span></span><br><span class="line">            loader:<span class="string">'style-loader!css-loader'</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            include: path.join(__dirname, <span class="string">'src'</span>),</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader:<span class="string">'babel-loader'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 打包后清除之前的文件</span></span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'./dist'</span>], &#123;</span><br><span class="line">            root: path.join(__dirname, <span class="string">''</span>),</span><br><span class="line">            verbose: <span class="literal">true</span>,</span><br><span class="line">            dry: <span class="literal">false</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 单页面配置几个，多页面有几个页面new几个</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'cart.html'</span>,</span><br><span class="line">            template: <span class="string">'./src/cart.html'</span>,</span><br><span class="line">            chunks: [<span class="string">'cart'</span>,<span class="string">'vendor'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            chunks: [<span class="string">'index'</span>,<span class="string">'vendor'</span>], <span class="comment">//指定引用的块，指定以后只引入index相关的css,js，不写这个打包后的htmml引入所有的index,css等。</span></span><br><span class="line">            minify:&#123;</span><br><span class="line">                removeComments:<span class="literal">true</span>,</span><br><span class="line">                collapseWhitespace:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">          $:<span class="string">'jquery'</span>,</span><br><span class="line">          jQuery:<span class="string">'jquery'</span>,</span><br><span class="line">          <span class="string">'window.jQuery'</span>:<span class="string">'jquery'</span></span><br><span class="line">        &#125;),</span><br><span class="line">         <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>),</span><br><span class="line">         <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name:<span class="string">'vendor'</span>,</span><br><span class="line">            chunks:[<span class="string">'index'</span>,<span class="string">'cart'</span>,<span class="string">'vendor'</span>],</span><br><span class="line">            minChunks:<span class="number">3</span></span><br><span class="line">         &#125;),</span><br><span class="line">        <span class="comment">//  压缩js</span></span><br><span class="line">         <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">             compress:&#123;</span><br><span class="line">                 warnings:<span class="literal">true</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// devtool: '#source-map'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es6-1"><a href="#es6-1" class="headerlink" title="es6"></a>es6</h3><ul><li><code>npm install --save babel-core babel-loader babel-preset-env</code></li><li>在配置文件同级目录下建一个.babelrc,写入 <code>{  &quot;presets&quot;: [&quot;env&quot; ]}</code></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    include: path.join(__dirname, <span class="string">'src'</span>),</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    loader:<span class="string">'babel-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;a.html&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>hexo-change</title>
    <link href="http://yoursite.com/2017/10/19/hexo-change/"/>
    <id>http://yoursite.com/2017/10/19/hexo-change/</id>
    <published>2017-10-19T00:26:34.000Z</published>
    <updated>2017-11-23T13:37:59.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录："><a href="#将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：" class="headerlink" title="将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录："></a>将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><p>将这些目录放到一个目录下，如：hexo／</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="安装好之后，进入hexo-目录"><a href="#安装好之后，进入hexo-目录" class="headerlink" title="安装好之后，进入hexo/目录"></a>安装好之后，进入hexo/目录</h2><h2 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：&quot;&gt;&lt;a href=&quot;#将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：&quot; class=&quot;headerlink&quot; title=&quot;将原先配置好并生成的hexo目录拷贝到新的电脑，只需
      
    
    </summary>
    
      <category term="备忘录" scheme="http://yoursite.com/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>gulp-demo</title>
    <link href="http://yoursite.com/2017/10/19/gulp-demo/"/>
    <id>http://yoursite.com/2017/10/19/gulp-demo/</id>
    <published>2017-10-19T00:13:52.000Z</published>
    <updated>2017-11-23T13:37:59.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>首先确认设备是否拥有Node环境</li><li>通过<code>npm install -g gulp</code>安装全局</li><li>初始化package.json</li><li>在项目文件中安装gulp</li></ol><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理任务</span></span><br><span class="line"><span class="keyword">let</span> gulp =<span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* gulp.task 定义任务</span></span><br><span class="line"><span class="comment">   gulp.src  找到需要执行任务的文件</span></span><br><span class="line"><span class="comment">   gulp.dest 执行任务的文件的去处</span></span><br><span class="line"><span class="comment">   gulp.watch 观察文件是否发生变化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'Gulp is running........'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 命令行输入gulp message即执行</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'这是默认任务.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 命令行输入gulp即执行</span></span><br></pre></td></tr></table></figure><h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'mycopy'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'src/*.html'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>执行<code>gulp mycopy</code>将自动创建dist文件夹，并将src下的所有html拷贝到文件夹内</p><h2 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装并引入插件</span></span><br><span class="line"><span class="keyword">let</span> imagemin=<span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'myimage'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'images/*'</span>)</span><br><span class="line">    .pipe(imagemin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="压缩js文件"><a href="#压缩js文件" class="headerlink" title="压缩js文件"></a>压缩js文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uglify=<span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</span><br><span class="line">gulp.task(<span class="string">'minify'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'src/js/*.js'</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/js'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="sass转换为cess"><a href="#sass转换为cess" class="headerlink" title="sass转换为cess"></a>sass转换为cess</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sass=<span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'mycss'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'src/sass/*.scss'</span>)</span><br><span class="line">    .pipe(sass().on(<span class="string">'error'</span>,sass.logError))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="执行多个任务"><a href="#执行多个任务" class="headerlink" title="执行多个任务"></a>执行多个任务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'message'</span>,<span class="string">'mycss'</span>,<span class="string">'minify'</span>,<span class="string">'myimage'</span>,<span class="string">'mycopy'</span>])</span><br></pre></td></tr></table></figure><h2 id="合并代码"><a href="#合并代码" class="headerlink" title="合并代码"></a>合并代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'scripts'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/js/*.js'</span>)</span><br><span class="line">  .pipe(concat(<span class="string">'main.js'</span>))</span><br><span class="line">  .pipe(uglify())</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'message'</span>,<span class="string">'mycss'</span>,<span class="string">'myimage'</span>,<span class="string">'mycopy'</span>,<span class="string">'scripts'</span>])</span><br></pre></td></tr></table></figure><h2 id="监听任务"><a href="#监听任务" class="headerlink" title="监听任务"></a>监听任务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'src/js/*.js'</span>,[<span class="string">'scripts'</span>]);</span><br><span class="line">    gulp.watch(<span class="string">'src/sass/*.scss'</span>,[<span class="string">'mycss'</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//执行 gulp watch</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先确认设备是否拥有Node环境&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;npm install -g gulp&lt;/c
      
    
    </summary>
    
      <category term="笔记本" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>what-token</title>
    <link href="http://yoursite.com/2017/10/16/what-token/"/>
    <id>http://yoursite.com/2017/10/16/what-token/</id>
    <published>2017-10-16T06:01:51.000Z</published>
    <updated>2017-11-23T13:37:59.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于-Token-的身份验证方法"><a href="#基于-Token-的身份验证方法" class="headerlink" title="基于 Token 的身份验证方法"></a>基于 Token 的身份验证方法</h2><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li></ol><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作：jot ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分：</p><ul><li>header</li><li>payload</li><li>signature<br>这三个部分使用Base64编码以后连接，中间用点分隔开，所以真正的 Token 看起来像这样：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidXV1dXV1dXV1dXV1IiwiZXhwIjoxNTA4NzMxNjA0LCJpYXQiOjE1MDgxMjY4MDR9.d1gjsaqQIQZeii7poPmCoHXtUfdBo3WUCD1jxYn-AhY</span><br></pre></td></tr></table></figure><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>header 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法，比如下面类型就是 JWT，使用的算法是 HS256。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;alg: &quot;HS256&quot;, typ: &quot;JWT&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>上面的内容要用 Base64 的形式编码一下，所以就变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>Payload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：</p><ul><li>iss：Issuer，发行者</li><li>sub：Subject，主题</li><li>aud：Audience，观众</li><li>exp：Expiration time，过期时间</li><li>nbf：Not before</li><li>iat：Issued at，发行时间</li><li>jti：JWT ID</li></ul><p>比如下面这个 Payload ，用到了 iat 发行时间，还有 exp 过期时间。另外还有两个自定义的字段，一个是 name ，还有一个是 age 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;name: &quot;uuuu&quot;, age: 12, exp: 1508739578, iat: 1508134778&#125;</span><br></pre></td></tr></table></figure><p>使用 Base64 编码以后就变成了这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ</span><br></pre></td></tr></table></figure><p>因为后台下发给我们的是通过Base64编码的，那么我们如何获取？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> payload = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.atob(token.split(<span class="string">'.'</span>)[<span class="number">1</span>]));</span><br><span class="line"><span class="comment">//&#123;name: "uuuu", age: 12, exp: 1508739578, iat: 1508134778&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>JWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。</p><ul><li>header</li><li>payload</li><li>secret</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">"."</span> + base64UrlEncode(payload); </span><br><span class="line">HMACSHA256(encodedString, <span class="string">'secret'</span>);</span><br></pre></td></tr></table></figure><p>处理完成以后看起来像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</span><br></pre></td></tr></table></figure><p>最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</span><br></pre></td></tr></table></figure><p>客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于-Token-的身份验证方法&quot;&gt;&lt;a href=&quot;#基于-Token-的身份验证方法&quot; class=&quot;headerlink&quot; title=&quot;基于 Token 的身份验证方法&quot;&gt;&lt;/a&gt;基于 Token 的身份验证方法&lt;/h2&gt;&lt;p&gt;使用基于 Token 的身份
      
    
    </summary>
    
      <category term="尚在研究" scheme="http://yoursite.com/categories/%E5%B0%9A%E5%9C%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="token" scheme="http://yoursite.com/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>token</title>
    <link href="http://yoursite.com/2017/10/16/token/"/>
    <id>http://yoursite.com/2017/10/16/token/</id>
    <published>2017-10-16T02:28:07.000Z</published>
    <updated>2017-11-23T13:37:59.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首次发起请求"><a href="#首次发起请求" class="headerlink" title="首次发起请求"></a>首次发起请求</h2><p>reg.vue</p><blockquote><p>注册页面，注册时触发actions,把用户的参数带过去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    user: &#123;</span><br><span class="line">            username: <span class="string">''</span>,</span><br><span class="line">            password: <span class="string">''</span>,</span><br><span class="line">            repassword: <span class="string">''</span>,</span><br><span class="line">          &#125;</span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'UserReg'</span>, <span class="keyword">this</span>.user);</span><br></pre></td></tr></table></figure><p>actions.js</p><blockquote><p>带着参数调用注册接口.如果注册成功，触发mutations，并跳转到admin页面</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'../api'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'../router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 后台注册</span></span><br><span class="line">  UserReg(&#123;commit&#125;,data)&#123;</span><br><span class="line">   api.localReg(data)   <span class="comment">//  return axios.post('/api/reg',data)</span></span><br><span class="line">       .then(<span class="function">(<span class="params">&#123;data&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(data.code==<span class="number">200</span>)&#123;</span><br><span class="line">           commit(<span class="string">'USER_REG'</span>,data.token)</span><br><span class="line">             router.replace(&#123;<span class="attr">path</span>:<span class="string">'/admin'</span>&#125;)</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//  上一个catch处理了MongoError</span></span><br><span class="line">           alert(data.message)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       .catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//  处理的是上一个if的错误</span></span><br><span class="line">         alert(error.toString())</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>mutations.js</p><blockquote><p>对token做存储和本地缓存</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;USER_SIGNIN,USER_SIGNOUT,USER_REG&#125; <span class="keyword">from</span> <span class="string">'./types'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  &#123;</span><br><span class="line">  [USER_REG](state,token)&#123;</span><br><span class="line">    localStorage.setItem(<span class="string">'jwt'</span>,token);</span><br><span class="line">    state.token = token;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台首次处理"><a href="#后台首次处理" class="headerlink" title="后台首次处理"></a>后台首次处理</h2><p>router.js</p><blockquote><p>接收到注册请求，试图将用户信息存进mongodb中。如果创建成功，就创建token并下发给前端</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'../models'</span>).User</span><br><span class="line"><span class="keyword">const</span> createToken = <span class="built_in">require</span>(<span class="string">'../middleware/createToken'</span>)</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">router.post(<span class="string">'/reg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> username = req.body.username</span><br><span class="line">  <span class="keyword">let</span> password = req.body.password</span><br><span class="line">  <span class="keyword">let</span> user = &#123;</span><br><span class="line">    username,</span><br><span class="line">    password</span><br><span class="line">  &#125;</span><br><span class="line">  User.create(user)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        <span class="comment">// 创建用户成功</span></span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        token: createToken(username)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 操作数据库的时候发生错误</span></span><br><span class="line">      <span class="keyword">if</span> (err.message.match(<span class="string">'E11000 duplicate key'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">          code: <span class="number">-200</span>,</span><br><span class="line">          message: <span class="string">'用户名重复'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 服务器发生错误（例如status:）</span></span><br><span class="line">      <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        code: <span class="number">-200</span>,</span><br><span class="line">        message: err.toString()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>createToken.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> expiry = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  expiry.setDate(expiry.getDate() + <span class="number">7</span>); <span class="comment">//有效期设置为七天</span></span><br><span class="line">  <span class="keyword">const</span> token = jwt.sign(&#123;</span><br><span class="line">    name: name,</span><br><span class="line">    exp: <span class="built_in">parseInt</span>(expiry.getTime() / <span class="number">1000</span>) <span class="comment">//除以1000以后表示的是秒数</span></span><br><span class="line">  &#125;, process.env.JWT_SECRET)</span><br><span class="line">  <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>发给前台后，是一串base64编译的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> payload = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.atob(token.split(<span class="string">'.'</span>)[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure><p>dovenv</p><blockquote><p>用文件管理起来，node有一个dotenv的模块，可以将这个密钥设置成环境变量。在根目录下创建一个.env的文件，并设置密码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JWT_SECRET=hello</span><br></pre></td></tr></table></figure><p>同时还要注意，在gitignore 中增加这个文件的忽略，不必上传到git上。然后我们安装dotenv模块：</p><p>在app.js最顶端引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).load();</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>api.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create();    </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> front_instance = axios.create();  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(localStorage.getItem(<span class="string">'jwt'</span>))&#123;</span><br><span class="line">  <span class="comment">/* localStorage.getItem('jwt')获取的是字符串</span></span><br><span class="line"><span class="comment">    Bearer token(通过Authorization头部字段发送到服务端便于验证)的格式：Bearer XXXXXXXXXX</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要权限的axios 的Authorization 头为 bearer加上 token</span></span><br><span class="line">  instance.defaults.headers.common[<span class="string">'Authorization'</span>] = <span class="string">"Bearer "</span>+localStorage.getItem(<span class="string">'jwt'</span>).replace(<span class="regexp">/(^\")|(\"$)/g</span>,<span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> addClassify(params)&#123;</span><br><span class="line">    <span class="keyword">return</span> instance.post(<span class="string">'/api/classify/create'</span>,params);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src="/images/token01.jpg" alt="image"></p><h2 id="后台验证"><a href="#后台验证" class="headerlink" title="后台验证"></a>后台验证</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加分类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkToken = <span class="built_in">require</span>(<span class="string">'../middleware/checkToken'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/classify/create'</span>, checkToken, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">new</span> Classify(&#123;</span><br><span class="line">      name: req.body.className</span><br><span class="line">    &#125;).save()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        message: <span class="string">'创建成功'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        code: <span class="number">-200</span>,</span><br><span class="line">        message: err.toString()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>checkToken.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证token中间件</span></span><br><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.headers[<span class="string">'authorization'</span>]) &#123;</span><br><span class="line">    <span class="comment">//  抽取出token</span></span><br><span class="line">    <span class="keyword">var</span> token = req.headers[<span class="string">'authorization'</span>].split(<span class="string">' '</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">var</span> decoded = jwt.decode(token, process.env.JWT_SECRET)</span><br><span class="line">    <span class="comment">// 如果过期了就重新登录</span></span><br><span class="line">    <span class="comment">// 验证token也需要优化</span></span><br><span class="line">    <span class="keyword">if</span> (token &amp;&amp; decoded.exp &lt;= <span class="built_in">Date</span>.now() / <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">        code: <span class="number">401</span>,</span><br><span class="line">        message: <span class="string">"授权已经过期，请重新登陆"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;首次发起请求&quot;&gt;&lt;a href=&quot;#首次发起请求&quot; class=&quot;headerlink&quot; title=&quot;首次发起请求&quot;&gt;&lt;/a&gt;首次发起请求&lt;/h2&gt;&lt;p&gt;reg.vue&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注册页面，注册时触发actions,把用户的参数带过
      
    
    </summary>
    
      <category term="尚在研究" scheme="http://yoursite.com/categories/%E5%B0%9A%E5%9C%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="token" scheme="http://yoursite.com/tags/token/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
      <category term="ndoe.js" scheme="http://yoursite.com/tags/ndoe-js/"/>
    
  </entry>
  
  <entry>
    <title>es6,es7对数据返回的处理</title>
    <link href="http://yoursite.com/2017/10/15/es6-data/"/>
    <id>http://yoursite.com/2017/10/15/es6-data/</id>
    <published>2017-10-15T07:30:22.000Z</published>
    <updated>2017-11-23T13:37:59.247Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>api返回的数据一般都是一个数组，数组中包含了多个对象。如何处理<br>返回一个数组，取数组中每一项的某个值</p></blockquote><p><img src="/images/es601.jpg" alt="image"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">api.getBooks(<span class="keyword">this</span>.bookInfo.id)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data.map(<span class="function"><span class="params">item</span> =&gt;</span> item.book</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p><img src="/images/es602.jpg" alt="image"></p><blockquote><p>通过便利重新对返回的数据重新组织,可以获取我们想要的数据而不是全部并且自定义key,value<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">processDoubanData(moviesDouban) &#123;</span><br><span class="line">  <span class="keyword">var</span> movies = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> idx <span class="keyword">in</span> moviesDouban.subjects) &#123;</span><br><span class="line">    <span class="keyword">var</span> subject = moviesDouban.subjects[idx];</span><br><span class="line">    <span class="keyword">var</span> title = subject.title;</span><br><span class="line">    <span class="keyword">if</span> (title.length &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">      title = title.substring(<span class="number">0</span>, <span class="number">6</span>) + <span class="string">'...'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = &#123;</span><br><span class="line">      title,</span><br><span class="line">      average: subject.rating.average,</span><br><span class="line">      coverageUrl: subject.images.large,</span><br><span class="line">      movieId: subject.id</span><br><span class="line">    &#125;</span><br><span class="line">    movies.push(temp)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    movies</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.data.movies)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;api返回的数据一般都是一个数组，数组中包含了多个对象。如何处理&lt;br&gt;返回一个数组，取数组中每一项的某个值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/es601.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;&lt;fi
      
    
    </summary>
    
      <category term="笔记本" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>git命令小结</title>
    <link href="http://yoursite.com/2017/10/14/git/"/>
    <id>http://yoursite.com/2017/10/14/git/</id>
    <published>2017-10-14T07:54:41.000Z</published>
    <updated>2017-11-23T13:37:59.244Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>列出远程所有分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure></li><li><p>将远程的dev分支搞到本地的dev分支并切换过去(用于在本地切换远程分支)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure></li><li><p><code>git pull</code> 将远程存储库中的更改合并到当前分支中。在默认模式下，<code>git pull</code>是<code>git fetch</code>后跟<code>git merge FETCH_HEAD</code>的缩写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin [远程]:[本地]</span><br></pre></td></tr></table></figure></li><li><p>在本地切换到远程的master分支，然后执行以下命令将null分支合并到master.如果没问题再push到远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/null</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;列出远程所有分支&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td cla
      
    
    </summary>
    
      <category term="笔记本" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
