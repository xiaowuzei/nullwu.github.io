{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"source/images/aliyun01.png","path":"images/aliyun01.png","modified":1,"renderable":0},{"_id":"source/images/es601.jpg","path":"images/es601.jpg","modified":1,"renderable":0},{"_id":"source/images/es602.jpg","path":"images/es602.jpg","modified":1,"renderable":0},{"_id":"source/images/mongodb01.png","path":"images/mongodb01.png","modified":1,"renderable":0},{"_id":"source/images/mongodb02.png","path":"images/mongodb02.png","modified":1,"renderable":0},{"_id":"source/images/ndoe01.png","path":"images/ndoe01.png","modified":1,"renderable":0},{"_id":"source/images/node02.png","path":"images/node02.png","modified":1,"renderable":0},{"_id":"source/images/token01.jpg","path":"images/token01.jpg","modified":1,"renderable":0},{"_id":"source/images/node03.png","path":"images/node03.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1520645156954},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1520645156954},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1520645156954},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1520645156970},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1520645156970},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1520645156970},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1520645156970},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1520645156970},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1520645156970},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1520645156970},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1520645156970},{"_id":"themes/next/README.md","hash":"7423256d6e7622434bbfe20c467819687e8e1b27","modified":1520645156970},{"_id":"themes/next/bower.json","hash":"47471a8f13528dc4052b746db5b4be2375682173","modified":1520645156970},{"_id":"themes/next/_config.yml","hash":"0158b101e232f46ae9ce8b9b5823b7a8220bdfcf","modified":1520645156970},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1520645156970},{"_id":"themes/next/package.json","hash":"39370e2aadf1f9a7c105edff064c6e47682b3932","modified":1520645157001},{"_id":"themes/next/package-lock.json","hash":"cc3e9b232005f824a73555ad6568d566b8aae554","modified":1520645157001},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1520645156970},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1520645156954},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1520645156970},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1520645156970},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1520645156970},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1520645156970},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1520645156970},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1520645156970},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1520645156970},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1520645156970},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1520645156970},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1520645156970},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1520645156970},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1520645156970},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1520645156970},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ad9c05586975c0f1629af04bbad079df008428fb","modified":1520645156970},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1520645156970},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1520645156970},{"_id":"themes/next/layout/_layout.swig","hash":"7d91c9ca571067a3548d0f3c132b480cd3beb823","modified":1520645156970},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1520645157001},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1520645157001},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1520645157001},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1520645157001},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1520645157001},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1520645157001},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1520645157001},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1520645157001},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1520645157001},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1520645157111},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1520645157111},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1520645157126},{"_id":"source/categories/index.md","hash":"ea0095bb70ac6ecdc3435f5043942fc6bccb1b6d","modified":1520645156923},{"_id":"source/_posts/2017-10-13-git.md","hash":"8cbcdb3226ab6995bd1d0b701a7064ee794fc1a1","modified":1520645156908},{"_id":"source/_posts/2017-10-14-mongodb-linux.md","hash":"f38ed9feffd3c4f6ae11f63dec2f28e581c39487","modified":1520645156908},{"_id":"source/_posts/2017-10-14-nginx-node-mongodb-vue.md","hash":"e5a82ef8f2b4bfde0b912d9b389d2c0eee94eb62","modified":1520645156908},{"_id":"source/_posts/2017-10-14-nginx.md","hash":"d8220e5265630106fb6bd3f0fcc3168893d2c78d","modified":1520645156908},{"_id":"source/_posts/2017-10-15-es6-data.md","hash":"7b567efac8189355f6a501abeb75778a9d3058f7","modified":1520645156908},{"_id":"source/_posts/2017-10-16-token.md","hash":"5c97d97ae37ae24df89fea031ee8dc9c1daed98a","modified":1520645156908},{"_id":"source/_posts/2017-10-16-what-token.md","hash":"28960bcabee8cf411fd68a74330dcc8ba99eb801","modified":1520645156908},{"_id":"source/_posts/2017-10-19-gulp-demo.md","hash":"3cb2d206354a7126f9dfe4ba769fca2b16686d3f","modified":1520645156908},{"_id":"source/_posts/2017-10-19-hexo-change.md","hash":"fb44c3d3da563c193d8acc6c869645cc42edd3cf","modified":1520645156908},{"_id":"source/_posts/2017-10-19-webpackdemo.md","hash":"fe325dd6f5d8db9c3361942a6df6dce75c9b0690","modified":1520645156908},{"_id":"source/_posts/2017-10-20-node-path.md","hash":"aed4dafebdd6b81866f33e462bed91615745846e","modified":1520645156908},{"_id":"source/_posts/2017-10-22-websocket.md","hash":"f4d3465c389b272d2bf1474750326143f53ccdc6","modified":1520645156908},{"_id":"source/_posts/2017-11-20-dom.md","hash":"676a0691ec6a78b82e8083c2b0e1348fc306bdf7","modified":1520645156908},{"_id":"source/_posts/2017-11-22-js-box.md","hash":"94f3c310d69706762fde1ea85f8e20dd0141424c","modified":1520645156908},{"_id":"source/_posts/2017-11-23-call.md","hash":"c685f7630eb69df7be0774cf422892b3db6c1cbd","modified":1520645156908},{"_id":"source/_posts/2017-11-23-jieyong.md","hash":"41fb9ae59907f450219fbd6d67dde62e63a34394","modified":1520645156908},{"_id":"source/_posts/2017-11-23-this.md","hash":"6d1922a1d9dc9efef4cce3653fb4352a0f9c3f08","modified":1520645156908},{"_id":"source/_posts/2017-11-23-yibu.md","hash":"442e5c1a22bd287417479eb2cc71ee7b58ef08cf","modified":1520645156908},{"_id":"source/_posts/2017-11-24-bangding.md","hash":"7340d543146b1ae5f96efb97a545aa7e70d5e444","modified":1520645156908},{"_id":"source/_posts/2017-11-24-sport.md","hash":"733f6394a779b5291ac0215a3112451036b06639","modified":1520645156908},{"_id":"source/_posts/2017-11-25-kelihua.md","hash":"68b17e194f83d303b3ee749c1d9b953ab43e5176","modified":1520645156908},{"_id":"source/_posts/2018-03-10-sanba.md","hash":"9d105db621efe970bf54f7b295780eab962ceefc","modified":1520645814391},{"_id":"source/_posts/hello-world.md","hash":"09b9b86ece2651afa14aa2d95e4c80edb9968071","modified":1520645156908},{"_id":"source/_posts/test.html","hash":"d7b12cf529a7f7258fde539a3dae4bc2ab829eda","modified":1520645156908},{"_id":"source/guanyu/index.md","hash":"180fd0845fb5b8ea958e94a957a8cafc5b9d6b7d","modified":1520645156923},{"_id":"source/images/avatar.png","hash":"542aeead165dfc4f9f1a4af17b999c38a0cb96b8","modified":1520645156923},{"_id":"source/images/aliyun01.png","hash":"581921a434529207dbfedfe2661b8b7b2e2daf2e","modified":1520645156923},{"_id":"source/images/es601.jpg","hash":"8321c9e6a118226f636b6f089be8830d8f554b51","modified":1520645156923},{"_id":"source/images/es602.jpg","hash":"1375f8a25688d8588d12fbcc114b490733caf81d","modified":1520645156923},{"_id":"source/images/mongodb01.png","hash":"06037a358f371b2a842dfa9bb52f57725ca4ede4","modified":1520645156923},{"_id":"source/images/mongodb02.png","hash":"5718ddb804a8f4f6e2cae30bb253a7d4c439ef63","modified":1520645156923},{"_id":"source/images/ndoe01.png","hash":"5c4fcd96431bbf84d2a31c385f95f36c0d703183","modified":1520645156923},{"_id":"source/images/node02.png","hash":"f0b47be20055ff55b23ea71f05820f5adb16b734","modified":1520645156923},{"_id":"source/images/token01.jpg","hash":"8100f93df9cb1946dfa7a09775ef7de8089d7ab0","modified":1520645156923},{"_id":"source/images/node03.png","hash":"4ebf4277d92b72620e31bd1d7be0d6249340d553","modified":1520645156923},{"_id":"source/tags/index.md","hash":"88ced82653e5cf7be61f977c2503da8ff91fd9a0","modified":1520645156923},{"_id":"source/xiangmu/index.md","hash":"90c95fdab6a3ff9795e9ad5dec32ec819aa806e2","modified":1520645156923},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520645157048},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1520645156970},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1520645156970},{"_id":"themes/next/layout/_partials/comments.swig","hash":"de45e77e7d52cf317129b7d21415a3002b95b94e","modified":1520645156970},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1520645156970},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1520645156970},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1520645156970},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1520645156986},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1520645156986},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1520645156986},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1520645156970},{"_id":"themes/next/layout/_macro/post.swig","hash":"18365c242e07bd4fd622f9cf8abc8f74c24072b6","modified":1520645156970},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1520645156970},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1520645156970},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b9f9959225876fb56fb3fba96306d19396e704d4","modified":1520645156970},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1520645156970},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1520645156986},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1520645156986},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1520645156986},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1520645156986},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1520645156986},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1520645156986},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1520645156986},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1520645156986},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1520645156986},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1520645156986},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1520645157001},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1520645157001},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1520645157001},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1520645157001},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1520645157001},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1520645157001},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1520645157001},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1520645157001},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1520645157001},{"_id":"themes/next/source/css/main.styl","hash":"289b2d649ff9d5311b4b0ad02589e1b09088fb86","modified":1520645157048},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1520645157048},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1520645157048},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1520645157048},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1520645157048},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1520645157048},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1520645157048},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1520645157048},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1520645157064},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1520645157064},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1520645157064},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1520645157064},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1520645157064},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520645157064},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1520645157064},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520645157064},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1520645157064},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1520645157064},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1520645157064},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520645156986},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520645156986},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520645157033},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520645157033},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520645157048},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520645157048},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520645157048},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1520645156970},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1520645156970},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1520645156986},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1520645156986},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1520645156986},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1520645156986},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1520645156986},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1520645156986},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1520645156986},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1520645156986},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1520645156986},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1520645156986},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"c29d42622abe992ebc9ef207eb65965cc7388c25","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1e47f2196a7cb3482c7a6c66de00a6dc7d403e92","modified":1520645156986},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1520645156986},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1520645157001},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1520645157001},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1520645157001},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1520645157001},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1520645157033},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1520645157033},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1520645157048},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1520645157048},{"_id":"themes/next/source/css/_my/mycss.styl","hash":"9423d208b68cb82c5b5f2554169ccb3bea052e44","modified":1520645157048},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1520645157048},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1520645157048},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1520645157048},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1520645157048},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1520645157064},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1520645157064},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1520645157064},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1520645157064},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1520645157064},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1520645157064},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1520645157064},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1520645157064},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1520645157064},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1520645157064},{"_id":"themes/next/source/js/src/utils.js","hash":"b7ddc240208d57596a67c78a04a11b0f0bdecc97","modified":1520645157064},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1520645157064},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1520645157079},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"1e6589559c7d4c8312c05dc23d1df8f31ce99d49","modified":1520645157079},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1520645157079},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1520645157079},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1520645157079},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1520645157079},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1520645157095},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1520645157095},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1520645157095},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1520645157095},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1520645157095},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1520645157095},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1520645157095},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1520645157095},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1520645157095},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1520645157095},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1520645157111},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1520645157111},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1520645157111},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1520645157111},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1520645157111},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1520645157111},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1520645157111},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1520645157111},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1520645157111},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1520645157111},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1520645157095},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1520645157001},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1520645157017},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1520645157033},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1520645157033},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1520645157033},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1520645157033},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1520645157033},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1520645157033},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1520645157033},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"30561ed60fc64f3e4ce85143bdb55faa814743a6","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1520645157048},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1520645157064},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1520645157064},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1520645157064},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1520645157064},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1520645157079},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1520645157079},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1520645157095},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1520645157111},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1520645157111},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1520645157064},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520645157095},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520645157095},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1520645157111},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1520645157001},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1520645157017},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1520645157033},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1520645157033},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1520645157033},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1520645157033},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1520645157033},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1520645157033},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1520645157033},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1520645157033},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1520645157033},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1520645157048},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1520645157048},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1520645157064},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1520645157064},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1520645157064},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1520645157064},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1520645157064},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1520645157079},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1520645157079},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1520645157095},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520645157095},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1520645157095},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1520645157079},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1520645157111},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1520645157095},{"_id":"public/atom.xml","hash":"4f7218d0de9620797bfed125e6c1b1c5d902db3c","modified":1520645869731},{"_id":"public/search.xml","hash":"dfbe8c836b7d8a2c6472b51d21a119fd9a46c97b","modified":1520645869744},{"_id":"public/sitemap.xml","hash":"e0bbf8cc2a8291a39db6a7b065b7c9223703dc9f","modified":1520645869744},{"_id":"public/categories/index.html","hash":"206915699a89a7cbe9ef8629f0f2fb757df7ac50","modified":1520645870056},{"_id":"public/guanyu/index.html","hash":"9e50f3226d389f8a978f88cdd1a822249b9b2b60","modified":1520645870056},{"_id":"public/tags/index.html","hash":"71ec22bebd2e0731c0eed880f069c8f68626916d","modified":1520645870056},{"_id":"public/xiangmu/index.html","hash":"b79866072f5b281dcfc5a5054fbb18f7ee8d1761","modified":1520645870056},{"_id":"public/2017/11/24/bangding/index.html","hash":"a9bf9bc80850f507c8862a370aad66834acc7580","modified":1520645870056},{"_id":"public/2017/11/22/dom/index.html","hash":"6c687d012b3eda62b41a986baecfafc01cbd310b","modified":1520645870056},{"_id":"public/2017/10/20/node-path/index.html","hash":"6ea5e65b34b039edde261f6bd8551cc12813db1e","modified":1520645870056},{"_id":"public/2017/10/14/git/index.html","hash":"304c733505756deec1a56ce7250220eb819d1032","modified":1520645870056},{"_id":"public/archives/page/3/index.html","hash":"aed668656e68974559ab7f799dc23ef0afbf2928","modified":1520645870056},{"_id":"public/archives/2017/page/3/index.html","hash":"53b58d6cf0d9a4d761b2d7ce932afc5bf75d5bb4","modified":1520645870056},{"_id":"public/archives/2017/10/page/2/index.html","hash":"42f4ca5069ab6579251159e08101e08acdde1004","modified":1520645870056},{"_id":"public/categories/笔记本/index.html","hash":"d948755ac073fd51afd3e77df68e61898c018016","modified":1520645870056},{"_id":"public/categories/备忘录/index.html","hash":"3b103ebcc313837551f13b6d50bb8aeb22a2adc5","modified":1520645870056},{"_id":"public/categories/尚在研究/index.html","hash":"cb3ba001bb32be43a7004a1b2376d9fd22c75c5e","modified":1520645870056},{"_id":"public/tags/git/index.html","hash":"32b582aa418bc397fe02a059c609b6e6e0e65261","modified":1520645870056},{"_id":"public/tags/mongodb/index.html","hash":"dad94bf19daa514afdaff625ebd52976c87680de","modified":1520645870056},{"_id":"public/tags/linux/index.html","hash":"b3ef1b62891534d8b43ea4c26150a1f9e7056bb4","modified":1520645870056},{"_id":"public/tags/node-js/index.html","hash":"268ac0b8759e917a36db844806c0af597b637e77","modified":1520645870056},{"_id":"public/tags/nginx/index.html","hash":"e7d99456072b631143f5a0ed44bba5f3ed89d839","modified":1520645870056},{"_id":"public/tags/vue-js/index.html","hash":"71e0421deb3af01391c2d66565bf749f3c8b38a4","modified":1520645870056},{"_id":"public/tags/es6/index.html","hash":"189f0e5a7eedc0d7a4d0a4c869e70ef3f794fcd3","modified":1520645870072},{"_id":"public/tags/token/index.html","hash":"1c79465667af55933b8da8ecc2e8d1e42e1d22b6","modified":1520645870072},{"_id":"public/tags/vuex/index.html","hash":"518e3f8ab91211f6194036cc4eb4388d9d7a8191","modified":1520645870072},{"_id":"public/tags/ndoe-js/index.html","hash":"6b5c409fa7fa23a79dfe3747e213c50de7ecd35e","modified":1520645870072},{"_id":"public/tags/gulp/index.html","hash":"fefacc75044b2c97c0c3792a6ff6aa0c51a4a18a","modified":1520645870072},{"_id":"public/tags/hexo/index.html","hash":"168a085a601bec4e26e926402f43812f14ea68a3","modified":1520645870072},{"_id":"public/tags/webpack/index.html","hash":"1b4cd3ecacd4a0316cd108b5734b2a7cdf57b5af","modified":1520645870072},{"_id":"public/2017/11/25/kelihua/index.html","hash":"ee33f41a88d96c3946e8b69d399173bab30a9868","modified":1520645870072},{"_id":"public/2017/11/24/sport/index.html","hash":"4848078d23fb7589d062cd2505d1d7fe8995808d","modified":1520645870072},{"_id":"public/2017/11/23/yibu/index.html","hash":"8bb0695acc8d305c119eda8039cecf5babadf4cd","modified":1520645870072},{"_id":"public/2017/11/23/this/index.html","hash":"0a4bcee0959f01dc1d36ca22a7c847f365868e32","modified":1520645870072},{"_id":"public/2017/11/23/jieyong/index.html","hash":"047e5f50cc96f95d9c5c8a2792c81cd4ae9fd5d0","modified":1520645870072},{"_id":"public/2017/11/22/call/index.html","hash":"e027416b338f8e1d7ab11049e42450294cfba875","modified":1520645870072},{"_id":"public/2017/11/22/js-box/index.html","hash":"42676aaede061ad04cbe48590dede135de939058","modified":1520645870072},{"_id":"public/2017/10/22/websocket/index.html","hash":"ca86d5dfd19f0d9a805adfab9d681e81cdccafad","modified":1520645870072},{"_id":"public/2017/10/19/webpackdemo/index.html","hash":"0fd13116dc29bdc58967979fddc22148f332c121","modified":1520645870072},{"_id":"public/2017/10/19/hexo-change/index.html","hash":"6e32e8845a73b7afa0c730e78718fb780c198362","modified":1520645870072},{"_id":"public/2017/10/19/gulp-demo/index.html","hash":"bde19b49af034e7e4529bc295a051a3186295e02","modified":1520645870072},{"_id":"public/2017/10/16/what-token/index.html","hash":"41d7d90555ef25e4d06c7da6985d11ff1b32d7ba","modified":1520645870072},{"_id":"public/2017/10/16/token/index.html","hash":"4f7d9944bba1da26090f29bab355e59e28d96717","modified":1520645870072},{"_id":"public/2017/10/15/es6-data/index.html","hash":"0dccab02dc295e0e67403c400bbd876c7ef5e33d","modified":1520645870072},{"_id":"public/2017/10/14/nginx-node-mongodb-vue/index.html","hash":"c179f4376f0a4c3b907748a23c4c5fc021033208","modified":1520645870072},{"_id":"public/2017/10/14/mongodb-linux/index.html","hash":"ab844fde604af24d1fd7033db5ec91dc8f7a4ffe","modified":1520645870072},{"_id":"public/2017/10/14/nginx/index.html","hash":"f7ce8f327d3c45b3ab6e375b722781a3ca3c117d","modified":1520645870072},{"_id":"public/archives/index.html","hash":"cc4b746b38e59b2ac1017776a545cfd0ba1cd64d","modified":1520645870072},{"_id":"public/archives/page/2/index.html","hash":"3a52db62a9853405b2f772d217e0f3c20dafcb58","modified":1520645870072},{"_id":"public/archives/2017/index.html","hash":"6d6ff135692777235845d598abe686da5fc63020","modified":1520645870072},{"_id":"public/archives/2017/page/2/index.html","hash":"0f212826a9a6e1a2e9a5e3508d586de5289c7fe0","modified":1520645870072},{"_id":"public/archives/2017/10/index.html","hash":"1a67c6b08e326cf6842878edd85b86003c175c3d","modified":1520645870072},{"_id":"public/archives/2017/11/index.html","hash":"05f40c3055953c0cf87bc7e23184590b19fd525f","modified":1520645870072},{"_id":"public/index.html","hash":"b86facd2537d364b2f86abecb0143769cc765075","modified":1520645870072},{"_id":"public/page/2/index.html","hash":"9e01e02ab5c1cfc871a4bc77c6c5d0708b65e842","modified":1520645870072},{"_id":"public/page/3/index.html","hash":"c2af975e4ffaa9725dfb64ae1fff4464fba21151","modified":1520645870072},{"_id":"public/2018/03/10/sanba/index.html","hash":"c5e1235dd9ace6d64d896ec3178c350021594eb9","modified":1520645870072},{"_id":"public/2018/03/10/test/index.html","hash":"2d8091a8bae0ab52691f38d7adb4c1efc18d420d","modified":1520645870072},{"_id":"public/archives/2018/index.html","hash":"c67ec7a29afe64c3073a865881bc99904ab147cb","modified":1520645870072},{"_id":"public/archives/2018/03/index.html","hash":"7fc4aaf46408ca85ef213af01dc154b16d89fcf3","modified":1520645870072},{"_id":"public/tags/websocket/index.html","hash":"6a88b6ffe3a859691b5cac457ea6daf6f42e4601","modified":1520645870072},{"_id":"public/2018/03/10/hello-world/index.html","hash":"cc81497cbc1c4335b9a93f380a63515b57b42266","modified":1520645870072},{"_id":"public/images/avatar.png","hash":"542aeead165dfc4f9f1a4af17b999c38a0cb96b8","modified":1520645870094},{"_id":"public/images/aliyun01.png","hash":"581921a434529207dbfedfe2661b8b7b2e2daf2e","modified":1520645870094},{"_id":"public/images/es601.jpg","hash":"8321c9e6a118226f636b6f089be8830d8f554b51","modified":1520645870094},{"_id":"public/images/es602.jpg","hash":"1375f8a25688d8588d12fbcc114b490733caf81d","modified":1520645870094},{"_id":"public/images/mongodb02.png","hash":"5718ddb804a8f4f6e2cae30bb253a7d4c439ef63","modified":1520645870094},{"_id":"public/images/node02.png","hash":"f0b47be20055ff55b23ea71f05820f5adb16b734","modified":1520645870094},{"_id":"public/images/mongodb01.png","hash":"06037a358f371b2a842dfa9bb52f57725ca4ede4","modified":1520645870094},{"_id":"public/images/ndoe01.png","hash":"5c4fcd96431bbf84d2a31c385f95f36c0d703183","modified":1520645870095},{"_id":"public/images/token01.jpg","hash":"8100f93df9cb1946dfa7a09775ef7de8089d7ab0","modified":1520645870095},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1520645870095},{"_id":"public/images/node03.png","hash":"4ebf4277d92b72620e31bd1d7be0d6249340d553","modified":1520645870095},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1520645870095},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1520645870095},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1520645870095},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1520645870095},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1520645870095},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1520645870095},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1520645870095},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1520645870095},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1520645870095},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1520645870095},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1520645870095},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520645870095},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1520645870097},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520645870097},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1520645870097},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1520645870097},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1520645870097},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1520645870097},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1520645870097},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1520645870097},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1520645870097},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1520645870097},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1520645870097},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1520645870097},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1520645870097},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1520645870097},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1520645870098},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1520645870098},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1520645870098},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1520645870098},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1520645870098},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1520645870098},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520645870574},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520645870581},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1520645870617},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1520645870617},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1520645870617},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1520645870617},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1520645870617},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1520645870617},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1520645870617},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1520645870617},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1520645870617},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1520645870617},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1520645870617},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1520645870617},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1520645870617},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"8d5e4e06b982a5dadfc1ef38f54e71f992cf2bdc","modified":1520645870617},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1520645870617},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1520645870617},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1520645870617},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1520645870617},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1520645870617},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1520645870617},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1520645870617},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1520645870617},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1520645870617},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1520645870617},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1520645870617},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1520645870617},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1520645870617},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1520645870617},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1520645870617},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1520645870617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1520645870617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1520645870617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1520645870617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1520645870617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1520645870617},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1520645870617},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1520645870617},{"_id":"public/css/main.css","hash":"7bb58e88e56627a749f0582f44479637f52f07fa","modified":1520645870617},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1520645870617},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1520645870617},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1520645870617},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1520645870617},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1520645870617},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1520645870617},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1520645870617},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520645870617},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1520645870617},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1520645870617},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1520645870617},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1520645870617},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1520645870617},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1520645870617},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1520645870617},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1520645870617},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1520645870617},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1520645870617},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1520645870617},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1520645870617},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1520645870617},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520645870617},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1520645870617},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1520645870707}],"Category":[{"name":"笔记本","_id":"cjekpabwp0004yctiyauxu4ff"},{"name":"备忘录","_id":"cjekpabwp000byctiax296n8y"},{"name":"尚在研究","_id":"cjekpabx5000tyctitlmxi79i"}],"Data":[],"Page":[{"title":"分类","date":"2017-10-12T08:14:15.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-10-12 16:14:15\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-03-10T01:25:56.923Z","path":"categories/index.html","layout":"page","_id":"cjekpabwa0001yctiytuetvfp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","date":"2017-10-12T09:43:02.000Z","type":"guanyu","_content":"代码调试能力：alert大法\n技术栈：万年jquery\n处理bug：有问题，找百度\n页面交互：插件滥用","source":"guanyu/index.md","raw":"---\ntitle: About\ndate: 2017-10-12 17:43:02\ntype: \"guanyu\"\n---\n代码调试能力：alert大法\n技术栈：万年jquery\n处理bug：有问题，找百度\n页面交互：插件滥用","updated":"2018-03-10T01:25:56.923Z","path":"guanyu/index.html","comments":1,"layout":"page","_id":"cjekpabwa0003ycti02fd4de2","content":"<p>代码调试能力：alert大法<br>技术栈：万年jquery<br>处理bug：有问题，找百度<br>页面交互：插件滥用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>代码调试能力：alert大法<br>技术栈：万年jquery<br>处理bug：有问题，找百度<br>页面交互：插件滥用</p>\n"},{"title":"tags","date":"2017-10-12T08:18:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-10-12 16:18:33\ntype: \"tags\"\n---\n","updated":"2018-03-10T01:25:56.923Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjekpabwp0007ycti7zg7y42t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"xiangmu","date":"2017-10-12T09:43:02.000Z","type":"xiangmu","_content":"sdfdsfdfdf","source":"xiangmu/index.md","raw":"---\ntitle: xiangmu\ndate: 2017-10-12 17:43:02\ntype: \"xiangmu\"\n---\nsdfdsfdfdf","updated":"2018-03-10T01:25:56.923Z","path":"xiangmu/index.html","comments":1,"layout":"page","_id":"cjekpabwp0009yctiua5m6ap2","content":"<p>sdfdsfdfdf</p>\n","site":{"data":{}},"excerpt":"","more":"<p>sdfdsfdfdf</p>\n"}],"Post":[{"title":"git命令小结","date":"2017-10-14T07:54:41.000Z","_content":"\n- 列出远程所有分支\n```bash\ngit branch -a\n ```\n- 将远程的dev分支搞到本地的dev分支并切换过去(用于在本地切换远程分支)\n```\ngit checkout -b dev origin/dev\n```\n- `git pull` 将远程存储库中的更改合并到当前分支中。在默认模式下，`git pull`是`git fetch`后跟`git merge FETCH_HEAD`的缩写。\n```\ngit pull origin [远程]:[本地]\n```\n- 在本地切换到远程的master分支，然后执行以下命令将null分支合并到master.如果没问题再push到远程\n```\ngit merge origin/null\n```","source":"_posts/2017-10-13-git.md","raw":"---\ntitle: git命令小结\ndate: 2017-10-14 15:54:41\ntags:  [git]\ncategories: 笔记本\n---\n\n- 列出远程所有分支\n```bash\ngit branch -a\n ```\n- 将远程的dev分支搞到本地的dev分支并切换过去(用于在本地切换远程分支)\n```\ngit checkout -b dev origin/dev\n```\n- `git pull` 将远程存储库中的更改合并到当前分支中。在默认模式下，`git pull`是`git fetch`后跟`git merge FETCH_HEAD`的缩写。\n```\ngit pull origin [远程]:[本地]\n```\n- 在本地切换到远程的master分支，然后执行以下命令将null分支合并到master.如果没问题再push到远程\n```\ngit merge origin/null\n```","slug":"git","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabwa0000yctia688g31i","content":"<ul>\n<li><p>列出远程所有分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将远程的dev分支搞到本地的dev分支并切换过去(用于在本地切换远程分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git pull</code> 将远程存储库中的更改合并到当前分支中。在默认模式下，<code>git pull</code>是<code>git fetch</code>后跟<code>git merge FETCH_HEAD</code>的缩写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin [远程]:[本地]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地切换到远程的master分支，然后执行以下命令将null分支合并到master.如果没问题再push到远程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge origin/null</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>列出远程所有分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将远程的dev分支搞到本地的dev分支并切换过去(用于在本地切换远程分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git pull</code> 将远程存储库中的更改合并到当前分支中。在默认模式下，<code>git pull</code>是<code>git fetch</code>后跟<code>git merge FETCH_HEAD</code>的缩写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin [远程]:[本地]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地切换到远程的master分支，然后执行以下命令将null分支合并到master.如果没问题再push到远程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge origin/null</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"linux下mongodb的安装配置","date":"2017-10-14T01:28:18.000Z","_content":"## 前言\n本文将总结如何在linux系统下安装并运行mongb\n服务器操作系统:CentOS 6.8 64位\n<!-- more -->\n## 下载上传解压三部曲\n首先去[官网](http://note.youdao.com/)将mongodb下载到自己的本地(linux版本)\n通过winScp上传到服务器任意目录\n打开xshell到此目录下，敲入以下命令进行解压\n```\ntar xvf mongodb-linux-x86_64-amazon-3.4.9.tgz\n```\n将解压后的文件重命名并移动到/user/local目录下 \n```\nmv mongodb-linux-x86_64-amazon-3.4.9 /usr/local/mongodb\n```\n```\ncd  /usr/local/mongodb/bin/\n```\n```\nll\n```\n![image](/images/mongodb01.png)\n> bin下的mongod就是MongoDB的服务端进程，mongo就是其客户端，其它的命令用于MongoDB的其它用途如MongoDB文件导出等\n\n## 启动\n启动前，先指定mongodb的data目录，如果没有就创建一个：\n```\ncd /usr/local/mongodb\n```\n```\nmkdir data\n```\n```\n/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/data/mongodb.log --logappend&\n\n```\n\n启动成功后，可查看是否启动成功了，默认端口号是27017，当然在启动时也可以指定未使用的其它端口.\n```\nnetstat -nutlp\n```\n![image](/images/mongodb02.png)\n\n最后，将客户端mogo文件在/bin下软链接，方便随处执行：\n\n```\nln -s /usr/local/mongodb/bin/mongo /bin/mongo\n```\n（完蛋）","source":"_posts/2017-10-14-mongodb-linux.md","raw":"---\ntitle: linux下mongodb的安装配置\ndate: 2017-10-14 09:28:18\ntags: [mongodb,linux]\ncategories: 备忘录\n---\n## 前言\n本文将总结如何在linux系统下安装并运行mongb\n服务器操作系统:CentOS 6.8 64位\n<!-- more -->\n## 下载上传解压三部曲\n首先去[官网](http://note.youdao.com/)将mongodb下载到自己的本地(linux版本)\n通过winScp上传到服务器任意目录\n打开xshell到此目录下，敲入以下命令进行解压\n```\ntar xvf mongodb-linux-x86_64-amazon-3.4.9.tgz\n```\n将解压后的文件重命名并移动到/user/local目录下 \n```\nmv mongodb-linux-x86_64-amazon-3.4.9 /usr/local/mongodb\n```\n```\ncd  /usr/local/mongodb/bin/\n```\n```\nll\n```\n![image](/images/mongodb01.png)\n> bin下的mongod就是MongoDB的服务端进程，mongo就是其客户端，其它的命令用于MongoDB的其它用途如MongoDB文件导出等\n\n## 启动\n启动前，先指定mongodb的data目录，如果没有就创建一个：\n```\ncd /usr/local/mongodb\n```\n```\nmkdir data\n```\n```\n/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/data/mongodb.log --logappend&\n\n```\n\n启动成功后，可查看是否启动成功了，默认端口号是27017，当然在启动时也可以指定未使用的其它端口.\n```\nnetstat -nutlp\n```\n![image](/images/mongodb02.png)\n\n最后，将客户端mogo文件在/bin下软链接，方便随处执行：\n\n```\nln -s /usr/local/mongodb/bin/mongo /bin/mongo\n```\n（完蛋）","slug":"mongodb-linux","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabwa0002ycti8bkja9mq","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文将总结如何在linux系统下安装并运行mongb<br>服务器操作系统:CentOS 6.8 64位<br><a id=\"more\"></a></p>\n<h2 id=\"下载上传解压三部曲\"><a href=\"#下载上传解压三部曲\" class=\"headerlink\" title=\"下载上传解压三部曲\"></a>下载上传解压三部曲</h2><p>首先去<a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">官网</a>将mongodb下载到自己的本地(linux版本)<br>通过winScp上传到服务器任意目录<br>打开xshell到此目录下，敲入以下命令进行解压<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf mongodb-linux-x86_64-amazon-3.4.9.tgz</span><br></pre></td></tr></table></figure></p>\n<p>将解压后的文件重命名并移动到/user/local目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv mongodb-linux-x86_64-amazon-3.4.9 /usr/local/mongodb</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd  /usr/local/mongodb/bin/</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mongodb01.png\" alt=\"image\"></p>\n<blockquote>\n<p>bin下的mongod就是MongoDB的服务端进程，mongo就是其客户端，其它的命令用于MongoDB的其它用途如MongoDB文件导出等</p>\n</blockquote>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>启动前，先指定mongodb的data目录，如果没有就创建一个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/mongodb</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir data</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/data/mongodb.log --logappend&amp;</span><br></pre></td></tr></table></figure>\n<p>启动成功后，可查看是否启动成功了，默认端口号是27017，当然在启动时也可以指定未使用的其它端口.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nutlp</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mongodb02.png\" alt=\"image\"></p>\n<p>最后，将客户端mogo文件在/bin下软链接，方便随处执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/mongodb/bin/mongo /bin/mongo</span><br></pre></td></tr></table></figure>\n<p>（完蛋）</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文将总结如何在linux系统下安装并运行mongb<br>服务器操作系统:CentOS 6.8 64位<br>","more":"</p>\n<h2 id=\"下载上传解压三部曲\"><a href=\"#下载上传解压三部曲\" class=\"headerlink\" title=\"下载上传解压三部曲\"></a>下载上传解压三部曲</h2><p>首先去<a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">官网</a>将mongodb下载到自己的本地(linux版本)<br>通过winScp上传到服务器任意目录<br>打开xshell到此目录下，敲入以下命令进行解压<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf mongodb-linux-x86_64-amazon-3.4.9.tgz</span><br></pre></td></tr></table></figure></p>\n<p>将解压后的文件重命名并移动到/user/local目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv mongodb-linux-x86_64-amazon-3.4.9 /usr/local/mongodb</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd  /usr/local/mongodb/bin/</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mongodb01.png\" alt=\"image\"></p>\n<blockquote>\n<p>bin下的mongod就是MongoDB的服务端进程，mongo就是其客户端，其它的命令用于MongoDB的其它用途如MongoDB文件导出等</p>\n</blockquote>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>启动前，先指定mongodb的data目录，如果没有就创建一个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/mongodb</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir data</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/data/mongodb.log --logappend&amp;</span><br></pre></td></tr></table></figure>\n<p>启动成功后，可查看是否启动成功了，默认端口号是27017，当然在启动时也可以指定未使用的其它端口.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nutlp</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mongodb02.png\" alt=\"image\"></p>\n<p>最后，将客户端mogo文件在/bin下软链接，方便随处执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/mongodb/bin/mongo /bin/mongo</span><br></pre></td></tr></table></figure>\n<p>（完蛋）</p>"},{"title":"linux下部署node项目","date":"2017-10-14T03:18:00.000Z","_content":"## 前言\n没有\n\n## 部署node环境\n想要运行node，自然要在服务器上部署node环境\n\n阿里云上有篇教程讲解[部署Node.js项目（CentOS）](部署Node.js项目（CentOS)\n\n如果根据以上教程成功搞定，node环境已经安装完成，npm包管理器也有了。由于npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败，所有我还需要npm的国内镜像---cnpm。\n\nxshell 敲入命令\n```\nnpm install -g cnpm --registry=http://registry.npm.taobao.org \n\n```\n完成之后，我们就可以用cnpm代替npm来安装依赖包了。\n\n> 另外，如果是用nvm来管理node，需要每次登陆服务器首先nvm use [node版本号]才能使用node和npm命令\n\n![image](/images/ndoe01.png)\n<!-- more -->\n\n## 上传代码到服务器\n将node代码上传到服务器的/blog(自己指定)目录下，解构如下\n\n![image](/images/node02.png)\n\n其中app.js中指定监听的端口\n\n```javascript\napp.set('port', process.env.PORT || 3389);\napp.listen(app.get('port'), function() {\n  console.log('Express server listening on port ' + app.get('port'));\n});\n\n```\n\n利用xshell在此目录下运行\n\n`node app.js`\n即可启动此项目，前提3389这个接口是开放的\n\n但是如果用这种方法，我们不能退出，因此要用`pm2`来管理我们的进程\n\n## pm2管理进程\n全局安装pm2\n\n`cnpm install pm2 -g`\n\n运行\n\n`pm2 start app.js`\n\n![image](/images/node03.png)\n\n停止\n\n`pm2 stop app.js`","source":"_posts/2017-10-14-nginx-node-mongodb-vue.md","raw":"---\ntitle: linux下部署node项目\ndate: 2017-10-14 11:18:00\ntags: [linux,node.js]\ncategories: 备忘录\n---\n## 前言\n没有\n\n## 部署node环境\n想要运行node，自然要在服务器上部署node环境\n\n阿里云上有篇教程讲解[部署Node.js项目（CentOS）](部署Node.js项目（CentOS)\n\n如果根据以上教程成功搞定，node环境已经安装完成，npm包管理器也有了。由于npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败，所有我还需要npm的国内镜像---cnpm。\n\nxshell 敲入命令\n```\nnpm install -g cnpm --registry=http://registry.npm.taobao.org \n\n```\n完成之后，我们就可以用cnpm代替npm来安装依赖包了。\n\n> 另外，如果是用nvm来管理node，需要每次登陆服务器首先nvm use [node版本号]才能使用node和npm命令\n\n![image](/images/ndoe01.png)\n<!-- more -->\n\n## 上传代码到服务器\n将node代码上传到服务器的/blog(自己指定)目录下，解构如下\n\n![image](/images/node02.png)\n\n其中app.js中指定监听的端口\n\n```javascript\napp.set('port', process.env.PORT || 3389);\napp.listen(app.get('port'), function() {\n  console.log('Express server listening on port ' + app.get('port'));\n});\n\n```\n\n利用xshell在此目录下运行\n\n`node app.js`\n即可启动此项目，前提3389这个接口是开放的\n\n但是如果用这种方法，我们不能退出，因此要用`pm2`来管理我们的进程\n\n## pm2管理进程\n全局安装pm2\n\n`cnpm install pm2 -g`\n\n运行\n\n`pm2 start app.js`\n\n![image](/images/node03.png)\n\n停止\n\n`pm2 stop app.js`","slug":"nginx-node-mongodb-vue","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabwp0006yctithydt50g","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>没有</p>\n<h2 id=\"部署node环境\"><a href=\"#部署node环境\" class=\"headerlink\" title=\"部署node环境\"></a>部署node环境</h2><p>想要运行node，自然要在服务器上部署node环境</p>\n<p>阿里云上有篇教程讲解<a href=\"部署Node.js项目（CentOS\">部署Node.js项目（CentOS）</a></p>\n<p>如果根据以上教程成功搞定，node环境已经安装完成，npm包管理器也有了。由于npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败，所有我还需要npm的国内镜像—cnpm。</p>\n<p>xshell 敲入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>完成之后，我们就可以用cnpm代替npm来安装依赖包了。</p>\n<blockquote>\n<p>另外，如果是用nvm来管理node，需要每次登陆服务器首先nvm use [node版本号]才能使用node和npm命令</p>\n</blockquote>\n<p><img src=\"/images/ndoe01.png\" alt=\"image\"><br><a id=\"more\"></a></p>\n<h2 id=\"上传代码到服务器\"><a href=\"#上传代码到服务器\" class=\"headerlink\" title=\"上传代码到服务器\"></a>上传代码到服务器</h2><p>将node代码上传到服务器的/blog(自己指定)目录下，解构如下</p>\n<p><img src=\"/images/node02.png\" alt=\"image\"></p>\n<p>其中app.js中指定监听的端口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3389</span>);</span><br><span class=\"line\">app.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Express server listening on port '</span> + app.get(<span class=\"string\">'port'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>利用xshell在此目录下运行</p>\n<p><code>node app.js</code><br>即可启动此项目，前提3389这个接口是开放的</p>\n<p>但是如果用这种方法，我们不能退出，因此要用<code>pm2</code>来管理我们的进程</p>\n<h2 id=\"pm2管理进程\"><a href=\"#pm2管理进程\" class=\"headerlink\" title=\"pm2管理进程\"></a>pm2管理进程</h2><p>全局安装pm2</p>\n<p><code>cnpm install pm2 -g</code></p>\n<p>运行</p>\n<p><code>pm2 start app.js</code></p>\n<p><img src=\"/images/node03.png\" alt=\"image\"></p>\n<p>停止</p>\n<p><code>pm2 stop app.js</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>没有</p>\n<h2 id=\"部署node环境\"><a href=\"#部署node环境\" class=\"headerlink\" title=\"部署node环境\"></a>部署node环境</h2><p>想要运行node，自然要在服务器上部署node环境</p>\n<p>阿里云上有篇教程讲解<a href=\"部署Node.js项目（CentOS\">部署Node.js项目（CentOS）</a></p>\n<p>如果根据以上教程成功搞定，node环境已经安装完成，npm包管理器也有了。由于npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败，所有我还需要npm的国内镜像—cnpm。</p>\n<p>xshell 敲入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>完成之后，我们就可以用cnpm代替npm来安装依赖包了。</p>\n<blockquote>\n<p>另外，如果是用nvm来管理node，需要每次登陆服务器首先nvm use [node版本号]才能使用node和npm命令</p>\n</blockquote>\n<p><img src=\"/images/ndoe01.png\" alt=\"image\"><br>","more":"</p>\n<h2 id=\"上传代码到服务器\"><a href=\"#上传代码到服务器\" class=\"headerlink\" title=\"上传代码到服务器\"></a>上传代码到服务器</h2><p>将node代码上传到服务器的/blog(自己指定)目录下，解构如下</p>\n<p><img src=\"/images/node02.png\" alt=\"image\"></p>\n<p>其中app.js中指定监听的端口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3389</span>);</span><br><span class=\"line\">app.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Express server listening on port '</span> + app.get(<span class=\"string\">'port'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>利用xshell在此目录下运行</p>\n<p><code>node app.js</code><br>即可启动此项目，前提3389这个接口是开放的</p>\n<p>但是如果用这种方法，我们不能退出，因此要用<code>pm2</code>来管理我们的进程</p>\n<h2 id=\"pm2管理进程\"><a href=\"#pm2管理进程\" class=\"headerlink\" title=\"pm2管理进程\"></a>pm2管理进程</h2><p>全局安装pm2</p>\n<p><code>cnpm install pm2 -g</code></p>\n<p>运行</p>\n<p><code>pm2 start app.js</code></p>\n<p><img src=\"/images/node03.png\" alt=\"image\"></p>\n<p>停止</p>\n<p><code>pm2 stop app.js</code></p>"},{"title":"线上搭建nginx服务器","date":"2017-10-14T00:06:01.000Z","_content":"\n\n## 线上配置第一个vue项目\n```nginx\nhttp { ...\n\n     server {\n            listen       80;\n            server_name  firstServer;\n            location / { \n                root   /usr;                       #指向项目所在的根目录\n                index  index.html index.htm;\n                try_files $uri $uri/ /index.html;  #解决history模式下刷新引起的404\n            }\n            location /api/ {                       # 反向代理解决跨域\n                proxy_pass http://api.zhuishushenqi.com/;\n            }\n       ...        \n    }\n```\n<!-- more -->\n> 配置到这里，将vue项目打包后丢到服务器的/usr目录下，访问自己的公网ip即可。\n\n## 配置node.js+vue项目\n在成功配置第一个项目后，想要将自己本地的vue+node项目上线。因为上一个项目已经占用了公网ip（默认监听80端口）。只能开放另一个端口来配置服务。\n> 在和上一个server同级下再配置一份，如下\n\n```nginx\n     server {\n            listen       66;\n            server_name  blogServer;\n            location / { \n                root   /blog;                      \n                index  index.html index.htm;\n                try_files $uri $uri/ /index.html;  \n            }\n            location /api {                       # 访问api时指向3389端口\n                proxy_pass http://47.95.207.4:3389/api;\n            }\n       ...    \n```\n> 值得一说的是，这里我将api指向了3389端口，是开放的另一个端口。即node.js监听的端口,如下。\n\n```javascript\napp.set('port', process.env.PORT || 3389);\napp.listen(app.get('port'), function() {\n  console.log('Express server listening on port ' + app.get('port'));\n});\n```\n> 注意，我们自己开放的端口需要在阿里云后台进行`安全组配置`\n> 此时，访问项目只需`公网ip:66`\n\n（完蛋）\n","source":"_posts/2017-10-14-nginx.md","raw":"---\ntitle: 线上搭建nginx服务器\ndate: 2017-10-14 08:06:01\ntags: [nginx,vue.js,node.js]\ncategories: 备忘录\n---\n\n\n## 线上配置第一个vue项目\n```nginx\nhttp { ...\n\n     server {\n            listen       80;\n            server_name  firstServer;\n            location / { \n                root   /usr;                       #指向项目所在的根目录\n                index  index.html index.htm;\n                try_files $uri $uri/ /index.html;  #解决history模式下刷新引起的404\n            }\n            location /api/ {                       # 反向代理解决跨域\n                proxy_pass http://api.zhuishushenqi.com/;\n            }\n       ...        \n    }\n```\n<!-- more -->\n> 配置到这里，将vue项目打包后丢到服务器的/usr目录下，访问自己的公网ip即可。\n\n## 配置node.js+vue项目\n在成功配置第一个项目后，想要将自己本地的vue+node项目上线。因为上一个项目已经占用了公网ip（默认监听80端口）。只能开放另一个端口来配置服务。\n> 在和上一个server同级下再配置一份，如下\n\n```nginx\n     server {\n            listen       66;\n            server_name  blogServer;\n            location / { \n                root   /blog;                      \n                index  index.html index.htm;\n                try_files $uri $uri/ /index.html;  \n            }\n            location /api {                       # 访问api时指向3389端口\n                proxy_pass http://47.95.207.4:3389/api;\n            }\n       ...    \n```\n> 值得一说的是，这里我将api指向了3389端口，是开放的另一个端口。即node.js监听的端口,如下。\n\n```javascript\napp.set('port', process.env.PORT || 3389);\napp.listen(app.get('port'), function() {\n  console.log('Express server listening on port ' + app.get('port'));\n});\n```\n> 注意，我们自己开放的端口需要在阿里云后台进行`安全组配置`\n> 此时，访问项目只需`公网ip:66`\n\n（完蛋）\n","slug":"nginx","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabwp0008yctihmaxhrrv","content":"<h2 id=\"线上配置第一个vue项目\"><a href=\"#线上配置第一个vue项目\" class=\"headerlink\" title=\"线上配置第一个vue项目\"></a>线上配置第一个vue项目</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123; ...</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">            <span class=\"attribute\">server_name</span>  firstServer;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">                <span class=\"attribute\">root</span>   /usr;                       <span class=\"comment\">#指向项目所在的根目录</span></span><br><span class=\"line\">                <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">                <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;  <span class=\"comment\">#解决history模式下刷新引起的404</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> /api/ &#123;                       <span class=\"comment\"># 反向代理解决跨域</span></span><br><span class=\"line\">                <span class=\"attribute\">proxy_pass</span> http://api.zhuishushenqi.com/;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">       ...        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>配置到这里，将vue项目打包后丢到服务器的/usr目录下，访问自己的公网ip即可。</p>\n</blockquote>\n<h2 id=\"配置node-js-vue项目\"><a href=\"#配置node-js-vue项目\" class=\"headerlink\" title=\"配置node.js+vue项目\"></a>配置node.js+vue项目</h2><p>在成功配置第一个项目后，想要将自己本地的vue+node项目上线。因为上一个项目已经占用了公网ip（默认监听80端口）。只能开放另一个端口来配置服务。</p>\n<blockquote>\n<p>在和上一个server同级下再配置一份，如下</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">       <span class=\"attribute\">listen</span>       <span class=\"number\">66</span>;</span><br><span class=\"line\">       <span class=\"attribute\">server_name</span>  blogServer;</span><br><span class=\"line\">       <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">           <span class=\"attribute\">root</span>   /blog;                      </span><br><span class=\"line\">           <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">           <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;  </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"attribute\">location</span> /api &#123;                       <span class=\"comment\"># 访问api时指向3389端口</span></span><br><span class=\"line\">           <span class=\"attribute\">proxy_pass</span> http://47.95.207.4:3389/api;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>值得一说的是，这里我将api指向了3389端口，是开放的另一个端口。即node.js监听的端口,如下。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3389</span>);</span><br><span class=\"line\">app.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Express server listening on port '</span> + app.get(<span class=\"string\">'port'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，我们自己开放的端口需要在阿里云后台进行<code>安全组配置</code><br>此时，访问项目只需<code>公网ip:66</code></p>\n</blockquote>\n<p>（完蛋）</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"线上配置第一个vue项目\"><a href=\"#线上配置第一个vue项目\" class=\"headerlink\" title=\"线上配置第一个vue项目\"></a>线上配置第一个vue项目</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123; ...</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">            <span class=\"attribute\">server_name</span>  firstServer;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">                <span class=\"attribute\">root</span>   /usr;                       <span class=\"comment\">#指向项目所在的根目录</span></span><br><span class=\"line\">                <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">                <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;  <span class=\"comment\">#解决history模式下刷新引起的404</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> /api/ &#123;                       <span class=\"comment\"># 反向代理解决跨域</span></span><br><span class=\"line\">                <span class=\"attribute\">proxy_pass</span> http://api.zhuishushenqi.com/;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">       ...        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>配置到这里，将vue项目打包后丢到服务器的/usr目录下，访问自己的公网ip即可。</p>\n</blockquote>\n<h2 id=\"配置node-js-vue项目\"><a href=\"#配置node-js-vue项目\" class=\"headerlink\" title=\"配置node.js+vue项目\"></a>配置node.js+vue项目</h2><p>在成功配置第一个项目后，想要将自己本地的vue+node项目上线。因为上一个项目已经占用了公网ip（默认监听80端口）。只能开放另一个端口来配置服务。</p>\n<blockquote>\n<p>在和上一个server同级下再配置一份，如下</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">       <span class=\"attribute\">listen</span>       <span class=\"number\">66</span>;</span><br><span class=\"line\">       <span class=\"attribute\">server_name</span>  blogServer;</span><br><span class=\"line\">       <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">           <span class=\"attribute\">root</span>   /blog;                      </span><br><span class=\"line\">           <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">           <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;  </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"attribute\">location</span> /api &#123;                       <span class=\"comment\"># 访问api时指向3389端口</span></span><br><span class=\"line\">           <span class=\"attribute\">proxy_pass</span> http://47.95.207.4:3389/api;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>值得一说的是，这里我将api指向了3389端口，是开放的另一个端口。即node.js监听的端口,如下。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3389</span>);</span><br><span class=\"line\">app.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Express server listening on port '</span> + app.get(<span class=\"string\">'port'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，我们自己开放的端口需要在阿里云后台进行<code>安全组配置</code><br>此时，访问项目只需<code>公网ip:66</code></p>\n</blockquote>\n<p>（完蛋）</p>"},{"title":"es6,es7对数据返回的处理","date":"2017-10-15T07:30:22.000Z","_content":">api返回的数据一般都是一个数组，数组中包含了多个对象。如何处理\n> 返回一个数组，取数组中每一项的某个值\n\n![image](/images/es601.jpg)\n```javascript\n            api.getBooks(this.bookInfo.id)\n                .then(data => {\n                    return data.map(item => item.book\n                    )\n                })\n```\n\n![image](/images/es602.jpg)\n\n>通过便利重新对返回的数据重新组织,可以获取我们想要的数据而不是全部并且自定义key,value\n```javascript\n  processDoubanData(moviesDouban) {\n    var movies = [];\n    for (var idx in moviesDouban.subjects) {\n      var subject = moviesDouban.subjects[idx];\n      var title = subject.title;\n      if (title.length >= 6) {\n        title = title.substring(0, 6) + '...'\n      }\n      var temp = {\n        title,\n        average: subject.rating.average,\n        coverageUrl: subject.images.large,\n        movieId: subject.id\n      }\n      movies.push(temp)\n    }\n    this.setData({\n      movies\n    })\n    console.log(this.data.movies)\n  }\n\n```\n","source":"_posts/2017-10-15-es6-data.md","raw":"---\ntitle: es6,es7对数据返回的处理\ndate: 2017-10-15 15:30:22\ntags: [es6]\ncategories: 笔记本\n---\n>api返回的数据一般都是一个数组，数组中包含了多个对象。如何处理\n> 返回一个数组，取数组中每一项的某个值\n\n![image](/images/es601.jpg)\n```javascript\n            api.getBooks(this.bookInfo.id)\n                .then(data => {\n                    return data.map(item => item.book\n                    )\n                })\n```\n\n![image](/images/es602.jpg)\n\n>通过便利重新对返回的数据重新组织,可以获取我们想要的数据而不是全部并且自定义key,value\n```javascript\n  processDoubanData(moviesDouban) {\n    var movies = [];\n    for (var idx in moviesDouban.subjects) {\n      var subject = moviesDouban.subjects[idx];\n      var title = subject.title;\n      if (title.length >= 6) {\n        title = title.substring(0, 6) + '...'\n      }\n      var temp = {\n        title,\n        average: subject.rating.average,\n        coverageUrl: subject.images.large,\n        movieId: subject.id\n      }\n      movies.push(temp)\n    }\n    this.setData({\n      movies\n    })\n    console.log(this.data.movies)\n  }\n\n```\n","slug":"es6-data","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabwp000aycti6vaox2wy","content":"<blockquote>\n<p>api返回的数据一般都是一个数组，数组中包含了多个对象。如何处理<br>返回一个数组，取数组中每一项的某个值</p>\n</blockquote>\n<p><img src=\"/images/es601.jpg\" alt=\"image\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api.getBooks(<span class=\"keyword\">this</span>.bookInfo.id)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.book</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/es602.jpg\" alt=\"image\"></p>\n<blockquote>\n<p>通过便利重新对返回的数据重新组织,可以获取我们想要的数据而不是全部并且自定义key,value<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDoubanData(moviesDouban) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> movies = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> idx <span class=\"keyword\">in</span> moviesDouban.subjects) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subject = moviesDouban.subjects[idx];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> title = subject.title;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (title.length &gt;= <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">      title = title.substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>) + <span class=\"string\">'...'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = &#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      average: subject.rating.average,</span><br><span class=\"line\">      coverageUrl: subject.images.large,</span><br><span class=\"line\">      movieId: subject.id</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    movies.push(temp)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">    movies</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.data.movies)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>api返回的数据一般都是一个数组，数组中包含了多个对象。如何处理<br>返回一个数组，取数组中每一项的某个值</p>\n</blockquote>\n<p><img src=\"/images/es601.jpg\" alt=\"image\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api.getBooks(<span class=\"keyword\">this</span>.bookInfo.id)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.book</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/es602.jpg\" alt=\"image\"></p>\n<blockquote>\n<p>通过便利重新对返回的数据重新组织,可以获取我们想要的数据而不是全部并且自定义key,value<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDoubanData(moviesDouban) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> movies = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> idx <span class=\"keyword\">in</span> moviesDouban.subjects) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subject = moviesDouban.subjects[idx];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> title = subject.title;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (title.length &gt;= <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">      title = title.substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>) + <span class=\"string\">'...'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = &#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      average: subject.rating.average,</span><br><span class=\"line\">      coverageUrl: subject.images.large,</span><br><span class=\"line\">      movieId: subject.id</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    movies.push(temp)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">    movies</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.data.movies)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"token","date":"2017-10-16T02:28:07.000Z","_content":"## 首次发起请求\nreg.vue\n> 注册页面，注册时触发actions,把用户的参数带过去\n \n\n\n```javascript\n    user: {\n            username: '',\n            password: '',\n            repassword: '',\n          }\nthis.$store.dispatch('UserReg', this.user);\n```\nactions.js\n > 带着参数调用注册接口.如果注册成功，触发mutations，并跳转到admin页面\n \n```javascript\nimport Vue from 'vue'\nimport api from '../api'\nimport router from '../router'\n\nexport default {\n// 后台注册\n  UserReg({commit},data){\n   api.localReg(data)   //  return axios.post('/api/reg',data)\n       .then(({data})=>{\n         if(data.code==200){\n           commit('USER_REG',data.token)\n             router.replace({path:'/admin'})\n         }else{\n          //  上一个catch处理了MongoError\n           alert(data.message)\n         }\n       })\n       .catch((error)=>{\n        //  处理的是上一个if的错误\n         alert(error.toString())\n       })\n   },\n```\nmutations.js\n> 对token做存储和本地缓存\n\n```javascript\nimport {USER_SIGNIN,USER_SIGNOUT,USER_REG} from './types'\nexport default  {\n  [USER_REG](state,token){\n    localStorage.setItem('jwt',token);\n    state.token = token;\n  },\n}\n```\n\n## 后台首次处理\nrouter.js\n> 接收到注册请求，试图将用户信息存进mongodb中。如果创建成功，就创建token并下发给前端\n\n```javascript\nconst express = require('express')\nconst router = express.Router()\nconst User = require('../models').User\nconst createToken = require('../middleware/createToken')\n// 注册\nrouter.post('/reg', function (req, res) {\n  let username = req.body.username\n  let password = req.body.password\n  let user = {\n    username,\n    password\n  }\n  User.create(user)\n    .then(() => {\n      res.send({\n        // 创建用户成功\n        code: 200,\n        token: createToken(username)\n      })\n    })\n    .catch(err => {\n      // 操作数据库的时候发生错误\n      if (err.message.match('E11000 duplicate key')) {\n        return res.json({\n          code: -200,\n          message: '用户名重复'\n        })\n      }\n      // 服务器发生错误（例如status:）\n      return res.json({\n        code: -200,\n        message: err.toString()\n      })\n    })\n})\n\nmodule.exports = router;\n```\n\ncreateToken.js\n```javascript\nvar jwt = require('jsonwebtoken')\nmodule.exports = function (name) {\n  var expiry = new Date();\n  expiry.setDate(expiry.getDate() + 7); //有效期设置为七天\n  const token = jwt.sign({\n    name: name,\n    exp: parseInt(expiry.getTime() / 1000) //除以1000以后表示的是秒数\n  }, process.env.JWT_SECRET)\n  return token;\n}\n```\n> 发给前台后，是一串base64编译的\n\n```javascript\nconst payload = JSON.parse(window.atob(token.split('.')[1]));\n```\n\n\ndovenv\n> 用文件管理起来，node有一个dotenv的模块，可以将这个密钥设置成环境变量。在根目录下创建一个.env的文件，并设置密码：\n\n```\nJWT_SECRET=hello\n```\n\n同时还要注意，在gitignore 中增加这个文件的忽略，不必上传到git上。然后我们安装dotenv模块：\n\n在app.js最顶端引用：\n\n```javascript\nrequire('dotenv').load();\nvar express = require('express');\n```\n\n## 验证\napi.js\n\n```javascript\naxios.defaults.headers.post['Content-Type'] = 'application/json'\n\nconst instance = axios.create();    \n\nconst front_instance = axios.create();  \n\nif(localStorage.getItem('jwt')){\n  /* localStorage.getItem('jwt')获取的是字符串\n    Bearer token(通过Authorization头部字段发送到服务端便于验证)的格式：Bearer XXXXXXXXXX\n  */\n\n  // 需要权限的axios 的Authorization 头为 bearer加上 token\n  instance.defaults.headers.common['Authorization'] = \"Bearer \"+localStorage.getItem('jwt').replace(/(^\\\")|(\\\"$)/g,'')\n  }\n  \n addClassify(params){\n    return instance.post('/api/classify/create',params);\n  },\n  \n```\n![image](/images/token01.jpg)\n\n## 后台验证\n```javascript\n// 添加分类\n\nconst checkToken = require('../middleware/checkToken')\n\n\nrouter.post('/classify/create', checkToken, (req, res) => {\n  new Classify({\n      name: req.body.className\n    }).save()\n    .then(() => {\n      res.send({\n        code: 200,\n        message: '创建成功'\n      })\n    })\n    .catch(err => {\n      res.send({\n        code: -200,\n        message: err.toString()\n      })\n    })\n})\n```\ncheckToken.js\n```javascript\n// 验证token中间件\nvar jwt = require('jsonwebtoken')\nmodule.exports = function (req, res, next) {\n  if (req.headers['authorization']) {\n    //  抽取出token\n    var token = req.headers['authorization'].split(' ')[1]\n    var decoded = jwt.decode(token, process.env.JWT_SECRET)\n    // 如果过期了就重新登录\n    // 验证token也需要优化\n    if (token && decoded.exp <= Date.now() / 1000) {\n      return res.send({\n        code: 401,\n        message: \"授权已经过期，请重新登陆\"\n      })\n    }\n  }\n  next();\n}\n```","source":"_posts/2017-10-16-token.md","raw":"---\ntitle: token\ndate: 2017-10-16 10:28:07\ntags: [token,vuex,ndoe.js,vue.js]\ncategories: 尚在研究\n---\n## 首次发起请求\nreg.vue\n> 注册页面，注册时触发actions,把用户的参数带过去\n \n\n\n```javascript\n    user: {\n            username: '',\n            password: '',\n            repassword: '',\n          }\nthis.$store.dispatch('UserReg', this.user);\n```\nactions.js\n > 带着参数调用注册接口.如果注册成功，触发mutations，并跳转到admin页面\n \n```javascript\nimport Vue from 'vue'\nimport api from '../api'\nimport router from '../router'\n\nexport default {\n// 后台注册\n  UserReg({commit},data){\n   api.localReg(data)   //  return axios.post('/api/reg',data)\n       .then(({data})=>{\n         if(data.code==200){\n           commit('USER_REG',data.token)\n             router.replace({path:'/admin'})\n         }else{\n          //  上一个catch处理了MongoError\n           alert(data.message)\n         }\n       })\n       .catch((error)=>{\n        //  处理的是上一个if的错误\n         alert(error.toString())\n       })\n   },\n```\nmutations.js\n> 对token做存储和本地缓存\n\n```javascript\nimport {USER_SIGNIN,USER_SIGNOUT,USER_REG} from './types'\nexport default  {\n  [USER_REG](state,token){\n    localStorage.setItem('jwt',token);\n    state.token = token;\n  },\n}\n```\n\n## 后台首次处理\nrouter.js\n> 接收到注册请求，试图将用户信息存进mongodb中。如果创建成功，就创建token并下发给前端\n\n```javascript\nconst express = require('express')\nconst router = express.Router()\nconst User = require('../models').User\nconst createToken = require('../middleware/createToken')\n// 注册\nrouter.post('/reg', function (req, res) {\n  let username = req.body.username\n  let password = req.body.password\n  let user = {\n    username,\n    password\n  }\n  User.create(user)\n    .then(() => {\n      res.send({\n        // 创建用户成功\n        code: 200,\n        token: createToken(username)\n      })\n    })\n    .catch(err => {\n      // 操作数据库的时候发生错误\n      if (err.message.match('E11000 duplicate key')) {\n        return res.json({\n          code: -200,\n          message: '用户名重复'\n        })\n      }\n      // 服务器发生错误（例如status:）\n      return res.json({\n        code: -200,\n        message: err.toString()\n      })\n    })\n})\n\nmodule.exports = router;\n```\n\ncreateToken.js\n```javascript\nvar jwt = require('jsonwebtoken')\nmodule.exports = function (name) {\n  var expiry = new Date();\n  expiry.setDate(expiry.getDate() + 7); //有效期设置为七天\n  const token = jwt.sign({\n    name: name,\n    exp: parseInt(expiry.getTime() / 1000) //除以1000以后表示的是秒数\n  }, process.env.JWT_SECRET)\n  return token;\n}\n```\n> 发给前台后，是一串base64编译的\n\n```javascript\nconst payload = JSON.parse(window.atob(token.split('.')[1]));\n```\n\n\ndovenv\n> 用文件管理起来，node有一个dotenv的模块，可以将这个密钥设置成环境变量。在根目录下创建一个.env的文件，并设置密码：\n\n```\nJWT_SECRET=hello\n```\n\n同时还要注意，在gitignore 中增加这个文件的忽略，不必上传到git上。然后我们安装dotenv模块：\n\n在app.js最顶端引用：\n\n```javascript\nrequire('dotenv').load();\nvar express = require('express');\n```\n\n## 验证\napi.js\n\n```javascript\naxios.defaults.headers.post['Content-Type'] = 'application/json'\n\nconst instance = axios.create();    \n\nconst front_instance = axios.create();  \n\nif(localStorage.getItem('jwt')){\n  /* localStorage.getItem('jwt')获取的是字符串\n    Bearer token(通过Authorization头部字段发送到服务端便于验证)的格式：Bearer XXXXXXXXXX\n  */\n\n  // 需要权限的axios 的Authorization 头为 bearer加上 token\n  instance.defaults.headers.common['Authorization'] = \"Bearer \"+localStorage.getItem('jwt').replace(/(^\\\")|(\\\"$)/g,'')\n  }\n  \n addClassify(params){\n    return instance.post('/api/classify/create',params);\n  },\n  \n```\n![image](/images/token01.jpg)\n\n## 后台验证\n```javascript\n// 添加分类\n\nconst checkToken = require('../middleware/checkToken')\n\n\nrouter.post('/classify/create', checkToken, (req, res) => {\n  new Classify({\n      name: req.body.className\n    }).save()\n    .then(() => {\n      res.send({\n        code: 200,\n        message: '创建成功'\n      })\n    })\n    .catch(err => {\n      res.send({\n        code: -200,\n        message: err.toString()\n      })\n    })\n})\n```\ncheckToken.js\n```javascript\n// 验证token中间件\nvar jwt = require('jsonwebtoken')\nmodule.exports = function (req, res, next) {\n  if (req.headers['authorization']) {\n    //  抽取出token\n    var token = req.headers['authorization'].split(' ')[1]\n    var decoded = jwt.decode(token, process.env.JWT_SECRET)\n    // 如果过期了就重新登录\n    // 验证token也需要优化\n    if (token && decoded.exp <= Date.now() / 1000) {\n      return res.send({\n        code: 401,\n        message: \"授权已经过期，请重新登陆\"\n      })\n    }\n  }\n  next();\n}\n```","slug":"token","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabwp000eyctibpz8libj","content":"<h2 id=\"首次发起请求\"><a href=\"#首次发起请求\" class=\"headerlink\" title=\"首次发起请求\"></a>首次发起请求</h2><p>reg.vue</p>\n<blockquote>\n<p>注册页面，注册时触发actions,把用户的参数带过去</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    user: &#123;</span><br><span class=\"line\">            username: <span class=\"string\">''</span>,</span><br><span class=\"line\">            password: <span class=\"string\">''</span>,</span><br><span class=\"line\">            repassword: <span class=\"string\">''</span>,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'UserReg'</span>, <span class=\"keyword\">this</span>.user);</span><br></pre></td></tr></table></figure>\n<p>actions.js</p>\n<blockquote>\n<p>带着参数调用注册接口.如果注册成功，触发mutations，并跳转到admin页面</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> api <span class=\"keyword\">from</span> <span class=\"string\">'../api'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'../router'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 后台注册</span></span><br><span class=\"line\">  UserReg(&#123;commit&#125;,data)&#123;</span><br><span class=\"line\">   api.localReg(data)   <span class=\"comment\">//  return axios.post('/api/reg',data)</span></span><br><span class=\"line\">       .then(<span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>)=&gt;</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(data.code==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">           commit(<span class=\"string\">'USER_REG'</span>,data.token)</span><br><span class=\"line\">             router.replace(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'/admin'</span>&#125;)</span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//  上一个catch处理了MongoError</span></span><br><span class=\"line\">           alert(data.message)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">       .catch(<span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  处理的是上一个if的错误</span></span><br><span class=\"line\">         alert(error.toString())</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p>mutations.js</p>\n<blockquote>\n<p>对token做存储和本地缓存</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;USER_SIGNIN,USER_SIGNOUT,USER_REG&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./types'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>  &#123;</span><br><span class=\"line\">  [USER_REG](state,token)&#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'jwt'</span>,token);</span><br><span class=\"line\">    state.token = token;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后台首次处理\"><a href=\"#后台首次处理\" class=\"headerlink\" title=\"后台首次处理\"></a>后台首次处理</h2><p>router.js</p>\n<blockquote>\n<p>接收到注册请求，试图将用户信息存进mongodb中。如果创建成功，就创建token并下发给前端</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../models'</span>).User</span><br><span class=\"line\"><span class=\"keyword\">const</span> createToken = <span class=\"built_in\">require</span>(<span class=\"string\">'../middleware/createToken'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注册</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/reg'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> username = req.body.username</span><br><span class=\"line\">  <span class=\"keyword\">let</span> password = req.body.password</span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    username,</span><br><span class=\"line\">    password</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  User.create(user)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.send(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建用户成功</span></span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        token: createToken(username)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 操作数据库的时候发生错误</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err.message.match(<span class=\"string\">'E11000 duplicate key'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">-200</span>,</span><br><span class=\"line\">          message: <span class=\"string\">'用户名重复'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 服务器发生错误（例如status:）</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">-200</span>,</span><br><span class=\"line\">        message: err.toString()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>createToken.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> expiry = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  expiry.setDate(expiry.getDate() + <span class=\"number\">7</span>); <span class=\"comment\">//有效期设置为七天</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> token = jwt.sign(&#123;</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    exp: <span class=\"built_in\">parseInt</span>(expiry.getTime() / <span class=\"number\">1000</span>) <span class=\"comment\">//除以1000以后表示的是秒数</span></span><br><span class=\"line\">  &#125;, process.env.JWT_SECRET)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>发给前台后，是一串base64编译的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> payload = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">window</span>.atob(token.split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]));</span><br></pre></td></tr></table></figure>\n<p>dovenv</p>\n<blockquote>\n<p>用文件管理起来，node有一个dotenv的模块，可以将这个密钥设置成环境变量。在根目录下创建一个.env的文件，并设置密码：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JWT_SECRET=hello</span><br></pre></td></tr></table></figure>\n<p>同时还要注意，在gitignore 中增加这个文件的忽略，不必上传到git上。然后我们安装dotenv模块：</p>\n<p>在app.js最顶端引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'dotenv'</span>).load();</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>api.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/json'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = axios.create();    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> front_instance = axios.create();  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(localStorage.getItem(<span class=\"string\">'jwt'</span>))&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* localStorage.getItem('jwt')获取的是字符串</span></span><br><span class=\"line\"><span class=\"comment\">    Bearer token(通过Authorization头部字段发送到服务端便于验证)的格式：Bearer XXXXXXXXXX</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 需要权限的axios 的Authorization 头为 bearer加上 token</span></span><br><span class=\"line\">  instance.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = <span class=\"string\">\"Bearer \"</span>+localStorage.getItem(<span class=\"string\">'jwt'</span>).replace(<span class=\"regexp\">/(^\\\")|(\\\"$)/g</span>,<span class=\"string\">''</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> addClassify(params)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance.post(<span class=\"string\">'/api/classify/create'</span>,params);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/token01.jpg\" alt=\"image\"></p>\n<h2 id=\"后台验证\"><a href=\"#后台验证\" class=\"headerlink\" title=\"后台验证\"></a>后台验证</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加分类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkToken = <span class=\"built_in\">require</span>(<span class=\"string\">'../middleware/checkToken'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/classify/create'</span>, checkToken, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Classify(&#123;</span><br><span class=\"line\">      name: req.body.className</span><br><span class=\"line\">    &#125;).save()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.send(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        message: <span class=\"string\">'创建成功'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.send(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">-200</span>,</span><br><span class=\"line\">        message: err.toString()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>checkToken.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证token中间件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (req.headers[<span class=\"string\">'authorization'</span>]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  抽取出token</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = req.headers[<span class=\"string\">'authorization'</span>].split(<span class=\"string\">' '</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> decoded = jwt.decode(token, process.env.JWT_SECRET)</span><br><span class=\"line\">    <span class=\"comment\">// 如果过期了就重新登录</span></span><br><span class=\"line\">    <span class=\"comment\">// 验证token也需要优化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token &amp;&amp; decoded.exp &lt;= <span class=\"built_in\">Date</span>.now() / <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.send(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">401</span>,</span><br><span class=\"line\">        message: <span class=\"string\">\"授权已经过期，请重新登陆\"</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"首次发起请求\"><a href=\"#首次发起请求\" class=\"headerlink\" title=\"首次发起请求\"></a>首次发起请求</h2><p>reg.vue</p>\n<blockquote>\n<p>注册页面，注册时触发actions,把用户的参数带过去</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    user: &#123;</span><br><span class=\"line\">            username: <span class=\"string\">''</span>,</span><br><span class=\"line\">            password: <span class=\"string\">''</span>,</span><br><span class=\"line\">            repassword: <span class=\"string\">''</span>,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'UserReg'</span>, <span class=\"keyword\">this</span>.user);</span><br></pre></td></tr></table></figure>\n<p>actions.js</p>\n<blockquote>\n<p>带着参数调用注册接口.如果注册成功，触发mutations，并跳转到admin页面</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> api <span class=\"keyword\">from</span> <span class=\"string\">'../api'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'../router'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 后台注册</span></span><br><span class=\"line\">  UserReg(&#123;commit&#125;,data)&#123;</span><br><span class=\"line\">   api.localReg(data)   <span class=\"comment\">//  return axios.post('/api/reg',data)</span></span><br><span class=\"line\">       .then(<span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>)=&gt;</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(data.code==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">           commit(<span class=\"string\">'USER_REG'</span>,data.token)</span><br><span class=\"line\">             router.replace(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'/admin'</span>&#125;)</span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//  上一个catch处理了MongoError</span></span><br><span class=\"line\">           alert(data.message)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">       .catch(<span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  处理的是上一个if的错误</span></span><br><span class=\"line\">         alert(error.toString())</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p>mutations.js</p>\n<blockquote>\n<p>对token做存储和本地缓存</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;USER_SIGNIN,USER_SIGNOUT,USER_REG&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./types'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>  &#123;</span><br><span class=\"line\">  [USER_REG](state,token)&#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'jwt'</span>,token);</span><br><span class=\"line\">    state.token = token;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后台首次处理\"><a href=\"#后台首次处理\" class=\"headerlink\" title=\"后台首次处理\"></a>后台首次处理</h2><p>router.js</p>\n<blockquote>\n<p>接收到注册请求，试图将用户信息存进mongodb中。如果创建成功，就创建token并下发给前端</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../models'</span>).User</span><br><span class=\"line\"><span class=\"keyword\">const</span> createToken = <span class=\"built_in\">require</span>(<span class=\"string\">'../middleware/createToken'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注册</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/reg'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> username = req.body.username</span><br><span class=\"line\">  <span class=\"keyword\">let</span> password = req.body.password</span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    username,</span><br><span class=\"line\">    password</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  User.create(user)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.send(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建用户成功</span></span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        token: createToken(username)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 操作数据库的时候发生错误</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err.message.match(<span class=\"string\">'E11000 duplicate key'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">-200</span>,</span><br><span class=\"line\">          message: <span class=\"string\">'用户名重复'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 服务器发生错误（例如status:）</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">-200</span>,</span><br><span class=\"line\">        message: err.toString()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>createToken.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> expiry = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  expiry.setDate(expiry.getDate() + <span class=\"number\">7</span>); <span class=\"comment\">//有效期设置为七天</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> token = jwt.sign(&#123;</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    exp: <span class=\"built_in\">parseInt</span>(expiry.getTime() / <span class=\"number\">1000</span>) <span class=\"comment\">//除以1000以后表示的是秒数</span></span><br><span class=\"line\">  &#125;, process.env.JWT_SECRET)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>发给前台后，是一串base64编译的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> payload = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">window</span>.atob(token.split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]));</span><br></pre></td></tr></table></figure>\n<p>dovenv</p>\n<blockquote>\n<p>用文件管理起来，node有一个dotenv的模块，可以将这个密钥设置成环境变量。在根目录下创建一个.env的文件，并设置密码：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JWT_SECRET=hello</span><br></pre></td></tr></table></figure>\n<p>同时还要注意，在gitignore 中增加这个文件的忽略，不必上传到git上。然后我们安装dotenv模块：</p>\n<p>在app.js最顶端引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'dotenv'</span>).load();</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>api.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/json'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = axios.create();    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> front_instance = axios.create();  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(localStorage.getItem(<span class=\"string\">'jwt'</span>))&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* localStorage.getItem('jwt')获取的是字符串</span></span><br><span class=\"line\"><span class=\"comment\">    Bearer token(通过Authorization头部字段发送到服务端便于验证)的格式：Bearer XXXXXXXXXX</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 需要权限的axios 的Authorization 头为 bearer加上 token</span></span><br><span class=\"line\">  instance.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = <span class=\"string\">\"Bearer \"</span>+localStorage.getItem(<span class=\"string\">'jwt'</span>).replace(<span class=\"regexp\">/(^\\\")|(\\\"$)/g</span>,<span class=\"string\">''</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> addClassify(params)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance.post(<span class=\"string\">'/api/classify/create'</span>,params);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/token01.jpg\" alt=\"image\"></p>\n<h2 id=\"后台验证\"><a href=\"#后台验证\" class=\"headerlink\" title=\"后台验证\"></a>后台验证</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加分类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkToken = <span class=\"built_in\">require</span>(<span class=\"string\">'../middleware/checkToken'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/classify/create'</span>, checkToken, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Classify(&#123;</span><br><span class=\"line\">      name: req.body.className</span><br><span class=\"line\">    &#125;).save()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.send(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        message: <span class=\"string\">'创建成功'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.send(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">-200</span>,</span><br><span class=\"line\">        message: err.toString()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>checkToken.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证token中间件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (req.headers[<span class=\"string\">'authorization'</span>]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  抽取出token</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = req.headers[<span class=\"string\">'authorization'</span>].split(<span class=\"string\">' '</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> decoded = jwt.decode(token, process.env.JWT_SECRET)</span><br><span class=\"line\">    <span class=\"comment\">// 如果过期了就重新登录</span></span><br><span class=\"line\">    <span class=\"comment\">// 验证token也需要优化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token &amp;&amp; decoded.exp &lt;= <span class=\"built_in\">Date</span>.now() / <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.send(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">401</span>,</span><br><span class=\"line\">        message: <span class=\"string\">\"授权已经过期，请重新登陆\"</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"what-token","date":"2017-10-16T06:01:51.000Z","_content":"\n## 基于 Token 的身份验证方法\n使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：\n1.  客户端使用用户名跟密码请求登录\n1. 服务端收到请求，去验证用户名与密码\n1. 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端\n1. 客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里\n1. 客户端每次向服务端请求资源的时候需要带着服务端签发的 Token\n1. 服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据\n\n## JWT\n实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作：jot ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分：\n- header\n- payload\n- signature\n这三个部分使用Base64编码以后连接，中间用点分隔开，所以真正的 Token 看起来像这样：\n\n```token\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidXV1dXV1dXV1dXV1IiwiZXhwIjoxNTA4NzMxNjA0LCJpYXQiOjE1MDgxMjY4MDR9.d1gjsaqQIQZeii7poPmCoHXtUfdBo3WUCD1jxYn-AhY\n```\n\n### header\nheader 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法，比如下面类型就是 JWT，使用的算法是 HS256。\n```\n{alg: \"HS256\", typ: \"JWT\"}\n```\n上面的内容要用 Base64 的形式编码一下，所以就变成这样：\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n### Payload\nPayload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：\n- iss：Issuer，发行者\n- sub：Subject，主题\n- aud：Audience，观众\n- exp：Expiration time，过期时间\n- nbf：Not before\n- iat：Issued at，发行时间\n- jti：JWT ID\n\n比如下面这个 Payload ，用到了 iat 发行时间，还有 exp 过期时间。另外还有两个自定义的字段，一个是 name ，还有一个是 age 。\n\n```\n{name: \"uuuu\", age: 12, exp: 1508739578, iat: 1508134778}\n```\n使用 Base64 编码以后就变成了这个样子：\n\n```\neyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ\n```\n因为后台下发给我们的是通过Base64编码的，那么我们如何获取？\n```javascript\n   const payload = JSON.parse(window.atob(token.split('.')[1]));\n   //{name: \"uuuu\", age: 12, exp: 1508739578, iat: 1508134778}\n```\n\n### Signature\nJWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。\n- header\n- payload\n- secret\n\n```javascript\nvar encodedString = base64UrlEncode(header) + \".\" + base64UrlEncode(payload); \nHMACSHA256(encodedString, 'secret');\n```\n\n处理完成以后看起来像这样：\n\n```\nSwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n```\n最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n```\n客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。\n","source":"_posts/2017-10-16-what-token.md","raw":"---\ntitle: what-token\ndate: 2017-10-16 14:01:51\ntags: [token]\ncategories: 尚在研究\n---\n\n## 基于 Token 的身份验证方法\n使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：\n1.  客户端使用用户名跟密码请求登录\n1. 服务端收到请求，去验证用户名与密码\n1. 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端\n1. 客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里\n1. 客户端每次向服务端请求资源的时候需要带着服务端签发的 Token\n1. 服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据\n\n## JWT\n实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作：jot ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分：\n- header\n- payload\n- signature\n这三个部分使用Base64编码以后连接，中间用点分隔开，所以真正的 Token 看起来像这样：\n\n```token\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidXV1dXV1dXV1dXV1IiwiZXhwIjoxNTA4NzMxNjA0LCJpYXQiOjE1MDgxMjY4MDR9.d1gjsaqQIQZeii7poPmCoHXtUfdBo3WUCD1jxYn-AhY\n```\n\n### header\nheader 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法，比如下面类型就是 JWT，使用的算法是 HS256。\n```\n{alg: \"HS256\", typ: \"JWT\"}\n```\n上面的内容要用 Base64 的形式编码一下，所以就变成这样：\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n### Payload\nPayload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：\n- iss：Issuer，发行者\n- sub：Subject，主题\n- aud：Audience，观众\n- exp：Expiration time，过期时间\n- nbf：Not before\n- iat：Issued at，发行时间\n- jti：JWT ID\n\n比如下面这个 Payload ，用到了 iat 发行时间，还有 exp 过期时间。另外还有两个自定义的字段，一个是 name ，还有一个是 age 。\n\n```\n{name: \"uuuu\", age: 12, exp: 1508739578, iat: 1508134778}\n```\n使用 Base64 编码以后就变成了这个样子：\n\n```\neyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ\n```\n因为后台下发给我们的是通过Base64编码的，那么我们如何获取？\n```javascript\n   const payload = JSON.parse(window.atob(token.split('.')[1]));\n   //{name: \"uuuu\", age: 12, exp: 1508739578, iat: 1508134778}\n```\n\n### Signature\nJWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。\n- header\n- payload\n- secret\n\n```javascript\nvar encodedString = base64UrlEncode(header) + \".\" + base64UrlEncode(payload); \nHMACSHA256(encodedString, 'secret');\n```\n\n处理完成以后看起来像这样：\n\n```\nSwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n```\n最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n```\n客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。\n","slug":"what-token","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabwp000fyctix9nexkr3","content":"<h2 id=\"基于-Token-的身份验证方法\"><a href=\"#基于-Token-的身份验证方法\" class=\"headerlink\" title=\"基于 Token 的身份验证方法\"></a>基于 Token 的身份验证方法</h2><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p>\n<ol>\n<li>客户端使用用户名跟密码请求登录</li>\n<li>服务端收到请求，去验证用户名与密码</li>\n<li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li>\n<li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li>\n<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li>\n<li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li>\n</ol>\n<h2 id=\"JWT\"><a href=\"#JWT\" class=\"headerlink\" title=\"JWT\"></a>JWT</h2><p>实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作：jot ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分：</p>\n<ul>\n<li>header</li>\n<li>payload</li>\n<li>signature<br>这三个部分使用Base64编码以后连接，中间用点分隔开，所以真正的 Token 看起来像这样：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidXV1dXV1dXV1dXV1IiwiZXhwIjoxNTA4NzMxNjA0LCJpYXQiOjE1MDgxMjY4MDR9.d1gjsaqQIQZeii7poPmCoHXtUfdBo3WUCD1jxYn-AhY</span><br></pre></td></tr></table></figure>\n<h3 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h3><p>header 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法，比如下面类型就是 JWT，使用的算法是 HS256。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;alg: &quot;HS256&quot;, typ: &quot;JWT&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的内容要用 Base64 的形式编码一下，所以就变成这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure>\n<h3 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h3><p>Payload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：</p>\n<ul>\n<li>iss：Issuer，发行者</li>\n<li>sub：Subject，主题</li>\n<li>aud：Audience，观众</li>\n<li>exp：Expiration time，过期时间</li>\n<li>nbf：Not before</li>\n<li>iat：Issued at，发行时间</li>\n<li>jti：JWT ID</li>\n</ul>\n<p>比如下面这个 Payload ，用到了 iat 发行时间，还有 exp 过期时间。另外还有两个自定义的字段，一个是 name ，还有一个是 age 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;name: &quot;uuuu&quot;, age: 12, exp: 1508739578, iat: 1508134778&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 Base64 编码以后就变成了这个样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ</span><br></pre></td></tr></table></figure>\n<p>因为后台下发给我们的是通过Base64编码的，那么我们如何获取？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> payload = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">window</span>.atob(token.split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]));</span><br><span class=\"line\"><span class=\"comment\">//&#123;name: \"uuuu\", age: 12, exp: 1508739578, iat: 1508134778&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Signature\"><a href=\"#Signature\" class=\"headerlink\" title=\"Signature\"></a>Signature</h3><p>JWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。</p>\n<ul>\n<li>header</li>\n<li>payload</li>\n<li>secret</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> encodedString = base64UrlEncode(header) + <span class=\"string\">\".\"</span> + base64UrlEncode(payload); </span><br><span class=\"line\">HMACSHA256(encodedString, <span class=\"string\">'secret'</span>);</span><br></pre></td></tr></table></figure>\n<p>处理完成以后看起来像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</span><br></pre></td></tr></table></figure>\n<p>最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</span><br></pre></td></tr></table></figure>\n<p>客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基于-Token-的身份验证方法\"><a href=\"#基于-Token-的身份验证方法\" class=\"headerlink\" title=\"基于 Token 的身份验证方法\"></a>基于 Token 的身份验证方法</h2><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p>\n<ol>\n<li>客户端使用用户名跟密码请求登录</li>\n<li>服务端收到请求，去验证用户名与密码</li>\n<li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li>\n<li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li>\n<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li>\n<li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li>\n</ol>\n<h2 id=\"JWT\"><a href=\"#JWT\" class=\"headerlink\" title=\"JWT\"></a>JWT</h2><p>实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作：jot ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分：</p>\n<ul>\n<li>header</li>\n<li>payload</li>\n<li>signature<br>这三个部分使用Base64编码以后连接，中间用点分隔开，所以真正的 Token 看起来像这样：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidXV1dXV1dXV1dXV1IiwiZXhwIjoxNTA4NzMxNjA0LCJpYXQiOjE1MDgxMjY4MDR9.d1gjsaqQIQZeii7poPmCoHXtUfdBo3WUCD1jxYn-AhY</span><br></pre></td></tr></table></figure>\n<h3 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h3><p>header 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法，比如下面类型就是 JWT，使用的算法是 HS256。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;alg: &quot;HS256&quot;, typ: &quot;JWT&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的内容要用 Base64 的形式编码一下，所以就变成这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure>\n<h3 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h3><p>Payload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：</p>\n<ul>\n<li>iss：Issuer，发行者</li>\n<li>sub：Subject，主题</li>\n<li>aud：Audience，观众</li>\n<li>exp：Expiration time，过期时间</li>\n<li>nbf：Not before</li>\n<li>iat：Issued at，发行时间</li>\n<li>jti：JWT ID</li>\n</ul>\n<p>比如下面这个 Payload ，用到了 iat 发行时间，还有 exp 过期时间。另外还有两个自定义的字段，一个是 name ，还有一个是 age 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;name: &quot;uuuu&quot;, age: 12, exp: 1508739578, iat: 1508134778&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 Base64 编码以后就变成了这个样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ</span><br></pre></td></tr></table></figure>\n<p>因为后台下发给我们的是通过Base64编码的，那么我们如何获取？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> payload = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">window</span>.atob(token.split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]));</span><br><span class=\"line\"><span class=\"comment\">//&#123;name: \"uuuu\", age: 12, exp: 1508739578, iat: 1508134778&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Signature\"><a href=\"#Signature\" class=\"headerlink\" title=\"Signature\"></a>Signature</h3><p>JWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。</p>\n<ul>\n<li>header</li>\n<li>payload</li>\n<li>secret</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> encodedString = base64UrlEncode(header) + <span class=\"string\">\".\"</span> + base64UrlEncode(payload); </span><br><span class=\"line\">HMACSHA256(encodedString, <span class=\"string\">'secret'</span>);</span><br></pre></td></tr></table></figure>\n<p>处理完成以后看起来像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</span><br></pre></td></tr></table></figure>\n<p>最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</span><br></pre></td></tr></table></figure>\n<p>客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。</p>\n"},{"title":"gulp-demo","date":"2017-10-19T00:13:52.000Z","_content":"\n## 安装步骤\n1. 首先确认设备是否拥有Node环境\n2. 通过`npm install -g gulp`安装全局\n3. 初始化package.json\n4. 在项目文件中安装gulp\n\n## 基本用法\n\n```javascript\n// 处理任务\nlet gulp =require('gulp')\n\n/* gulp.task 定义任务\n   gulp.src  找到需要执行任务的文件\n   gulp.dest 执行任务的文件的去处\n   gulp.watch 观察文件是否发生变化\n*/\n\ngulp.task('message',function(){\n    return console.log('Gulp is running........')\n})\n// 命令行输入gulp message即执行\ngulp.task('default',function(){\n    return console.log('这是默认任务.')\n})\n// 命令行输入gulp即执行\n```\n## 拷贝文件\n\n```javascript\ngulp.task('mycopy',function(){\n    gulp.src('src/*.html')\n    .pipe(gulp.dest('dist'))\n})\n```\n执行`gulp mycopy`将自动创建dist文件夹，并将src下的所有html拷贝到文件夹内\n\n## 压缩图片\n\n\n```javascript\n//安装并引入插件\nlet imagemin=require('gulp-imagemin')\n\ngulp.task('myimage',function(){\n    gulp.src('images/*')\n    .pipe(imagemin())\n    .pipe(gulp.dest('dist/images'))\n})\n```\n## 压缩js文件\n\n```javascript\nlet uglify=require('gulp-uglify')\ngulp.task('minify',function(){\n    gulp.src('src/js/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'))\n})\n```\n## sass转换为cess\n\n```javascript\nlet sass=require('gulp-sass')\n\ngulp.task('mycss',function(){\n    gulp.src('src/sass/*.scss')\n    .pipe(sass().on('error',sass.logError))\n    .pipe(gulp.dest('dist/css'))\n})\n```\n## 执行多个任务\n\n\n```javascript\ngulp.task('default',['message','mycss','minify','myimage','mycopy'])\n```\n\n## 合并代码\n\n\n```javascript\ngulp.task('scripts',function(){\n  gulp.src('src/js/*.js')\n  .pipe(concat('main.js'))\n  .pipe(uglify())\n  .pipe(gulp.dest('dist/js'))\n})\n\ngulp.task('default',['message','mycss','myimage','mycopy','scripts'])\n```\n## 监听任务\n\n```javascript\ngulp.task('watch',function(){\n    gulp.watch('src/js/*.js',['scripts']);\n    gulp.watch('src/sass/*.scss',['mycss']);\n})\n//执行 gulp watch\n```\n\n","source":"_posts/2017-10-19-gulp-demo.md","raw":"---\ntitle: gulp-demo\ndate: 2017-10-19 08:13:52\ntags: [gulp]\ncategories: 笔记本\n---\n\n## 安装步骤\n1. 首先确认设备是否拥有Node环境\n2. 通过`npm install -g gulp`安装全局\n3. 初始化package.json\n4. 在项目文件中安装gulp\n\n## 基本用法\n\n```javascript\n// 处理任务\nlet gulp =require('gulp')\n\n/* gulp.task 定义任务\n   gulp.src  找到需要执行任务的文件\n   gulp.dest 执行任务的文件的去处\n   gulp.watch 观察文件是否发生变化\n*/\n\ngulp.task('message',function(){\n    return console.log('Gulp is running........')\n})\n// 命令行输入gulp message即执行\ngulp.task('default',function(){\n    return console.log('这是默认任务.')\n})\n// 命令行输入gulp即执行\n```\n## 拷贝文件\n\n```javascript\ngulp.task('mycopy',function(){\n    gulp.src('src/*.html')\n    .pipe(gulp.dest('dist'))\n})\n```\n执行`gulp mycopy`将自动创建dist文件夹，并将src下的所有html拷贝到文件夹内\n\n## 压缩图片\n\n\n```javascript\n//安装并引入插件\nlet imagemin=require('gulp-imagemin')\n\ngulp.task('myimage',function(){\n    gulp.src('images/*')\n    .pipe(imagemin())\n    .pipe(gulp.dest('dist/images'))\n})\n```\n## 压缩js文件\n\n```javascript\nlet uglify=require('gulp-uglify')\ngulp.task('minify',function(){\n    gulp.src('src/js/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'))\n})\n```\n## sass转换为cess\n\n```javascript\nlet sass=require('gulp-sass')\n\ngulp.task('mycss',function(){\n    gulp.src('src/sass/*.scss')\n    .pipe(sass().on('error',sass.logError))\n    .pipe(gulp.dest('dist/css'))\n})\n```\n## 执行多个任务\n\n\n```javascript\ngulp.task('default',['message','mycss','minify','myimage','mycopy'])\n```\n\n## 合并代码\n\n\n```javascript\ngulp.task('scripts',function(){\n  gulp.src('src/js/*.js')\n  .pipe(concat('main.js'))\n  .pipe(uglify())\n  .pipe(gulp.dest('dist/js'))\n})\n\ngulp.task('default',['message','mycss','myimage','mycopy','scripts'])\n```\n## 监听任务\n\n```javascript\ngulp.task('watch',function(){\n    gulp.watch('src/js/*.js',['scripts']);\n    gulp.watch('src/sass/*.scss',['mycss']);\n})\n//执行 gulp watch\n```\n\n","slug":"gulp-demo","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabx5000jyctin14dga49","content":"<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ol>\n<li>首先确认设备是否拥有Node环境</li>\n<li>通过<code>npm install -g gulp</code>安装全局</li>\n<li>初始化package.json</li>\n<li>在项目文件中安装gulp</li>\n</ol>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理任务</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gulp =<span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* gulp.task 定义任务</span></span><br><span class=\"line\"><span class=\"comment\">   gulp.src  找到需要执行任务的文件</span></span><br><span class=\"line\"><span class=\"comment\">   gulp.dest 执行任务的文件的去处</span></span><br><span class=\"line\"><span class=\"comment\">   gulp.watch 观察文件是否发生变化</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Gulp is running........'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 命令行输入gulp message即执行</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是默认任务.'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 命令行输入gulp即执行</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"拷贝文件\"><a href=\"#拷贝文件\" class=\"headerlink\" title=\"拷贝文件\"></a>拷贝文件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'mycopy'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/*.html'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行<code>gulp mycopy</code>将自动创建dist文件夹，并将src下的所有html拷贝到文件夹内</p>\n<h2 id=\"压缩图片\"><a href=\"#压缩图片\" class=\"headerlink\" title=\"压缩图片\"></a>压缩图片</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//安装并引入插件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imagemin=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'myimage'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'images/*'</span>)</span><br><span class=\"line\">    .pipe(imagemin())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/images'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"压缩js文件\"><a href=\"#压缩js文件\" class=\"headerlink\" title=\"压缩js文件\"></a>压缩js文件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> uglify=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"sass转换为cess\"><a href=\"#sass转换为cess\" class=\"headerlink\" title=\"sass转换为cess\"></a>sass转换为cess</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sass=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'mycss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/sass/*.scss'</span>)</span><br><span class=\"line\">    .pipe(sass().on(<span class=\"string\">'error'</span>,sass.logError))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行多个任务\"><a href=\"#执行多个任务\" class=\"headerlink\" title=\"执行多个任务\"></a>执行多个任务</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'message'</span>,<span class=\"string\">'mycss'</span>,<span class=\"string\">'minify'</span>,<span class=\"string\">'myimage'</span>,<span class=\"string\">'mycopy'</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并代码\"><a href=\"#合并代码\" class=\"headerlink\" title=\"合并代码\"></a>合并代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'scripts'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">  .pipe(concat(<span class=\"string\">'main.js'</span>))</span><br><span class=\"line\">  .pipe(uglify())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'message'</span>,<span class=\"string\">'mycss'</span>,<span class=\"string\">'myimage'</span>,<span class=\"string\">'mycopy'</span>,<span class=\"string\">'scripts'</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"监听任务\"><a href=\"#监听任务\" class=\"headerlink\" title=\"监听任务\"></a>监听任务</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/js/*.js'</span>,[<span class=\"string\">'scripts'</span>]);</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/sass/*.scss'</span>,[<span class=\"string\">'mycss'</span>]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//执行 gulp watch</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ol>\n<li>首先确认设备是否拥有Node环境</li>\n<li>通过<code>npm install -g gulp</code>安装全局</li>\n<li>初始化package.json</li>\n<li>在项目文件中安装gulp</li>\n</ol>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理任务</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gulp =<span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* gulp.task 定义任务</span></span><br><span class=\"line\"><span class=\"comment\">   gulp.src  找到需要执行任务的文件</span></span><br><span class=\"line\"><span class=\"comment\">   gulp.dest 执行任务的文件的去处</span></span><br><span class=\"line\"><span class=\"comment\">   gulp.watch 观察文件是否发生变化</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Gulp is running........'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 命令行输入gulp message即执行</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是默认任务.'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 命令行输入gulp即执行</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"拷贝文件\"><a href=\"#拷贝文件\" class=\"headerlink\" title=\"拷贝文件\"></a>拷贝文件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'mycopy'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/*.html'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行<code>gulp mycopy</code>将自动创建dist文件夹，并将src下的所有html拷贝到文件夹内</p>\n<h2 id=\"压缩图片\"><a href=\"#压缩图片\" class=\"headerlink\" title=\"压缩图片\"></a>压缩图片</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//安装并引入插件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imagemin=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'myimage'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'images/*'</span>)</span><br><span class=\"line\">    .pipe(imagemin())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/images'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"压缩js文件\"><a href=\"#压缩js文件\" class=\"headerlink\" title=\"压缩js文件\"></a>压缩js文件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> uglify=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"sass转换为cess\"><a href=\"#sass转换为cess\" class=\"headerlink\" title=\"sass转换为cess\"></a>sass转换为cess</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sass=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'mycss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/sass/*.scss'</span>)</span><br><span class=\"line\">    .pipe(sass().on(<span class=\"string\">'error'</span>,sass.logError))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行多个任务\"><a href=\"#执行多个任务\" class=\"headerlink\" title=\"执行多个任务\"></a>执行多个任务</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'message'</span>,<span class=\"string\">'mycss'</span>,<span class=\"string\">'minify'</span>,<span class=\"string\">'myimage'</span>,<span class=\"string\">'mycopy'</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并代码\"><a href=\"#合并代码\" class=\"headerlink\" title=\"合并代码\"></a>合并代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'scripts'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">  .pipe(concat(<span class=\"string\">'main.js'</span>))</span><br><span class=\"line\">  .pipe(uglify())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'message'</span>,<span class=\"string\">'mycss'</span>,<span class=\"string\">'myimage'</span>,<span class=\"string\">'mycopy'</span>,<span class=\"string\">'scripts'</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"监听任务\"><a href=\"#监听任务\" class=\"headerlink\" title=\"监听任务\"></a>监听任务</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/js/*.js'</span>,[<span class=\"string\">'scripts'</span>]);</span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/sass/*.scss'</span>,[<span class=\"string\">'mycss'</span>]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//执行 gulp watch</span></span><br></pre></td></tr></table></figure>\n"},{"title":"hexo-change","date":"2017-10-19T00:26:34.000Z","_content":"## 将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：\n```\n _config.yml\n package.json\n scaffolds/\n source/\n themes/\n```\n将这些目录放到一个目录下，如：hexo／\n## 安装hexo\n```\nnpm install -g hexo\n```\n## 安装好之后，进入hexo/目录\n## 模块安装\n```\n npm install\n npm install hexo-deployer-git --save\n npm install hexo-generator-feed --save\n npm install hexo-generator-sitemap --save\n```\n## 部署\n```\nhexo g\nhexo deploy\n```","source":"_posts/2017-10-19-hexo-change.md","raw":"---\ntitle: hexo-change\ndate: 2017-10-19 08:26:34\ntags: [hexo]\ncategories: 备忘录\n---\n## 将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：\n```\n _config.yml\n package.json\n scaffolds/\n source/\n themes/\n```\n将这些目录放到一个目录下，如：hexo／\n## 安装hexo\n```\nnpm install -g hexo\n```\n## 安装好之后，进入hexo/目录\n## 模块安装\n```\n npm install\n npm install hexo-deployer-git --save\n npm install hexo-generator-feed --save\n npm install hexo-generator-sitemap --save\n```\n## 部署\n```\nhexo g\nhexo deploy\n```","slug":"hexo-change","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabx5000lycti95vjxjzj","content":"<h2 id=\"将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：\"><a href=\"#将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：\" class=\"headerlink\" title=\"将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：\"></a>将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">package.json</span><br><span class=\"line\">scaffolds/</span><br><span class=\"line\">source/</span><br><span class=\"line\">themes/</span><br></pre></td></tr></table></figure>\n<p>将这些目录放到一个目录下，如：hexo／</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装好之后，进入hexo-目录\"><a href=\"#安装好之后，进入hexo-目录\" class=\"headerlink\" title=\"安装好之后，进入hexo/目录\"></a>安装好之后，进入hexo/目录</h2><h2 id=\"模块安装\"><a href=\"#模块安装\" class=\"headerlink\" title=\"模块安装\"></a>模块安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：\"><a href=\"#将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：\" class=\"headerlink\" title=\"将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：\"></a>将原先配置好并生成的hexo目录拷贝到新的电脑，只需拷贝以下目录：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">package.json</span><br><span class=\"line\">scaffolds/</span><br><span class=\"line\">source/</span><br><span class=\"line\">themes/</span><br></pre></td></tr></table></figure>\n<p>将这些目录放到一个目录下，如：hexo／</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装好之后，进入hexo-目录\"><a href=\"#安装好之后，进入hexo-目录\" class=\"headerlink\" title=\"安装好之后，进入hexo/目录\"></a>安装好之后，进入hexo/目录</h2><h2 id=\"模块安装\"><a href=\"#模块安装\" class=\"headerlink\" title=\"模块安装\"></a>模块安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>"},{"title":"webpackdemo","date":"2017-10-19T00:37:26.000Z","_content":"## 基本用法\na.html\n\n```\n...\n    <script src=\"index.js\"></script>\n..\n```\npeople.js\n\n```\nmodule.exports='Hello EveryBody'\n```\n\napp.js\n\n```\nalert(require('./people')) //路径必须./即使是当前目录\n```\n执行命令`webpack app.js index.js`即生成index.js,\n打开index.html弹出`'Hello EveryBody'`\n\n执行命令的时候 --watch 即可监听，app.js有变化自动打包\n\n## 运用第三方库\n`cnpm install style-loader css-loader --save`\nindex.html\n```\n<script src='dist/index.js'></script>\n```\nstyle.css\n```\nbody{\n    background:red\n}\n```\napp.js\n\n`require(\"!style-loader!css-loader!./style.css\")`\n\n## 配置文件\nwebpack.config.js\n\n```javascript\nmodule.exports={\n    // 入口文件\n    entry:'./app.js',\n    // 出口文件\n    output:{\n        path:__dirname+'/dist',\n        filename:'index.js'\n    },\n    // 需要依赖的插件或者是装载器\n    module:{\n        loaders:[\n            {test: /\\.css$/,loader:\"style-loader!css-loader\"}\n        ]\n    }\n}\n\n```\napp.js\n\n```\nrequire('./style.css')\n```\n`webpack`即可\nwebpack    开发环境下编译（打包）\nwebpack -p 生产环境下编译（压缩）\nwebpack -w 监听文件改动（自动编译）\nwebpack -d 开启(生成)source map\nwebpack -wdp \n## 自定义配置文件\nwebpack --config config.js\n## package.json\n\n```\n  \"scripts\": {\n    \"build\":\"webpack\"\n  },\n```\n即可用 `npm run build`来代替执行`webpack`\n\n## 搭建服务器运行\n`cnpm install webpack-dev-server -g --save-dev`\n\npackage.json\n\n加入start字段\n```\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --entry ./app.js --output-filename ./dist/index.js\",\n    \"build\":\"webpack\"\n  },\n```\nnpm start 自动开启8080端口，自动监听无需刷新。这样就不需要执行webpack命令，或者说不需要在webpack.config.js中配置入口和出口，但是指定的加载器模块仍然要写上。\n## es6\ncnpm install babel-core babel-loader babel-preset-es2015 --save-dev\n\n```javascript\nmodule.exports = {\n\n    // 需要依赖的插件或者是装载器\n    module: {\n        loaders: [{\n                test: /\\.css$/,\n                loader: \"style-loader!css-loader\"\n            },\n            {\n                test: /\\.js$/,\n                loader: \"babel-loader\",\n                exclude: /node_modules/,\n                query: {\n                    presets: [\"es2015\"]\n                }\n            }\n\n        ]\n    }\n}\n```\n\n```javascript\n//另一种方式，去掉query,建立.babelrc\n{\n    \"presets\":['es2015']\n}\n```\n\n## Demo2\n```javascript\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst CleanWebpackPlugin = require('clean-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst webpack=require('webpack')\nmodule.exports = {\n    entry: {\n        vendor:['jquery','./src/js/common.js'],\n        // 多页面有几个页面就有几个入口,单页面只有一个入口\n        index: './src/js/index.js',\n        cart: './src/js/cart.js'\n    },\n    output: {\n        path: path.join(__dirname, './dist'), //出口必须是绝对路径\n        filename: 'js/[name].js',\n        publicPath: ''\n    },\n    module: {\n        rules: [{\n            test: /\\.css$/,\n            include: path.join(__dirname, 'src'),\n            exclude: /node_modules/,\n            // 这种方法是抽取成单独的css文件\n            // use: ExtractTextPlugin.extract({\n            //     fallback: 'style-loader',\n            //     use: 'css-loader'\n            // })\n            // 这种方法是行内\n            loader:'style-loader!css-loader'\n        },{\n            test: /\\.js$/,\n            include: path.join(__dirname, 'src'),\n            exclude: /node_modules/,\n            loader:'babel-loader'\n        }]\n    },\n    plugins: [\n        // 打包后清除之前的文件\n        new CleanWebpackPlugin(['./dist'], {\n            root: path.join(__dirname, ''),\n            verbose: true,\n            dry: false\n        }),\n        // 单页面配置几个，多页面有几个页面new几个\n        new HtmlWebpackPlugin({\n            filename: 'cart.html',\n            template: './src/cart.html',\n            chunks: ['cart','vendor']\n        }),\n        new HtmlWebpackPlugin({\n            filename: 'index.html',\n            template: './src/index.html',\n            chunks: ['index','vendor'], //指定引用的块，指定以后只引入index相关的css,js，不写这个打包后的htmml引入所有的index,css等。\n            minify:{\n                removeComments:true,\n                collapseWhitespace:true\n            }\n        }),\n        new webpack.ProvidePlugin({\n          $:'jquery',\n          jQuery:'jquery',\n          'window.jQuery':'jquery'\n        }),\n         new ExtractTextPlugin('[name].css'),\n         new webpack.optimize.CommonsChunkPlugin({\n            name:'vendor',\n            chunks:['index','cart','vendor'],\n            minChunks:3\n         }),\n        //  压缩js\n         new webpack.optimize.UglifyJsPlugin({\n             compress:{\n                 warnings:true\n             }\n         })\n\n    ],\n    // devtool: '#source-map'\n}\n```\n\n### es6\n- `npm install --save babel-core babel-loader babel-preset-env`\n- 在配置文件同级目录下建一个.babelrc,写入 `{  \"presets\": [\"env\" ]}`\n- \n```javascript\n        {\n            test: /\\.js$/,\n            include: path.join(__dirname, 'src'),\n            exclude: /node_modules/,\n            loader:'babel-loader'\n        }\n```","source":"_posts/2017-10-19-webpackdemo.md","raw":"---\ntitle: webpackdemo\ndate: 2017-10-19 08:37:26\ntags: [webpack]\n---\n## 基本用法\na.html\n\n```\n...\n    <script src=\"index.js\"></script>\n..\n```\npeople.js\n\n```\nmodule.exports='Hello EveryBody'\n```\n\napp.js\n\n```\nalert(require('./people')) //路径必须./即使是当前目录\n```\n执行命令`webpack app.js index.js`即生成index.js,\n打开index.html弹出`'Hello EveryBody'`\n\n执行命令的时候 --watch 即可监听，app.js有变化自动打包\n\n## 运用第三方库\n`cnpm install style-loader css-loader --save`\nindex.html\n```\n<script src='dist/index.js'></script>\n```\nstyle.css\n```\nbody{\n    background:red\n}\n```\napp.js\n\n`require(\"!style-loader!css-loader!./style.css\")`\n\n## 配置文件\nwebpack.config.js\n\n```javascript\nmodule.exports={\n    // 入口文件\n    entry:'./app.js',\n    // 出口文件\n    output:{\n        path:__dirname+'/dist',\n        filename:'index.js'\n    },\n    // 需要依赖的插件或者是装载器\n    module:{\n        loaders:[\n            {test: /\\.css$/,loader:\"style-loader!css-loader\"}\n        ]\n    }\n}\n\n```\napp.js\n\n```\nrequire('./style.css')\n```\n`webpack`即可\nwebpack    开发环境下编译（打包）\nwebpack -p 生产环境下编译（压缩）\nwebpack -w 监听文件改动（自动编译）\nwebpack -d 开启(生成)source map\nwebpack -wdp \n## 自定义配置文件\nwebpack --config config.js\n## package.json\n\n```\n  \"scripts\": {\n    \"build\":\"webpack\"\n  },\n```\n即可用 `npm run build`来代替执行`webpack`\n\n## 搭建服务器运行\n`cnpm install webpack-dev-server -g --save-dev`\n\npackage.json\n\n加入start字段\n```\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --entry ./app.js --output-filename ./dist/index.js\",\n    \"build\":\"webpack\"\n  },\n```\nnpm start 自动开启8080端口，自动监听无需刷新。这样就不需要执行webpack命令，或者说不需要在webpack.config.js中配置入口和出口，但是指定的加载器模块仍然要写上。\n## es6\ncnpm install babel-core babel-loader babel-preset-es2015 --save-dev\n\n```javascript\nmodule.exports = {\n\n    // 需要依赖的插件或者是装载器\n    module: {\n        loaders: [{\n                test: /\\.css$/,\n                loader: \"style-loader!css-loader\"\n            },\n            {\n                test: /\\.js$/,\n                loader: \"babel-loader\",\n                exclude: /node_modules/,\n                query: {\n                    presets: [\"es2015\"]\n                }\n            }\n\n        ]\n    }\n}\n```\n\n```javascript\n//另一种方式，去掉query,建立.babelrc\n{\n    \"presets\":['es2015']\n}\n```\n\n## Demo2\n```javascript\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst CleanWebpackPlugin = require('clean-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst webpack=require('webpack')\nmodule.exports = {\n    entry: {\n        vendor:['jquery','./src/js/common.js'],\n        // 多页面有几个页面就有几个入口,单页面只有一个入口\n        index: './src/js/index.js',\n        cart: './src/js/cart.js'\n    },\n    output: {\n        path: path.join(__dirname, './dist'), //出口必须是绝对路径\n        filename: 'js/[name].js',\n        publicPath: ''\n    },\n    module: {\n        rules: [{\n            test: /\\.css$/,\n            include: path.join(__dirname, 'src'),\n            exclude: /node_modules/,\n            // 这种方法是抽取成单独的css文件\n            // use: ExtractTextPlugin.extract({\n            //     fallback: 'style-loader',\n            //     use: 'css-loader'\n            // })\n            // 这种方法是行内\n            loader:'style-loader!css-loader'\n        },{\n            test: /\\.js$/,\n            include: path.join(__dirname, 'src'),\n            exclude: /node_modules/,\n            loader:'babel-loader'\n        }]\n    },\n    plugins: [\n        // 打包后清除之前的文件\n        new CleanWebpackPlugin(['./dist'], {\n            root: path.join(__dirname, ''),\n            verbose: true,\n            dry: false\n        }),\n        // 单页面配置几个，多页面有几个页面new几个\n        new HtmlWebpackPlugin({\n            filename: 'cart.html',\n            template: './src/cart.html',\n            chunks: ['cart','vendor']\n        }),\n        new HtmlWebpackPlugin({\n            filename: 'index.html',\n            template: './src/index.html',\n            chunks: ['index','vendor'], //指定引用的块，指定以后只引入index相关的css,js，不写这个打包后的htmml引入所有的index,css等。\n            minify:{\n                removeComments:true,\n                collapseWhitespace:true\n            }\n        }),\n        new webpack.ProvidePlugin({\n          $:'jquery',\n          jQuery:'jquery',\n          'window.jQuery':'jquery'\n        }),\n         new ExtractTextPlugin('[name].css'),\n         new webpack.optimize.CommonsChunkPlugin({\n            name:'vendor',\n            chunks:['index','cart','vendor'],\n            minChunks:3\n         }),\n        //  压缩js\n         new webpack.optimize.UglifyJsPlugin({\n             compress:{\n                 warnings:true\n             }\n         })\n\n    ],\n    // devtool: '#source-map'\n}\n```\n\n### es6\n- `npm install --save babel-core babel-loader babel-preset-env`\n- 在配置文件同级目录下建一个.babelrc,写入 `{  \"presets\": [\"env\" ]}`\n- \n```javascript\n        {\n            test: /\\.js$/,\n            include: path.join(__dirname, 'src'),\n            exclude: /node_modules/,\n            loader:'babel-loader'\n        }\n```","slug":"webpackdemo","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabx5000pycti6ckefd2g","content":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>a.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">..</span><br></pre></td></tr></table></figure>\n<p>people.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports=&apos;Hello EveryBody&apos;</span><br></pre></td></tr></table></figure>\n<p>app.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(require(&apos;./people&apos;)) //路径必须./即使是当前目录</span><br></pre></td></tr></table></figure>\n<p>执行命令<code>webpack app.js index.js</code>即生成index.js,<br>打开index.html弹出<code>&#39;Hello EveryBody&#39;</code></p>\n<p>执行命令的时候 –watch 即可监听，app.js有变化自动打包</p>\n<h2 id=\"运用第三方库\"><a href=\"#运用第三方库\" class=\"headerlink\" title=\"运用第三方库\"></a>运用第三方库</h2><p><code>cnpm install style-loader css-loader --save</code><br>index.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;dist/index.js&apos;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>style.css<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    background:red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>app.js</p>\n<p><code>require(&quot;!style-loader!css-loader!./style.css&quot;)</code></p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    entry:<span class=\"string\">'./app.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 出口文件</span></span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        path:__dirname+<span class=\"string\">'/dist'</span>,</span><br><span class=\"line\">        filename:<span class=\"string\">'index.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 需要依赖的插件或者是装载器</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        loaders:[</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,<span class=\"attr\">loader</span>:<span class=\"string\">\"style-loader!css-loader\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>app.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&apos;./style.css&apos;)</span><br></pre></td></tr></table></figure>\n<p><code>webpack</code>即可<br>webpack    开发环境下编译（打包）<br>webpack -p 生产环境下编译（压缩）<br>webpack -w 监听文件改动（自动编译）<br>webpack -d 开启(生成)source map<br>webpack -wdp </p>\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h2><p>webpack –config config.js</p>\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;:&quot;webpack&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>即可用 <code>npm run build</code>来代替执行<code>webpack</code></p>\n<h2 id=\"搭建服务器运行\"><a href=\"#搭建服务器运行\" class=\"headerlink\" title=\"搭建服务器运行\"></a>搭建服务器运行</h2><p><code>cnpm install webpack-dev-server -g --save-dev</code></p>\n<p>package.json</p>\n<p>加入start字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;start&quot;: &quot;webpack-dev-server --entry ./app.js --output-filename ./dist/index.js&quot;,</span><br><span class=\"line\">  &quot;build&quot;:&quot;webpack&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>npm start 自动开启8080端口，自动监听无需刷新。这样就不需要执行webpack命令，或者说不需要在webpack.config.js中配置入口和出口，但是指定的加载器模块仍然要写上。</p>\n<h2 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a>es6</h2><p>cnpm install babel-core babel-loader babel-preset-es2015 –save-dev</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 需要依赖的插件或者是装载器</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                query: &#123;</span><br><span class=\"line\">                    presets: [<span class=\"string\">\"es2015\"</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//另一种方式，去掉query,建立.babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>:[<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Demo2\"><a href=\"#Demo2\" class=\"headerlink\" title=\"Demo2\"></a>Demo2</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack=<span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        vendor:[<span class=\"string\">'jquery'</span>,<span class=\"string\">'./src/js/common.js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 多页面有几个页面就有几个入口,单页面只有一个入口</span></span><br><span class=\"line\">        index: <span class=\"string\">'./src/js/index.js'</span>,</span><br><span class=\"line\">        cart: <span class=\"string\">'./src/js/cart.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.join(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">//出口必须是绝对路径</span></span><br><span class=\"line\">        filename: <span class=\"string\">'js/[name].js'</span>,</span><br><span class=\"line\">        publicPath: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">            include: path.join(__dirname, <span class=\"string\">'src'</span>),</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 这种方法是抽取成单独的css文件</span></span><br><span class=\"line\">            <span class=\"comment\">// use: ExtractTextPlugin.extract(&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     fallback: 'style-loader',</span></span><br><span class=\"line\">            <span class=\"comment\">//     use: 'css-loader'</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">            <span class=\"comment\">// 这种方法是行内</span></span><br><span class=\"line\">            loader:<span class=\"string\">'style-loader!css-loader'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            include: path.join(__dirname, <span class=\"string\">'src'</span>),</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            loader:<span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 打包后清除之前的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'./dist'</span>], &#123;</span><br><span class=\"line\">            root: path.join(__dirname, <span class=\"string\">''</span>),</span><br><span class=\"line\">            verbose: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            dry: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 单页面配置几个，多页面有几个页面new几个</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'cart.html'</span>,</span><br><span class=\"line\">            template: <span class=\"string\">'./src/cart.html'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'cart'</span>,<span class=\"string\">'vendor'</span>]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            template: <span class=\"string\">'./src/index.html'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'index'</span>,<span class=\"string\">'vendor'</span>], <span class=\"comment\">//指定引用的块，指定以后只引入index相关的css,js，不写这个打包后的htmml引入所有的index,css等。</span></span><br><span class=\"line\">            minify:&#123;</span><br><span class=\"line\">                removeComments:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                collapseWhitespace:<span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">          $:<span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">          jQuery:<span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">          <span class=\"string\">'window.jQuery'</span>:<span class=\"string\">'jquery'</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">         <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'[name].css'</span>),</span><br><span class=\"line\">         <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            name:<span class=\"string\">'vendor'</span>,</span><br><span class=\"line\">            chunks:[<span class=\"string\">'index'</span>,<span class=\"string\">'cart'</span>,<span class=\"string\">'vendor'</span>],</span><br><span class=\"line\">            minChunks:<span class=\"number\">3</span></span><br><span class=\"line\">         &#125;),</span><br><span class=\"line\">        <span class=\"comment\">//  压缩js</span></span><br><span class=\"line\">         <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">             compress:&#123;</span><br><span class=\"line\">                 warnings:<span class=\"literal\">true</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// devtool: '#source-map'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-1\"><a href=\"#es6-1\" class=\"headerlink\" title=\"es6\"></a>es6</h3><ul>\n<li><code>npm install --save babel-core babel-loader babel-preset-env</code></li>\n<li>在配置文件同级目录下建一个.babelrc,写入 <code>{  &quot;presets&quot;: [&quot;env&quot; ]}</code></li>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">    include: path.join(__dirname, <span class=\"string\">'src'</span>),</span><br><span class=\"line\">    exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    loader:<span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>a.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">..</span><br></pre></td></tr></table></figure>\n<p>people.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports=&apos;Hello EveryBody&apos;</span><br></pre></td></tr></table></figure>\n<p>app.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(require(&apos;./people&apos;)) //路径必须./即使是当前目录</span><br></pre></td></tr></table></figure>\n<p>执行命令<code>webpack app.js index.js</code>即生成index.js,<br>打开index.html弹出<code>&#39;Hello EveryBody&#39;</code></p>\n<p>执行命令的时候 –watch 即可监听，app.js有变化自动打包</p>\n<h2 id=\"运用第三方库\"><a href=\"#运用第三方库\" class=\"headerlink\" title=\"运用第三方库\"></a>运用第三方库</h2><p><code>cnpm install style-loader css-loader --save</code><br>index.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;dist/index.js&apos;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>style.css<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    background:red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>app.js</p>\n<p><code>require(&quot;!style-loader!css-loader!./style.css&quot;)</code></p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    entry:<span class=\"string\">'./app.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 出口文件</span></span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        path:__dirname+<span class=\"string\">'/dist'</span>,</span><br><span class=\"line\">        filename:<span class=\"string\">'index.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 需要依赖的插件或者是装载器</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        loaders:[</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,<span class=\"attr\">loader</span>:<span class=\"string\">\"style-loader!css-loader\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>app.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&apos;./style.css&apos;)</span><br></pre></td></tr></table></figure>\n<p><code>webpack</code>即可<br>webpack    开发环境下编译（打包）<br>webpack -p 生产环境下编译（压缩）<br>webpack -w 监听文件改动（自动编译）<br>webpack -d 开启(生成)source map<br>webpack -wdp </p>\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h2><p>webpack –config config.js</p>\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;:&quot;webpack&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>即可用 <code>npm run build</code>来代替执行<code>webpack</code></p>\n<h2 id=\"搭建服务器运行\"><a href=\"#搭建服务器运行\" class=\"headerlink\" title=\"搭建服务器运行\"></a>搭建服务器运行</h2><p><code>cnpm install webpack-dev-server -g --save-dev</code></p>\n<p>package.json</p>\n<p>加入start字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;start&quot;: &quot;webpack-dev-server --entry ./app.js --output-filename ./dist/index.js&quot;,</span><br><span class=\"line\">  &quot;build&quot;:&quot;webpack&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>npm start 自动开启8080端口，自动监听无需刷新。这样就不需要执行webpack命令，或者说不需要在webpack.config.js中配置入口和出口，但是指定的加载器模块仍然要写上。</p>\n<h2 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a>es6</h2><p>cnpm install babel-core babel-loader babel-preset-es2015 –save-dev</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 需要依赖的插件或者是装载器</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                query: &#123;</span><br><span class=\"line\">                    presets: [<span class=\"string\">\"es2015\"</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//另一种方式，去掉query,建立.babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>:[<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Demo2\"><a href=\"#Demo2\" class=\"headerlink\" title=\"Demo2\"></a>Demo2</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack=<span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        vendor:[<span class=\"string\">'jquery'</span>,<span class=\"string\">'./src/js/common.js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 多页面有几个页面就有几个入口,单页面只有一个入口</span></span><br><span class=\"line\">        index: <span class=\"string\">'./src/js/index.js'</span>,</span><br><span class=\"line\">        cart: <span class=\"string\">'./src/js/cart.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.join(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">//出口必须是绝对路径</span></span><br><span class=\"line\">        filename: <span class=\"string\">'js/[name].js'</span>,</span><br><span class=\"line\">        publicPath: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">            include: path.join(__dirname, <span class=\"string\">'src'</span>),</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 这种方法是抽取成单独的css文件</span></span><br><span class=\"line\">            <span class=\"comment\">// use: ExtractTextPlugin.extract(&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     fallback: 'style-loader',</span></span><br><span class=\"line\">            <span class=\"comment\">//     use: 'css-loader'</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">            <span class=\"comment\">// 这种方法是行内</span></span><br><span class=\"line\">            loader:<span class=\"string\">'style-loader!css-loader'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            include: path.join(__dirname, <span class=\"string\">'src'</span>),</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            loader:<span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 打包后清除之前的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'./dist'</span>], &#123;</span><br><span class=\"line\">            root: path.join(__dirname, <span class=\"string\">''</span>),</span><br><span class=\"line\">            verbose: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            dry: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 单页面配置几个，多页面有几个页面new几个</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'cart.html'</span>,</span><br><span class=\"line\">            template: <span class=\"string\">'./src/cart.html'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'cart'</span>,<span class=\"string\">'vendor'</span>]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            template: <span class=\"string\">'./src/index.html'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'index'</span>,<span class=\"string\">'vendor'</span>], <span class=\"comment\">//指定引用的块，指定以后只引入index相关的css,js，不写这个打包后的htmml引入所有的index,css等。</span></span><br><span class=\"line\">            minify:&#123;</span><br><span class=\"line\">                removeComments:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                collapseWhitespace:<span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">          $:<span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">          jQuery:<span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">          <span class=\"string\">'window.jQuery'</span>:<span class=\"string\">'jquery'</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">         <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'[name].css'</span>),</span><br><span class=\"line\">         <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            name:<span class=\"string\">'vendor'</span>,</span><br><span class=\"line\">            chunks:[<span class=\"string\">'index'</span>,<span class=\"string\">'cart'</span>,<span class=\"string\">'vendor'</span>],</span><br><span class=\"line\">            minChunks:<span class=\"number\">3</span></span><br><span class=\"line\">         &#125;),</span><br><span class=\"line\">        <span class=\"comment\">//  压缩js</span></span><br><span class=\"line\">         <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">             compress:&#123;</span><br><span class=\"line\">                 warnings:<span class=\"literal\">true</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// devtool: '#source-map'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-1\"><a href=\"#es6-1\" class=\"headerlink\" title=\"es6\"></a>es6</h3><ul>\n<li><code>npm install --save babel-core babel-loader babel-preset-env</code></li>\n<li>在配置文件同级目录下建一个.babelrc,写入 <code>{  &quot;presets&quot;: [&quot;env&quot; ]}</code></li>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">    include: path.join(__dirname, <span class=\"string\">'src'</span>),</span><br><span class=\"line\">    exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    loader:<span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Node.js中的path模块","date":"2017-10-20T00:26:55.000Z","_content":"## join\n该方法将多个参数值字符串结合成一个路径字符串，使用方式如下:\n```javascript\npath.join([path1],[path2],[...])\n```\n在该方法中，使用一个或者多个字符串值参数，该参数返回将这些字符串值参数结合而成的路径。\n```javascript\nlet joinPath=path.join(__dirname,'a','b','c');\nconsole.log(joinPath) // D:\\nodePro\\fileTest\\a\\b\\c\n__dirname变量值代表程序运行的根目录。\n```\n","source":"_posts/2017-10-20-node-path.md","raw":"---\ntitle: Node.js中的path模块\ndate: 2017-10-20 08:26:55\ntags:\n---\n## join\n该方法将多个参数值字符串结合成一个路径字符串，使用方式如下:\n```javascript\npath.join([path1],[path2],[...])\n```\n在该方法中，使用一个或者多个字符串值参数，该参数返回将这些字符串值参数结合而成的路径。\n```javascript\nlet joinPath=path.join(__dirname,'a','b','c');\nconsole.log(joinPath) // D:\\nodePro\\fileTest\\a\\b\\c\n__dirname变量值代表程序运行的根目录。\n```\n","slug":"node-path","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabx5000ryctitkc8mc2i","content":"<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h2><p>该方法将多个参数值字符串结合成一个路径字符串，使用方式如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.join([path1],[path2],[...])</span><br></pre></td></tr></table></figure></p>\n<p>在该方法中，使用一个或者多个字符串值参数，该参数返回将这些字符串值参数结合而成的路径。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> joinPath=path.join(__dirname,<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(joinPath) <span class=\"comment\">// D:\\nodePro\\fileTest\\a\\b\\c</span></span><br><span class=\"line\">__dirname变量值代表程序运行的根目录。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h2><p>该方法将多个参数值字符串结合成一个路径字符串，使用方式如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.join([path1],[path2],[...])</span><br></pre></td></tr></table></figure></p>\n<p>在该方法中，使用一个或者多个字符串值参数，该参数返回将这些字符串值参数结合而成的路径。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> joinPath=path.join(__dirname,<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(joinPath) <span class=\"comment\">// D:\\nodePro\\fileTest\\a\\b\\c</span></span><br><span class=\"line\">__dirname变量值代表程序运行的根目录。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"websocket","date":"2017-10-22T01:39:08.000Z","_content":"## first\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    <input type=\"text\" id=\"sendTxt\">\n    <button id=\"sendBtn\">发送</button>\n    <div id=\"recv\"></div>\n    <script>\n        var websocket = new WebSocket(\"ws://echo.websocket.org/\")\n        websocket.onopen = function () {\n            console.log('websocket已经连接')\n            document.getElementById('recv').innerHTML = 'websocket已经连接'\n        }\n        websocket.onclose = function () {\n            console.log('websocket关闭')\n        }\n        websocket.onmessage = function (e) {\n            console.log(e);\n            document.getElementById('recv').innerHTML = e.data;\n        }\n        document.getElementById('sendBtn').onclick = function () {\n            var txt = document.getElementById('sendTxt').value;\n            websocket.send(txt)\n        }\n    </script>\n</body>\n\n</html>\n```\n一打开页面就显示'websocket已经连接'\n\n当输入文本框发送的时候，服务端返回的数据中，其中的data是我们发送的数据\n\n## sec\n`https://github.com/sitegui/nodejs-websocket`","source":"_posts/2017-10-22-websocket.md","raw":"---\ntitle: websocket\ndate: 2017-10-22 09:39:08\ntags: [websocket]\n---\n## first\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    <input type=\"text\" id=\"sendTxt\">\n    <button id=\"sendBtn\">发送</button>\n    <div id=\"recv\"></div>\n    <script>\n        var websocket = new WebSocket(\"ws://echo.websocket.org/\")\n        websocket.onopen = function () {\n            console.log('websocket已经连接')\n            document.getElementById('recv').innerHTML = 'websocket已经连接'\n        }\n        websocket.onclose = function () {\n            console.log('websocket关闭')\n        }\n        websocket.onmessage = function (e) {\n            console.log(e);\n            document.getElementById('recv').innerHTML = e.data;\n        }\n        document.getElementById('sendBtn').onclick = function () {\n            var txt = document.getElementById('sendTxt').value;\n            websocket.send(txt)\n        }\n    </script>\n</body>\n\n</html>\n```\n一打开页面就显示'websocket已经连接'\n\n当输入文本框发送的时候，服务端返回的数据中，其中的data是我们发送的数据\n\n## sec\n`https://github.com/sitegui/nodejs-websocket`","slug":"websocket","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabx5000wyctipgrwbu2l","content":"<h2 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first\"></a>first</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendTxt\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBtn\"</span>&gt;</span>发送<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"recv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> websocket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">\"ws://echo.websocket.org/\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        websocket.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'websocket已经连接'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'recv'</span>).innerHTML = <span class=\"string\">'websocket已经连接'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        websocket.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'websocket关闭'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        websocket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(e);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'recv'</span>).innerHTML = e.data;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'sendBtn'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> txt = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'sendTxt'</span>).value;</span></span><br><span class=\"line\"><span class=\"undefined\">            websocket.send(txt)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一打开页面就显示’websocket已经连接’</p>\n<p>当输入文本框发送的时候，服务端返回的数据中，其中的data是我们发送的数据</p>\n<h2 id=\"sec\"><a href=\"#sec\" class=\"headerlink\" title=\"sec\"></a>sec</h2><p><code>https://github.com/sitegui/nodejs-websocket</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first\"></a>first</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendTxt\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBtn\"</span>&gt;</span>发送<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"recv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> websocket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">\"ws://echo.websocket.org/\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        websocket.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'websocket已经连接'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'recv'</span>).innerHTML = <span class=\"string\">'websocket已经连接'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        websocket.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'websocket关闭'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        websocket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(e);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'recv'</span>).innerHTML = e.data;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'sendBtn'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> txt = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'sendTxt'</span>).value;</span></span><br><span class=\"line\"><span class=\"undefined\">            websocket.send(txt)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一打开页面就显示’websocket已经连接’</p>\n<p>当输入文本框发送的时候，服务端返回的数据中，其中的data是我们发送的数据</p>\n<h2 id=\"sec\"><a href=\"#sec\" class=\"headerlink\" title=\"sec\"></a>sec</h2><p><code>https://github.com/sitegui/nodejs-websocket</code></p>\n"},{"title":"js-box","date":"2017-11-22T01:49:47.000Z","_content":"\n# js盒模型\n> 通过js中提供的一系列的方法和属性获取页面中元素的样式信息值\n\n# client\n## 1、clientWidth/clientHeight\n>如果元素设置了`height`属性，那么它的`clientHeight`=height+padding-top+padding-bottom,\n与真实内容无关（真实内容即填充的元素）。如果没有设置，那这个height就是真实的高度。\n\n## 2、clientLeft/clientTop\n> 左边框宽度/上边框宽度 即border-left/border-top\n\n# offset\n## 1、offsetWidth/offsetHeight\n> 高度+上下填充+上下边框。实际上这个值也可以写成clientHeight+上下边框\n\n## 2、offsetLeft/offsetTop\n>当前元素`外边框`距离父元素`内边框`的偏移量\n\n# scroll\n## 1、scrollHeight/scrollWidth\n> 它和clientWidth唯一的区别是，有内容溢出的时候，clientHeight和设置的height有关，而scrollHeight只和真实的高度有关，与设置的height无关。\n注意：这个数值是约等于的。\n1、同一个浏览器overflow:hodden不同\n2、不同的浏览器获取的结果不同\n\n## 2、scrollTop/scrollLeft\n\n# 关于js盒子模型属性取值的问题\n> 通过这些属性获取的结果永远不可能出现小数，浏览器获取结果的时候，在原来真实结果的基础上进行四舍五入。\n\n# 关于操作浏览器本身的盒子模型\n> clientWidth/clientHeight是当前浏览器可视窗口的宽度和高度\nscrollWidth/scrollHeight是当前页面的真实宽度和高度（所有屏加起来）\n目前测得需要兼容的是scorllTop，在火狐和ie6-8下用document,在谷歌下用body\n但是是一个约等于的数值。\n为了兼容，所有操作浏览器的盒子模型都要写两套。\n```javascript\n\tfunction win(attr, value) {\n\t\tif(typeof value === \"undefined\") {\n\t\t\treturn document.documentElement[attr] || document.body[attr];\n\t\t}\n\t\tdocument.documentElement[attr] = value;\n\t\tdocument.body[attr] = value;\n\t}\n```","source":"_posts/2017-11-22-js-box.md","raw":"---\ntitle: js-box\ndate: 2017-11-22 09:49:47\ntags:\n---\n\n# js盒模型\n> 通过js中提供的一系列的方法和属性获取页面中元素的样式信息值\n\n# client\n## 1、clientWidth/clientHeight\n>如果元素设置了`height`属性，那么它的`clientHeight`=height+padding-top+padding-bottom,\n与真实内容无关（真实内容即填充的元素）。如果没有设置，那这个height就是真实的高度。\n\n## 2、clientLeft/clientTop\n> 左边框宽度/上边框宽度 即border-left/border-top\n\n# offset\n## 1、offsetWidth/offsetHeight\n> 高度+上下填充+上下边框。实际上这个值也可以写成clientHeight+上下边框\n\n## 2、offsetLeft/offsetTop\n>当前元素`外边框`距离父元素`内边框`的偏移量\n\n# scroll\n## 1、scrollHeight/scrollWidth\n> 它和clientWidth唯一的区别是，有内容溢出的时候，clientHeight和设置的height有关，而scrollHeight只和真实的高度有关，与设置的height无关。\n注意：这个数值是约等于的。\n1、同一个浏览器overflow:hodden不同\n2、不同的浏览器获取的结果不同\n\n## 2、scrollTop/scrollLeft\n\n# 关于js盒子模型属性取值的问题\n> 通过这些属性获取的结果永远不可能出现小数，浏览器获取结果的时候，在原来真实结果的基础上进行四舍五入。\n\n# 关于操作浏览器本身的盒子模型\n> clientWidth/clientHeight是当前浏览器可视窗口的宽度和高度\nscrollWidth/scrollHeight是当前页面的真实宽度和高度（所有屏加起来）\n目前测得需要兼容的是scorllTop，在火狐和ie6-8下用document,在谷歌下用body\n但是是一个约等于的数值。\n为了兼容，所有操作浏览器的盒子模型都要写两套。\n```javascript\n\tfunction win(attr, value) {\n\t\tif(typeof value === \"undefined\") {\n\t\t\treturn document.documentElement[attr] || document.body[attr];\n\t\t}\n\t\tdocument.documentElement[attr] = value;\n\t\tdocument.body[attr] = value;\n\t}\n```","slug":"js-box","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabx5000yycti7rhp6f3j","content":"<h1 id=\"js盒模型\"><a href=\"#js盒模型\" class=\"headerlink\" title=\"js盒模型\"></a>js盒模型</h1><blockquote>\n<p>通过js中提供的一系列的方法和属性获取页面中元素的样式信息值</p>\n</blockquote>\n<h1 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h1><h2 id=\"1、clientWidth-clientHeight\"><a href=\"#1、clientWidth-clientHeight\" class=\"headerlink\" title=\"1、clientWidth/clientHeight\"></a>1、clientWidth/clientHeight</h2><blockquote>\n<p>如果元素设置了<code>height</code>属性，那么它的<code>clientHeight</code>=height+padding-top+padding-bottom,<br>与真实内容无关（真实内容即填充的元素）。如果没有设置，那这个height就是真实的高度。</p>\n</blockquote>\n<h2 id=\"2、clientLeft-clientTop\"><a href=\"#2、clientLeft-clientTop\" class=\"headerlink\" title=\"2、clientLeft/clientTop\"></a>2、clientLeft/clientTop</h2><blockquote>\n<p>左边框宽度/上边框宽度 即border-left/border-top</p>\n</blockquote>\n<h1 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h1><h2 id=\"1、offsetWidth-offsetHeight\"><a href=\"#1、offsetWidth-offsetHeight\" class=\"headerlink\" title=\"1、offsetWidth/offsetHeight\"></a>1、offsetWidth/offsetHeight</h2><blockquote>\n<p>高度+上下填充+上下边框。实际上这个值也可以写成clientHeight+上下边框</p>\n</blockquote>\n<h2 id=\"2、offsetLeft-offsetTop\"><a href=\"#2、offsetLeft-offsetTop\" class=\"headerlink\" title=\"2、offsetLeft/offsetTop\"></a>2、offsetLeft/offsetTop</h2><blockquote>\n<p>当前元素<code>外边框</code>距离父元素<code>内边框</code>的偏移量</p>\n</blockquote>\n<h1 id=\"scroll\"><a href=\"#scroll\" class=\"headerlink\" title=\"scroll\"></a>scroll</h1><h2 id=\"1、scrollHeight-scrollWidth\"><a href=\"#1、scrollHeight-scrollWidth\" class=\"headerlink\" title=\"1、scrollHeight/scrollWidth\"></a>1、scrollHeight/scrollWidth</h2><blockquote>\n<p>它和clientWidth唯一的区别是，有内容溢出的时候，clientHeight和设置的height有关，而scrollHeight只和真实的高度有关，与设置的height无关。<br>注意：这个数值是约等于的。<br>1、同一个浏览器overflow:hodden不同<br>2、不同的浏览器获取的结果不同</p>\n</blockquote>\n<h2 id=\"2、scrollTop-scrollLeft\"><a href=\"#2、scrollTop-scrollLeft\" class=\"headerlink\" title=\"2、scrollTop/scrollLeft\"></a>2、scrollTop/scrollLeft</h2><h1 id=\"关于js盒子模型属性取值的问题\"><a href=\"#关于js盒子模型属性取值的问题\" class=\"headerlink\" title=\"关于js盒子模型属性取值的问题\"></a>关于js盒子模型属性取值的问题</h1><blockquote>\n<p>通过这些属性获取的结果永远不可能出现小数，浏览器获取结果的时候，在原来真实结果的基础上进行四舍五入。</p>\n</blockquote>\n<h1 id=\"关于操作浏览器本身的盒子模型\"><a href=\"#关于操作浏览器本身的盒子模型\" class=\"headerlink\" title=\"关于操作浏览器本身的盒子模型\"></a>关于操作浏览器本身的盒子模型</h1><blockquote>\n<p>clientWidth/clientHeight是当前浏览器可视窗口的宽度和高度<br>scrollWidth/scrollHeight是当前页面的真实宽度和高度（所有屏加起来）<br>目前测得需要兼容的是scorllTop，在火狐和ie6-8下用document,在谷歌下用body<br>但是是一个约等于的数值。<br>为了兼容，所有操作浏览器的盒子模型都要写两套。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">win</span>(<span class=\"params\">attr, value</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value === <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.documentElement[attr] || <span class=\"built_in\">document</span>.body[attr];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.documentElement[attr] = value;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.body[attr] = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"js盒模型\"><a href=\"#js盒模型\" class=\"headerlink\" title=\"js盒模型\"></a>js盒模型</h1><blockquote>\n<p>通过js中提供的一系列的方法和属性获取页面中元素的样式信息值</p>\n</blockquote>\n<h1 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h1><h2 id=\"1、clientWidth-clientHeight\"><a href=\"#1、clientWidth-clientHeight\" class=\"headerlink\" title=\"1、clientWidth/clientHeight\"></a>1、clientWidth/clientHeight</h2><blockquote>\n<p>如果元素设置了<code>height</code>属性，那么它的<code>clientHeight</code>=height+padding-top+padding-bottom,<br>与真实内容无关（真实内容即填充的元素）。如果没有设置，那这个height就是真实的高度。</p>\n</blockquote>\n<h2 id=\"2、clientLeft-clientTop\"><a href=\"#2、clientLeft-clientTop\" class=\"headerlink\" title=\"2、clientLeft/clientTop\"></a>2、clientLeft/clientTop</h2><blockquote>\n<p>左边框宽度/上边框宽度 即border-left/border-top</p>\n</blockquote>\n<h1 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h1><h2 id=\"1、offsetWidth-offsetHeight\"><a href=\"#1、offsetWidth-offsetHeight\" class=\"headerlink\" title=\"1、offsetWidth/offsetHeight\"></a>1、offsetWidth/offsetHeight</h2><blockquote>\n<p>高度+上下填充+上下边框。实际上这个值也可以写成clientHeight+上下边框</p>\n</blockquote>\n<h2 id=\"2、offsetLeft-offsetTop\"><a href=\"#2、offsetLeft-offsetTop\" class=\"headerlink\" title=\"2、offsetLeft/offsetTop\"></a>2、offsetLeft/offsetTop</h2><blockquote>\n<p>当前元素<code>外边框</code>距离父元素<code>内边框</code>的偏移量</p>\n</blockquote>\n<h1 id=\"scroll\"><a href=\"#scroll\" class=\"headerlink\" title=\"scroll\"></a>scroll</h1><h2 id=\"1、scrollHeight-scrollWidth\"><a href=\"#1、scrollHeight-scrollWidth\" class=\"headerlink\" title=\"1、scrollHeight/scrollWidth\"></a>1、scrollHeight/scrollWidth</h2><blockquote>\n<p>它和clientWidth唯一的区别是，有内容溢出的时候，clientHeight和设置的height有关，而scrollHeight只和真实的高度有关，与设置的height无关。<br>注意：这个数值是约等于的。<br>1、同一个浏览器overflow:hodden不同<br>2、不同的浏览器获取的结果不同</p>\n</blockquote>\n<h2 id=\"2、scrollTop-scrollLeft\"><a href=\"#2、scrollTop-scrollLeft\" class=\"headerlink\" title=\"2、scrollTop/scrollLeft\"></a>2、scrollTop/scrollLeft</h2><h1 id=\"关于js盒子模型属性取值的问题\"><a href=\"#关于js盒子模型属性取值的问题\" class=\"headerlink\" title=\"关于js盒子模型属性取值的问题\"></a>关于js盒子模型属性取值的问题</h1><blockquote>\n<p>通过这些属性获取的结果永远不可能出现小数，浏览器获取结果的时候，在原来真实结果的基础上进行四舍五入。</p>\n</blockquote>\n<h1 id=\"关于操作浏览器本身的盒子模型\"><a href=\"#关于操作浏览器本身的盒子模型\" class=\"headerlink\" title=\"关于操作浏览器本身的盒子模型\"></a>关于操作浏览器本身的盒子模型</h1><blockquote>\n<p>clientWidth/clientHeight是当前浏览器可视窗口的宽度和高度<br>scrollWidth/scrollHeight是当前页面的真实宽度和高度（所有屏加起来）<br>目前测得需要兼容的是scorllTop，在火狐和ie6-8下用document,在谷歌下用body<br>但是是一个约等于的数值。<br>为了兼容，所有操作浏览器的盒子模型都要写两套。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">win</span>(<span class=\"params\">attr, value</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value === <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.documentElement[attr] || <span class=\"built_in\">document</span>.body[attr];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.documentElement[attr] = value;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.body[attr] = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"内置的dom操作属性和方法","date":"2017-11-22T07:17:47.000Z","_content":"# 不存在兼容问题\n- getElementById\n- getElementByTagName\n- childNodes\n- parentNode\n- nodeType\n- nodeName\n- firstChild\n- lastChild\n- previousSibling\n- nextSibling\n- appendChild\n- insertBefore\n- cloneNode(true\n\n# 兼容\n- children(谷歌下是子元素节点，ie8得出元素+非法标签+注释，ie7元素+注释)\n- 以下属性ie6-8下不存在\n  - getElementsByClassName\n  - firstElementChild\n  - lastElementChild\n  - previousElementSibling\n  - nextElementSibling\n- 以下方法ie6-7不支持\n- getAttribute\n- setAttribute\n- removeAttribute\n","source":"_posts/2017-11-20-dom.md","raw":"---\ntitle: 内置的dom操作属性和方法\ndate: 2017-11-22 15:17:47\ntags:\n---\n# 不存在兼容问题\n- getElementById\n- getElementByTagName\n- childNodes\n- parentNode\n- nodeType\n- nodeName\n- firstChild\n- lastChild\n- previousSibling\n- nextSibling\n- appendChild\n- insertBefore\n- cloneNode(true\n\n# 兼容\n- children(谷歌下是子元素节点，ie8得出元素+非法标签+注释，ie7元素+注释)\n- 以下属性ie6-8下不存在\n  - getElementsByClassName\n  - firstElementChild\n  - lastElementChild\n  - previousElementSibling\n  - nextElementSibling\n- 以下方法ie6-7不支持\n- getAttribute\n- setAttribute\n- removeAttribute\n","slug":"dom","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabx50012yctii2f9kj38","content":"<h1 id=\"不存在兼容问题\"><a href=\"#不存在兼容问题\" class=\"headerlink\" title=\"不存在兼容问题\"></a>不存在兼容问题</h1><ul>\n<li>getElementById</li>\n<li>getElementByTagName</li>\n<li>childNodes</li>\n<li>parentNode</li>\n<li>nodeType</li>\n<li>nodeName</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>previousSibling</li>\n<li>nextSibling</li>\n<li>appendChild</li>\n<li>insertBefore</li>\n<li>cloneNode(true</li>\n</ul>\n<h1 id=\"兼容\"><a href=\"#兼容\" class=\"headerlink\" title=\"兼容\"></a>兼容</h1><ul>\n<li>children(谷歌下是子元素节点，ie8得出元素+非法标签+注释，ie7元素+注释)</li>\n<li>以下属性ie6-8下不存在<ul>\n<li>getElementsByClassName</li>\n<li>firstElementChild</li>\n<li>lastElementChild</li>\n<li>previousElementSibling</li>\n<li>nextElementSibling</li>\n</ul>\n</li>\n<li>以下方法ie6-7不支持</li>\n<li>getAttribute</li>\n<li>setAttribute</li>\n<li>removeAttribute</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"不存在兼容问题\"><a href=\"#不存在兼容问题\" class=\"headerlink\" title=\"不存在兼容问题\"></a>不存在兼容问题</h1><ul>\n<li>getElementById</li>\n<li>getElementByTagName</li>\n<li>childNodes</li>\n<li>parentNode</li>\n<li>nodeType</li>\n<li>nodeName</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>previousSibling</li>\n<li>nextSibling</li>\n<li>appendChild</li>\n<li>insertBefore</li>\n<li>cloneNode(true</li>\n</ul>\n<h1 id=\"兼容\"><a href=\"#兼容\" class=\"headerlink\" title=\"兼容\"></a>兼容</h1><ul>\n<li>children(谷歌下是子元素节点，ie8得出元素+非法标签+注释，ie7元素+注释)</li>\n<li>以下属性ie6-8下不存在<ul>\n<li>getElementsByClassName</li>\n<li>firstElementChild</li>\n<li>lastElementChild</li>\n<li>previousElementSibling</li>\n<li>nextElementSibling</li>\n</ul>\n</li>\n<li>以下方法ie6-7不支持</li>\n<li>getAttribute</li>\n<li>setAttribute</li>\n<li>removeAttribute</li>\n</ul>\n"},{"title":"call","date":"2017-11-22T07:17:47.000Z","_content":"# call的作用\n>改变函数中this的指向\n\n# call方法实现机制\n>一个函数调用call方法，实际上是从Function的原型链上找到call这个方法，并让call()执行。\n\n```javascript\n function call(data){\n     1、让this(这个this指的是调用者)这个函数中的this(这个this指的是调用者的this)关键字变为data\n     2、让this方法(调用者)执行\n }\n```\n# 案例\n```javascript\n    function fn1() {\n        console.log(1)  //1\n    }\n\n    function fn2() {\n        console.log(2)  //2\n    }\n    fn1.call(fn2)\n    //首先fn1通过原型链找到Function.prototype上的call方法，让call方法执行\n    //执行的时候让fn1的this指向了fn2,然后再让fn1执行\n    fn1.call.call(fn2)\n    //首先fn1通过原型链找到Function.prototype上的call方法\n    //让call方法通过原型找到Function原型上的call(因为call本身的值也是一个函数，所以同样可以找到Function.protoype),\n   // 在第二次找到call的时候让方法执行，方法中的this是fn1.call,首先让这个方法中的this变为fn2,然后再让fn1.call执行\n```\n# call参数\n> call中的第一个参数是改变的this指向，后面的才是传递的参数\n\n```javascript\n   var obj = {}\n    function fn(a, b) {\n        console.log(a + b)    //3\n        console.log(this)     // obj\n    }\n    fn.call(obj, 1, 2)\n```\n\n# 严格模式和非严格\n> 严格模式下，写什么指向什么，非严格模式，都指向window\n\n```javascript\n    'use strict'\n    var obj = {}\n\n    function fn() {\n        console.log(this)\n    }                 \n    fn.call()            //undefined  \n    fn.call(undefined)  //undefined\n    fn.call(null)       // null\n```\n\n# apply\n>和call几乎一样,只不过传递参数的时候放进一个数组\n\n```javascript\n    var obj = {}\n    function fn(a, b) {\n        console.log(a + b)\n        console.log(this)\n    }\n    fn.apply(obj, [1, 2])\n```\n# bind\n>bind在ie6-8下不兼容,和call,apply类似都是用来改变this关键字。区别是只是改变this指向，并且传递了参数，但是\n>此时并没有把fn这个函数执行，但是会有一个返回值可以执行\n```javascript\n    var obj = {}\n    function fn(a, b) {\n        console.log(a + b)\n        console.log(this)\n    }\n    var a = fn.bind(obj, 1, 2)\n    a()\n```","source":"_posts/2017-11-23-call.md","raw":"---\ntitle: call\ndate: 2017-11-22 15:17:47\ntags:\n---\n# call的作用\n>改变函数中this的指向\n\n# call方法实现机制\n>一个函数调用call方法，实际上是从Function的原型链上找到call这个方法，并让call()执行。\n\n```javascript\n function call(data){\n     1、让this(这个this指的是调用者)这个函数中的this(这个this指的是调用者的this)关键字变为data\n     2、让this方法(调用者)执行\n }\n```\n# 案例\n```javascript\n    function fn1() {\n        console.log(1)  //1\n    }\n\n    function fn2() {\n        console.log(2)  //2\n    }\n    fn1.call(fn2)\n    //首先fn1通过原型链找到Function.prototype上的call方法，让call方法执行\n    //执行的时候让fn1的this指向了fn2,然后再让fn1执行\n    fn1.call.call(fn2)\n    //首先fn1通过原型链找到Function.prototype上的call方法\n    //让call方法通过原型找到Function原型上的call(因为call本身的值也是一个函数，所以同样可以找到Function.protoype),\n   // 在第二次找到call的时候让方法执行，方法中的this是fn1.call,首先让这个方法中的this变为fn2,然后再让fn1.call执行\n```\n# call参数\n> call中的第一个参数是改变的this指向，后面的才是传递的参数\n\n```javascript\n   var obj = {}\n    function fn(a, b) {\n        console.log(a + b)    //3\n        console.log(this)     // obj\n    }\n    fn.call(obj, 1, 2)\n```\n\n# 严格模式和非严格\n> 严格模式下，写什么指向什么，非严格模式，都指向window\n\n```javascript\n    'use strict'\n    var obj = {}\n\n    function fn() {\n        console.log(this)\n    }                 \n    fn.call()            //undefined  \n    fn.call(undefined)  //undefined\n    fn.call(null)       // null\n```\n\n# apply\n>和call几乎一样,只不过传递参数的时候放进一个数组\n\n```javascript\n    var obj = {}\n    function fn(a, b) {\n        console.log(a + b)\n        console.log(this)\n    }\n    fn.apply(obj, [1, 2])\n```\n# bind\n>bind在ie6-8下不兼容,和call,apply类似都是用来改变this关键字。区别是只是改变this指向，并且传递了参数，但是\n>此时并没有把fn这个函数执行，但是会有一个返回值可以执行\n```javascript\n    var obj = {}\n    function fn(a, b) {\n        console.log(a + b)\n        console.log(this)\n    }\n    var a = fn.bind(obj, 1, 2)\n    a()\n```","slug":"call","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl0015ycti611j9iez","content":"<h1 id=\"call的作用\"><a href=\"#call的作用\" class=\"headerlink\" title=\"call的作用\"></a>call的作用</h1><blockquote>\n<p>改变函数中this的指向</p>\n</blockquote>\n<h1 id=\"call方法实现机制\"><a href=\"#call方法实现机制\" class=\"headerlink\" title=\"call方法实现机制\"></a>call方法实现机制</h1><blockquote>\n<p>一个函数调用call方法，实际上是从Function的原型链上找到call这个方法，并让call()执行。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">call</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>、让<span class=\"keyword\">this</span>(这个<span class=\"keyword\">this</span>指的是调用者)这个函数中的<span class=\"keyword\">this</span>(这个<span class=\"keyword\">this</span>指的是调用者的<span class=\"keyword\">this</span>)关键字变为data</span><br><span class=\"line\">    <span class=\"number\">2</span>、让<span class=\"keyword\">this</span>方法(调用者)执行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)  <span class=\"comment\">//1</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)  <span class=\"comment\">//2</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> fn1.call(fn2)</span><br><span class=\"line\"> <span class=\"comment\">//首先fn1通过原型链找到Function.prototype上的call方法，让call方法执行</span></span><br><span class=\"line\"> <span class=\"comment\">//执行的时候让fn1的this指向了fn2,然后再让fn1执行</span></span><br><span class=\"line\"> fn1.call.call(fn2)</span><br><span class=\"line\"> <span class=\"comment\">//首先fn1通过原型链找到Function.prototype上的call方法</span></span><br><span class=\"line\"> <span class=\"comment\">//让call方法通过原型找到Function原型上的call(因为call本身的值也是一个函数，所以同样可以找到Function.protoype),</span></span><br><span class=\"line\"><span class=\"comment\">// 在第二次找到call的时候让方法执行，方法中的this是fn1.call,首先让这个方法中的this变为fn2,然后再让fn1.call执行</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"call参数\"><a href=\"#call参数\" class=\"headerlink\" title=\"call参数\"></a>call参数</h1><blockquote>\n<p>call中的第一个参数是改变的this指向，后面的才是传递的参数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(a + b)    <span class=\"comment\">//3</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)     <span class=\"comment\">// obj</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> fn.call(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"严格模式和非严格\"><a href=\"#严格模式和非严格\" class=\"headerlink\" title=\"严格模式和非严格\"></a>严格模式和非严格</h1><blockquote>\n<p>严格模式下，写什么指向什么，非严格模式，都指向window</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;                 </span><br><span class=\"line\">fn.call()            <span class=\"comment\">//undefined  </span></span><br><span class=\"line\">fn.call(<span class=\"literal\">undefined</span>)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">fn.call(<span class=\"literal\">null</span>)       <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h1><blockquote>\n<p>和call几乎一样,只不过传递参数的时候放进一个数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn.apply(obj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h1><blockquote>\n<p>bind在ie6-8下不兼容,和call,apply类似都是用来改变this关键字。区别是只是改变this指向，并且传递了参数，但是<br>此时并没有把fn这个函数执行，但是会有一个返回值可以执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fn.bind(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"call的作用\"><a href=\"#call的作用\" class=\"headerlink\" title=\"call的作用\"></a>call的作用</h1><blockquote>\n<p>改变函数中this的指向</p>\n</blockquote>\n<h1 id=\"call方法实现机制\"><a href=\"#call方法实现机制\" class=\"headerlink\" title=\"call方法实现机制\"></a>call方法实现机制</h1><blockquote>\n<p>一个函数调用call方法，实际上是从Function的原型链上找到call这个方法，并让call()执行。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">call</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>、让<span class=\"keyword\">this</span>(这个<span class=\"keyword\">this</span>指的是调用者)这个函数中的<span class=\"keyword\">this</span>(这个<span class=\"keyword\">this</span>指的是调用者的<span class=\"keyword\">this</span>)关键字变为data</span><br><span class=\"line\">    <span class=\"number\">2</span>、让<span class=\"keyword\">this</span>方法(调用者)执行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)  <span class=\"comment\">//1</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)  <span class=\"comment\">//2</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> fn1.call(fn2)</span><br><span class=\"line\"> <span class=\"comment\">//首先fn1通过原型链找到Function.prototype上的call方法，让call方法执行</span></span><br><span class=\"line\"> <span class=\"comment\">//执行的时候让fn1的this指向了fn2,然后再让fn1执行</span></span><br><span class=\"line\"> fn1.call.call(fn2)</span><br><span class=\"line\"> <span class=\"comment\">//首先fn1通过原型链找到Function.prototype上的call方法</span></span><br><span class=\"line\"> <span class=\"comment\">//让call方法通过原型找到Function原型上的call(因为call本身的值也是一个函数，所以同样可以找到Function.protoype),</span></span><br><span class=\"line\"><span class=\"comment\">// 在第二次找到call的时候让方法执行，方法中的this是fn1.call,首先让这个方法中的this变为fn2,然后再让fn1.call执行</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"call参数\"><a href=\"#call参数\" class=\"headerlink\" title=\"call参数\"></a>call参数</h1><blockquote>\n<p>call中的第一个参数是改变的this指向，后面的才是传递的参数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(a + b)    <span class=\"comment\">//3</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)     <span class=\"comment\">// obj</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> fn.call(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"严格模式和非严格\"><a href=\"#严格模式和非严格\" class=\"headerlink\" title=\"严格模式和非严格\"></a>严格模式和非严格</h1><blockquote>\n<p>严格模式下，写什么指向什么，非严格模式，都指向window</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;                 </span><br><span class=\"line\">fn.call()            <span class=\"comment\">//undefined  </span></span><br><span class=\"line\">fn.call(<span class=\"literal\">undefined</span>)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">fn.call(<span class=\"literal\">null</span>)       <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h1><blockquote>\n<p>和call几乎一样,只不过传递参数的时候放进一个数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn.apply(obj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h1><blockquote>\n<p>bind在ie6-8下不兼容,和call,apply类似都是用来改变this关键字。区别是只是改变this指向，并且传递了参数，但是<br>此时并没有把fn这个函数执行，但是会有一个返回值可以执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fn.bind(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"借用方法","date":"2017-11-23T08:43:09.000Z","_content":"# 借用原型上的方法\n\n```javascript\n// 1、使用原生slice方法\n var a=[1,2,3]\n a.slice()\n//  slice实现机制如下\n   Array.prototype.slice = function () {\n        var arr = []\n        for (var i = 0; i < this.length; i++) {\n            arr[arr.length] = this[i]\n        }\n        return arr\n    }\n//可以看出，实际是从原型链上去寻找slice并让他执行，内部机制通过this去操作调用者\n\n//2、手写一个函数将类数组转为数组\n    function listtoArray() {\n        var arr = []\n        for (var i = 0; i < arguments.length; i++) {\n            arr[arr.length] = arguments[i]\n        }\n        return arr\n    }\n    listtoArray(a)\n    //3、比较两者可以看出，区别就在于原生的slice方法中，需要一个数组去调用，\n    //内部用this去实现操作。而现在的做法是将数组当作参数传入。我们只需\n    //将原生方法中的this改为arguments即可\n      function listtoArray(){\n          return Array.prototype.slice.call(arguments)\n      }\n```\n\n# 将类数组转为数组\n```javascript\nvar olis=document.getElementsByTagName('div');\nvar ary=Array.prototype.slice.call(olis)\n//问题：在ie6-8下，不支持借用数组的slice实现将元素集合的类数组转为数组，但是arguments不存在这个兼容问题\n//以下是兼容方法\n\tfunction listToArray(likeAry) {\n\t\tif (flag) {\n\t\t\treturn Array.prototype.slice.call(likeAry, 0);\n\t\t}\n\t\tvar ary = [];\n\t\tfor (var i = 0; i < likeAry.length; i++) {\n\t\t\tary[ary.length] = likeAry[i];\n\t\t}\n\t\treturn ary;\n\t}\n\n```\n\n# 扩展\n```javascript\n    //从某一处开始克隆\n    function fn(){\n        var aru=[].slice.call(arguments,1)//从第二项开始克隆\n    }\n    //求平均数实例\n\tfunction avgFn() {\n\t\tArray.prototype.sort.call(arguments, function (a, b) {\n\t\t\treturn a - b\n\t\t})\n\n\t\tArray.prototype.shift.call(arguments)\n\t\tArray.prototype.pop.call(arguments)\n\t\treturn (eval([].join.call(arguments, '+')) / arguments.length).toFixed(2)\n\t}\n\tvar res = avgFn(3.4, 5.5, 5.4)\n```","source":"_posts/2017-11-23-jieyong.md","raw":"---\ntitle: 借用方法\ndate: 2017-11-23 16:43:09\ntags:\n---\n# 借用原型上的方法\n\n```javascript\n// 1、使用原生slice方法\n var a=[1,2,3]\n a.slice()\n//  slice实现机制如下\n   Array.prototype.slice = function () {\n        var arr = []\n        for (var i = 0; i < this.length; i++) {\n            arr[arr.length] = this[i]\n        }\n        return arr\n    }\n//可以看出，实际是从原型链上去寻找slice并让他执行，内部机制通过this去操作调用者\n\n//2、手写一个函数将类数组转为数组\n    function listtoArray() {\n        var arr = []\n        for (var i = 0; i < arguments.length; i++) {\n            arr[arr.length] = arguments[i]\n        }\n        return arr\n    }\n    listtoArray(a)\n    //3、比较两者可以看出，区别就在于原生的slice方法中，需要一个数组去调用，\n    //内部用this去实现操作。而现在的做法是将数组当作参数传入。我们只需\n    //将原生方法中的this改为arguments即可\n      function listtoArray(){\n          return Array.prototype.slice.call(arguments)\n      }\n```\n\n# 将类数组转为数组\n```javascript\nvar olis=document.getElementsByTagName('div');\nvar ary=Array.prototype.slice.call(olis)\n//问题：在ie6-8下，不支持借用数组的slice实现将元素集合的类数组转为数组，但是arguments不存在这个兼容问题\n//以下是兼容方法\n\tfunction listToArray(likeAry) {\n\t\tif (flag) {\n\t\t\treturn Array.prototype.slice.call(likeAry, 0);\n\t\t}\n\t\tvar ary = [];\n\t\tfor (var i = 0; i < likeAry.length; i++) {\n\t\t\tary[ary.length] = likeAry[i];\n\t\t}\n\t\treturn ary;\n\t}\n\n```\n\n# 扩展\n```javascript\n    //从某一处开始克隆\n    function fn(){\n        var aru=[].slice.call(arguments,1)//从第二项开始克隆\n    }\n    //求平均数实例\n\tfunction avgFn() {\n\t\tArray.prototype.sort.call(arguments, function (a, b) {\n\t\t\treturn a - b\n\t\t})\n\n\t\tArray.prototype.shift.call(arguments)\n\t\tArray.prototype.pop.call(arguments)\n\t\treturn (eval([].join.call(arguments, '+')) / arguments.length).toFixed(2)\n\t}\n\tvar res = avgFn(3.4, 5.5, 5.4)\n```","slug":"jieyong","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl0018yctilqlmjc4s","content":"<h1 id=\"借用原型上的方法\"><a href=\"#借用原型上的方法\" class=\"headerlink\" title=\"借用原型上的方法\"></a>借用原型上的方法</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、使用原生slice方法</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> a=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"> a.slice()</span><br><span class=\"line\"><span class=\"comment\">//  slice实现机制如下</span></span><br><span class=\"line\">   <span class=\"built_in\">Array</span>.prototype.slice = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">            arr[arr.length] = <span class=\"keyword\">this</span>[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//可以看出，实际是从原型链上去寻找slice并让他执行，内部机制通过this去操作调用者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、手写一个函数将类数组转为数组</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listtoArray</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">            arr[arr.length] = <span class=\"built_in\">arguments</span>[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    listtoArray(a)</span><br><span class=\"line\">    <span class=\"comment\">//3、比较两者可以看出，区别就在于原生的slice方法中，需要一个数组去调用，</span></span><br><span class=\"line\">    <span class=\"comment\">//内部用this去实现操作。而现在的做法是将数组当作参数传入。我们只需</span></span><br><span class=\"line\">    <span class=\"comment\">//将原生方法中的this改为arguments即可</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listtoArray</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"将类数组转为数组\"><a href=\"#将类数组转为数组\" class=\"headerlink\" title=\"将类数组转为数组\"></a>将类数组转为数组</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> olis=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ary=<span class=\"built_in\">Array</span>.prototype.slice.call(olis)</span><br><span class=\"line\"><span class=\"comment\">//问题：在ie6-8下，不支持借用数组的slice实现将元素集合的类数组转为数组，但是arguments不存在这个兼容问题</span></span><br><span class=\"line\"><span class=\"comment\">//以下是兼容方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listToArray</span>(<span class=\"params\">likeAry</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(likeAry, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ary = [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; likeAry.length; i++) &#123;</span><br><span class=\"line\">\t\t\tary[ary.length] = likeAry[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ary;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//从某一处开始克隆</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> aru=[].slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)<span class=\"comment\">//从第二项开始克隆</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//求平均数实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">avgFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.sort.call(<span class=\"built_in\">arguments</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.pop.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"built_in\">eval</span>([].join.call(<span class=\"built_in\">arguments</span>, <span class=\"string\">'+'</span>)) / <span class=\"built_in\">arguments</span>.length).toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = avgFn(<span class=\"number\">3.4</span>, <span class=\"number\">5.5</span>, <span class=\"number\">5.4</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"借用原型上的方法\"><a href=\"#借用原型上的方法\" class=\"headerlink\" title=\"借用原型上的方法\"></a>借用原型上的方法</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、使用原生slice方法</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> a=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"> a.slice()</span><br><span class=\"line\"><span class=\"comment\">//  slice实现机制如下</span></span><br><span class=\"line\">   <span class=\"built_in\">Array</span>.prototype.slice = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">            arr[arr.length] = <span class=\"keyword\">this</span>[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//可以看出，实际是从原型链上去寻找slice并让他执行，内部机制通过this去操作调用者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、手写一个函数将类数组转为数组</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listtoArray</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">            arr[arr.length] = <span class=\"built_in\">arguments</span>[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    listtoArray(a)</span><br><span class=\"line\">    <span class=\"comment\">//3、比较两者可以看出，区别就在于原生的slice方法中，需要一个数组去调用，</span></span><br><span class=\"line\">    <span class=\"comment\">//内部用this去实现操作。而现在的做法是将数组当作参数传入。我们只需</span></span><br><span class=\"line\">    <span class=\"comment\">//将原生方法中的this改为arguments即可</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listtoArray</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"将类数组转为数组\"><a href=\"#将类数组转为数组\" class=\"headerlink\" title=\"将类数组转为数组\"></a>将类数组转为数组</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> olis=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ary=<span class=\"built_in\">Array</span>.prototype.slice.call(olis)</span><br><span class=\"line\"><span class=\"comment\">//问题：在ie6-8下，不支持借用数组的slice实现将元素集合的类数组转为数组，但是arguments不存在这个兼容问题</span></span><br><span class=\"line\"><span class=\"comment\">//以下是兼容方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listToArray</span>(<span class=\"params\">likeAry</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(likeAry, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ary = [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; likeAry.length; i++) &#123;</span><br><span class=\"line\">\t\t\tary[ary.length] = likeAry[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ary;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//从某一处开始克隆</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> aru=[].slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)<span class=\"comment\">//从第二项开始克隆</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//求平均数实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">avgFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.sort.call(<span class=\"built_in\">arguments</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.pop.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"built_in\">eval</span>([].join.call(<span class=\"built_in\">arguments</span>, <span class=\"string\">'+'</span>)) / <span class=\"built_in\">arguments</span>.length).toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = avgFn(<span class=\"number\">3.4</span>, <span class=\"number\">5.5</span>, <span class=\"number\">5.4</span>)</span><br></pre></td></tr></table></figure>"},{"title":"this","date":"2017-11-23T14:34:39.000Z","_content":"# This\n> this是谁与函数在哪里定义的，在哪里执行的没有任何关系。\n\n> 函数执行，首先看函数名前面是否有\".\"，如果有\".\"前面是谁this就是谁，如果没有this就是window\n\n```javascript\n    function fn() {\n        console.log(this)\n    }\n    fn();// window\n    var obj = { fn: fn }\n    obj.fn()  //obj\n    function sum() {\n        fn()\n    }\n    sum();  //window\n    // 执行this的函数是fn，所以我们只需要观察fn前面是否有\".\"\n    var oo = {\n        sum: function () {\n            fn()\n        }\n    }\n    oo.sum();  //window\n```\n\n>给一个元素的某个事件绑定方法，当事件触发的时候，执行对应的方法，方法中的this是当前的元素\n\n```javascript\ndocument.getElementById('div').onclick=fn; //#div\ndocument.getElementById('div').onclick=function(){\n    fn()  //window\n}\n```\n#call和apply\n> call和apply强制改变this的指向,以上所有的this情况在遇到call/apply的时候都不好使,都已强制改变的为主\n\n  ```javascript\nobj.fn.call(1);//this->1\n  ```\n>  一般情况下,我们执行call方法第一个传递的参数值是谁,那么fn中的this就是谁\n  [在非严格模式下]\n  第一个参数没有传递值、传递的是null、传递的是undefined fn中的this都是window\n  [严格模式下]\n  第一个参数传递的是谁this就是谁,传递null/undefined,fn中的this都是对应的null/undefined,不传递值默认也是undefined\n综上所述，严格模式下的this相对于非严格模式下的this主要区别在于：对于js代码中没有写执行主体的情况下，非严格模式下默认都是window执行的，所以this指向的是window,\n但是在严格模式下，没有写就是没有执行主体，this指向的是undefined.\n```javascript\n    'use strict'\n    var obj = {}\n\n    function fn() {\n        console.log(this)\n    }                 \n    fn.call()            //undefined  \n    fn.call(undefined)  //undefined\n    fn.call(null)       // null\n```\n","source":"_posts/2017-11-23-this.md","raw":"---\ntitle: this\ndate: 2017-11-23 22:34:39\ntags:\n---\n# This\n> this是谁与函数在哪里定义的，在哪里执行的没有任何关系。\n\n> 函数执行，首先看函数名前面是否有\".\"，如果有\".\"前面是谁this就是谁，如果没有this就是window\n\n```javascript\n    function fn() {\n        console.log(this)\n    }\n    fn();// window\n    var obj = { fn: fn }\n    obj.fn()  //obj\n    function sum() {\n        fn()\n    }\n    sum();  //window\n    // 执行this的函数是fn，所以我们只需要观察fn前面是否有\".\"\n    var oo = {\n        sum: function () {\n            fn()\n        }\n    }\n    oo.sum();  //window\n```\n\n>给一个元素的某个事件绑定方法，当事件触发的时候，执行对应的方法，方法中的this是当前的元素\n\n```javascript\ndocument.getElementById('div').onclick=fn; //#div\ndocument.getElementById('div').onclick=function(){\n    fn()  //window\n}\n```\n#call和apply\n> call和apply强制改变this的指向,以上所有的this情况在遇到call/apply的时候都不好使,都已强制改变的为主\n\n  ```javascript\nobj.fn.call(1);//this->1\n  ```\n>  一般情况下,我们执行call方法第一个传递的参数值是谁,那么fn中的this就是谁\n  [在非严格模式下]\n  第一个参数没有传递值、传递的是null、传递的是undefined fn中的this都是window\n  [严格模式下]\n  第一个参数传递的是谁this就是谁,传递null/undefined,fn中的this都是对应的null/undefined,不传递值默认也是undefined\n综上所述，严格模式下的this相对于非严格模式下的this主要区别在于：对于js代码中没有写执行主体的情况下，非严格模式下默认都是window执行的，所以this指向的是window,\n但是在严格模式下，没有写就是没有执行主体，this指向的是undefined.\n```javascript\n    'use strict'\n    var obj = {}\n\n    function fn() {\n        console.log(this)\n    }                 \n    fn.call()            //undefined  \n    fn.call(undefined)  //undefined\n    fn.call(null)       // null\n```\n","slug":"this","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl001ayctii8s9saqu","content":"<h1 id=\"This\"><a href=\"#This\" class=\"headerlink\" title=\"This\"></a>This</h1><blockquote>\n<p>this是谁与函数在哪里定义的，在哪里执行的没有任何关系。</p>\n</blockquote>\n<blockquote>\n<p>函数执行，首先看函数名前面是否有”.”，如果有”.”前面是谁this就是谁，如果没有this就是window</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();<span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">fn</span>: fn &#125;</span><br><span class=\"line\">obj.fn()  <span class=\"comment\">//obj</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum();  <span class=\"comment\">//window</span></span><br><span class=\"line\"><span class=\"comment\">// 执行this的函数是fn，所以我们只需要观察fn前面是否有\".\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oo = &#123;</span><br><span class=\"line\">    sum: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        fn()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oo.sum();  <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>给一个元素的某个事件绑定方法，当事件触发的时候，执行对应的方法，方法中的this是当前的元素</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>).onclick=fn; <span class=\"comment\">//#div</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>).onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    fn()  <span class=\"comment\">//window</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#call和apply</p>\n<blockquote>\n<p>call和apply强制改变this的指向,以上所有的this情况在遇到call/apply的时候都不好使,都已强制改变的为主</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.fn.call(<span class=\"number\">1</span>);<span class=\"comment\">//this-&gt;1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 一般情况下,我们执行call方法第一个传递的参数值是谁,那么fn中的this就是谁<br>  [在非严格模式下]<br>  第一个参数没有传递值、传递的是null、传递的是undefined fn中的this都是window<br>  [严格模式下]<br>  第一个参数传递的是谁this就是谁,传递null/undefined,fn中的this都是对应的null/undefined,不传递值默认也是undefined<br>综上所述，严格模式下的this相对于非严格模式下的this主要区别在于：对于js代码中没有写执行主体的情况下，非严格模式下默认都是window执行的，所以this指向的是window,<br>但是在严格模式下，没有写就是没有执行主体，this指向的是undefined.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;                 </span><br><span class=\"line\">fn.call()            <span class=\"comment\">//undefined  </span></span><br><span class=\"line\">fn.call(<span class=\"literal\">undefined</span>)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">fn.call(<span class=\"literal\">null</span>)       <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"This\"><a href=\"#This\" class=\"headerlink\" title=\"This\"></a>This</h1><blockquote>\n<p>this是谁与函数在哪里定义的，在哪里执行的没有任何关系。</p>\n</blockquote>\n<blockquote>\n<p>函数执行，首先看函数名前面是否有”.”，如果有”.”前面是谁this就是谁，如果没有this就是window</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();<span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">fn</span>: fn &#125;</span><br><span class=\"line\">obj.fn()  <span class=\"comment\">//obj</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum();  <span class=\"comment\">//window</span></span><br><span class=\"line\"><span class=\"comment\">// 执行this的函数是fn，所以我们只需要观察fn前面是否有\".\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oo = &#123;</span><br><span class=\"line\">    sum: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        fn()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oo.sum();  <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>给一个元素的某个事件绑定方法，当事件触发的时候，执行对应的方法，方法中的this是当前的元素</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>).onclick=fn; <span class=\"comment\">//#div</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>).onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    fn()  <span class=\"comment\">//window</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#call和apply</p>\n<blockquote>\n<p>call和apply强制改变this的指向,以上所有的this情况在遇到call/apply的时候都不好使,都已强制改变的为主</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.fn.call(<span class=\"number\">1</span>);<span class=\"comment\">//this-&gt;1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 一般情况下,我们执行call方法第一个传递的参数值是谁,那么fn中的this就是谁<br>  [在非严格模式下]<br>  第一个参数没有传递值、传递的是null、传递的是undefined fn中的this都是window<br>  [严格模式下]<br>  第一个参数传递的是谁this就是谁,传递null/undefined,fn中的this都是对应的null/undefined,不传递值默认也是undefined<br>综上所述，严格模式下的this相对于非严格模式下的this主要区别在于：对于js代码中没有写执行主体的情况下，非严格模式下默认都是window执行的，所以this指向的是window,<br>但是在严格模式下，没有写就是没有执行主体，this指向的是undefined.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;                 </span><br><span class=\"line\">fn.call()            <span class=\"comment\">//undefined  </span></span><br><span class=\"line\">fn.call(<span class=\"literal\">undefined</span>)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">fn.call(<span class=\"literal\">null</span>)       <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"yibu","date":"2017-11-23T15:14:09.000Z","_content":"# 同步和异步\n> 在js中异步编程有四种情况：定时器、事件绑定、ajax读取数据可以设置为异步，回调函数。\n# 实例\n> 每一个浏览器对于定时器的等待时间都有一个最小的数值，如果设置的等待时间小于这个数值，按照最小时间来执行\n```javascript\n var n=0;\n window.setTimeout(function(){\n    n++;\n    console.log(n)\n },0)\n console.log(n)  //这个依旧先执行\n\n```\n> 我们定时器设置的等待时间不一定就是最后执行的时间，如果定时器之后还有其它的事情正在处理中，不管定时器的时间有没有到，都是不会执行定时器。\n \n```javascript\n var n=0;\n window.setTimeout(function(){\n    n++;\n    console.log(n)  //不执行\n },0)\n console.log(n)    //首先执行，0\n while(1){  //死循环\n     n++\n }\n console.log(n) //不执行\n```\n\n> 定时器之间，快的先执行\n\n```javascript\n var n=0;\nwindow.setTimeout(function() {\n    console.log('a')\n}, 20);\n\nsetTimeout(function() {\n    console.log('b')\n}, 5);\n\nconsole.log('c')\nfor(var i=0;i<1000;i++){\n\n}\nconsole.log('d')\n//执行顺序 c - d - b -a\n```","source":"_posts/2017-11-23-yibu.md","raw":"---\ntitle: yibu\ndate: 2017-11-23 23:14:09\ntags:\n---\n# 同步和异步\n> 在js中异步编程有四种情况：定时器、事件绑定、ajax读取数据可以设置为异步，回调函数。\n# 实例\n> 每一个浏览器对于定时器的等待时间都有一个最小的数值，如果设置的等待时间小于这个数值，按照最小时间来执行\n```javascript\n var n=0;\n window.setTimeout(function(){\n    n++;\n    console.log(n)\n },0)\n console.log(n)  //这个依旧先执行\n\n```\n> 我们定时器设置的等待时间不一定就是最后执行的时间，如果定时器之后还有其它的事情正在处理中，不管定时器的时间有没有到，都是不会执行定时器。\n \n```javascript\n var n=0;\n window.setTimeout(function(){\n    n++;\n    console.log(n)  //不执行\n },0)\n console.log(n)    //首先执行，0\n while(1){  //死循环\n     n++\n }\n console.log(n) //不执行\n```\n\n> 定时器之间，快的先执行\n\n```javascript\n var n=0;\nwindow.setTimeout(function() {\n    console.log('a')\n}, 20);\n\nsetTimeout(function() {\n    console.log('b')\n}, 5);\n\nconsole.log('c')\nfor(var i=0;i<1000;i++){\n\n}\nconsole.log('d')\n//执行顺序 c - d - b -a\n```","slug":"yibu","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl001cyctimwmzylnr","content":"<h1 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h1><blockquote>\n<p>在js中异步编程有四种情况：定时器、事件绑定、ajax读取数据可以设置为异步，回调函数。</p>\n</blockquote>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><blockquote>\n<p>每一个浏览器对于定时器的等待时间都有一个最小的数值，如果设置的等待时间小于这个数值，按照最小时间来执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   n++;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n)  <span class=\"comment\">//这个依旧先执行</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>我们定时器设置的等待时间不一定就是最后执行的时间，如果定时器之后还有其它的事情正在处理中，不管定时器的时间有没有到，都是不会执行定时器。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   n++;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(n)  <span class=\"comment\">//不执行</span></span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n)    <span class=\"comment\">//首先执行，0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;  <span class=\"comment\">//死循环</span></span><br><span class=\"line\">    n++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n) <span class=\"comment\">//不执行</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>定时器之间，快的先执行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'d'</span>)</span><br><span class=\"line\"><span class=\"comment\">//执行顺序 c - d - b -a</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h1><blockquote>\n<p>在js中异步编程有四种情况：定时器、事件绑定、ajax读取数据可以设置为异步，回调函数。</p>\n</blockquote>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><blockquote>\n<p>每一个浏览器对于定时器的等待时间都有一个最小的数值，如果设置的等待时间小于这个数值，按照最小时间来执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   n++;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n)  <span class=\"comment\">//这个依旧先执行</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>我们定时器设置的等待时间不一定就是最后执行的时间，如果定时器之后还有其它的事情正在处理中，不管定时器的时间有没有到，都是不会执行定时器。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   n++;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(n)  <span class=\"comment\">//不执行</span></span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n)    <span class=\"comment\">//首先执行，0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;  <span class=\"comment\">//死循环</span></span><br><span class=\"line\">    n++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n) <span class=\"comment\">//不执行</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>定时器之间，快的先执行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'d'</span>)</span><br><span class=\"line\"><span class=\"comment\">//执行顺序 c - d - b -a</span></span><br></pre></td></tr></table></figure>"},{"title":"bangding","date":"2017-11-24T03:23:06.000Z","_content":"```javascript\n    var box = document.getElementById('box')\n    function fn() {\n        console.log('hello')\n    }\n    // 点击的时候才执行\n    box.onclick = function () {\n        fn()\n    }\n    // 直接执行fn,将返回值赋给点击事件，如果没有返回值，就是undefined\n    box.onclick = fn()\n    // 同第一种方法，如果需要传参就需要换成第一种\n    box.onclick = fn\n\n```\n","source":"_posts/2017-11-24-bangding.md","raw":"---\ntitle: bangding\ndate: 2017-11-24 11:23:06\ntags:\n---\n```javascript\n    var box = document.getElementById('box')\n    function fn() {\n        console.log('hello')\n    }\n    // 点击的时候才执行\n    box.onclick = function () {\n        fn()\n    }\n    // 直接执行fn,将返回值赋给点击事件，如果没有返回值，就是undefined\n    box.onclick = fn()\n    // 同第一种方法，如果需要传参就需要换成第一种\n    box.onclick = fn\n\n```\n","slug":"bangding","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl001eyctit3g1w1av","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 点击的时候才执行</span></span><br><span class=\"line\">box.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 直接执行fn,将返回值赋给点击事件，如果没有返回值，就是undefined</span></span><br><span class=\"line\">box.onclick = fn()</span><br><span class=\"line\"><span class=\"comment\">// 同第一种方法，如果需要传参就需要换成第一种</span></span><br><span class=\"line\">box.onclick = fn</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 点击的时候才执行</span></span><br><span class=\"line\">box.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 直接执行fn,将返回值赋给点击事件，如果没有返回值，就是undefined</span></span><br><span class=\"line\">box.onclick = fn()</span><br><span class=\"line\"><span class=\"comment\">// 同第一种方法，如果需要传参就需要换成第一种</span></span><br><span class=\"line\">box.onclick = fn</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation]\n<!-- more -->\n(https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation]\n<!-- more -->\n(https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-03-10T01:25:56.908Z","updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl001fycti94guv1ui","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check [documentation]<br><a id=\"more\"></a><br>(<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/</a>) for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check [documentation]<br>","more":"<br>(<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/</a>) for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"sanba","date":"2018-03-10T01:36:54.000Z","_content":"","source":"_posts/2018-03-10-sanba.md","raw":"---\ntitle: sanba\ndate: 2018-03-10 09:36:54\ntags:\n---\n","slug":"sanba","published":1,"updated":"2018-03-10T01:36:54.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl001hyctim021z6xg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"柯里化函数","date":"2017-11-25T02:11:41.000Z","_content":"```javascript\n    var obj = {\n        name: 'nullwu'\n    }\n\n    function fn(a, e) {\n        console.log(a, e)\n    }\n    // 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj\n    // 1、用call，但是需要包裹一个匿名函数\n    // setTimeout(function(){\n    //     fn.call(obj)\n    // },1000)\n    // // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值\n    // setTimeout(fn.bind(obj), 1000)\n    // 3、自定义bind来实现\n    // setTimeout(bind(fn,obj,100,200),1000)\n    function bind(callback, context) {\n        var outerArg = Array.prototype.slice.call(arguments, 2) //获取除了前两个以外的参数(传的参数)\n        context = context || window\n        // 点击以后会这行这个小函数，所以实际上事件对象会在这里出现\n        return function (e) {\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            callback.apply(context, outerArg.concat(innerArg))\n        }\n    }\n    // document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理\n\n    Function.prototype.mybind = function (context) {\n        // context是要把this改为谁\n        var _this = this;\n        //  获取剩余的参数\n        var outerArg = Array.prototype.slice.call(arguments, 1)\n        if ('bind' in Function.prototype) {\n            //  把参数传给原生的bind\n            return this.bind.apply(this, [context].concat(outerArg)) //this是调用者\n        }\n        return function () {\n            //  获取事件对象\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            //  兼容ie6-8的事件对象\n            innerArg.length === 0 ? innerArg[innerArg.length] = window.event : null;\n            //  将剩余参数和事件对象拼接\n            var arg = outerArg.concat(innerArg)\n            _this.apply(context, arg)\n        }\n    }\n    document.body.onclick = fn.mybind(obj, 100)\n```","source":"_posts/2017-11-25-kelihua.md","raw":"---\ntitle: 柯里化函数\ndate: 2017-11-25 10:11:41\ntags:\n---\n```javascript\n    var obj = {\n        name: 'nullwu'\n    }\n\n    function fn(a, e) {\n        console.log(a, e)\n    }\n    // 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj\n    // 1、用call，但是需要包裹一个匿名函数\n    // setTimeout(function(){\n    //     fn.call(obj)\n    // },1000)\n    // // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值\n    // setTimeout(fn.bind(obj), 1000)\n    // 3、自定义bind来实现\n    // setTimeout(bind(fn,obj,100,200),1000)\n    function bind(callback, context) {\n        var outerArg = Array.prototype.slice.call(arguments, 2) //获取除了前两个以外的参数(传的参数)\n        context = context || window\n        // 点击以后会这行这个小函数，所以实际上事件对象会在这里出现\n        return function (e) {\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            callback.apply(context, outerArg.concat(innerArg))\n        }\n    }\n    // document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理\n\n    Function.prototype.mybind = function (context) {\n        // context是要把this改为谁\n        var _this = this;\n        //  获取剩余的参数\n        var outerArg = Array.prototype.slice.call(arguments, 1)\n        if ('bind' in Function.prototype) {\n            //  把参数传给原生的bind\n            return this.bind.apply(this, [context].concat(outerArg)) //this是调用者\n        }\n        return function () {\n            //  获取事件对象\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            //  兼容ie6-8的事件对象\n            innerArg.length === 0 ? innerArg[innerArg.length] = window.event : null;\n            //  将剩余参数和事件对象拼接\n            var arg = outerArg.concat(innerArg)\n            _this.apply(context, arg)\n        }\n    }\n    document.body.onclick = fn.mybind(obj, 100)\n```","slug":"kelihua","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl001jycti3t6g1ssa","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'nullwu'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a, e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj</span></span><br><span class=\"line\"><span class=\"comment\">// 1、用call，但是需要包裹一个匿名函数</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout(function()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     fn.call(obj)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;,1000)</span></span><br><span class=\"line\"><span class=\"comment\">// // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout(fn.bind(obj), 1000)</span></span><br><span class=\"line\"><span class=\"comment\">// 3、自定义bind来实现</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout(bind(fn,obj,100,200),1000)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">callback, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> outerArg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>) <span class=\"comment\">//获取除了前两个以外的参数(传的参数)</span></span><br><span class=\"line\">    context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">    <span class=\"comment\">// 点击以后会这行这个小函数，所以实际上事件对象会在这里出现</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> innerArg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        callback.apply(context, outerArg.concat(innerArg))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context是要把this改为谁</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  获取剩余的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> outerArg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'bind'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">Function</span>.prototype) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//  把参数传给原生的bind</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bind.apply(<span class=\"keyword\">this</span>, [context].concat(outerArg)) <span class=\"comment\">//this是调用者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  获取事件对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> innerArg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//  兼容ie6-8的事件对象</span></span><br><span class=\"line\">        innerArg.length === <span class=\"number\">0</span> ? innerArg[innerArg.length] = <span class=\"built_in\">window</span>.event : <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//  将剩余参数和事件对象拼接</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> arg = outerArg.concat(innerArg)</span><br><span class=\"line\">        _this.apply(context, arg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = fn.mybind(obj, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'nullwu'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a, e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj</span></span><br><span class=\"line\"><span class=\"comment\">// 1、用call，但是需要包裹一个匿名函数</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout(function()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     fn.call(obj)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;,1000)</span></span><br><span class=\"line\"><span class=\"comment\">// // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout(fn.bind(obj), 1000)</span></span><br><span class=\"line\"><span class=\"comment\">// 3、自定义bind来实现</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout(bind(fn,obj,100,200),1000)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">callback, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> outerArg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>) <span class=\"comment\">//获取除了前两个以外的参数(传的参数)</span></span><br><span class=\"line\">    context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">    <span class=\"comment\">// 点击以后会这行这个小函数，所以实际上事件对象会在这里出现</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> innerArg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        callback.apply(context, outerArg.concat(innerArg))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context是要把this改为谁</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  获取剩余的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> outerArg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'bind'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">Function</span>.prototype) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//  把参数传给原生的bind</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bind.apply(<span class=\"keyword\">this</span>, [context].concat(outerArg)) <span class=\"comment\">//this是调用者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  获取事件对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> innerArg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//  兼容ie6-8的事件对象</span></span><br><span class=\"line\">        innerArg.length === <span class=\"number\">0</span> ? innerArg[innerArg.length] = <span class=\"built_in\">window</span>.event : <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//  将剩余参数和事件对象拼接</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> arg = outerArg.concat(innerArg)</span><br><span class=\"line\">        _this.apply(context, arg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = fn.mybind(obj, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>"},{"title":"sport","date":"2017-11-24T04:08:36.000Z","_content":"```javascript\n    // 1=>  2秒钟匀速运动到line处\n    (function () {\n        var box = document.getElementById('box')\n        var step = 400 / 2000 * 10 //  总长400,每一步需要多少\n        var curLeft = 0;\n        var end = 400;\n        setInterval(() => {\n            if (curLeft + step >= end) { //如果下一步超出，那么直接到指定位置\n                clearInterval()\n                curLeft = end\n            } else {\n                curLeft += step;\n            }\n            box.style.left = curLeft + 'px'\n        }, 10)\n    })();\n\n    // 2=> 不限时缓冲运动到line处\n    (function () {\n        var box = document.getElementById('box2')\n        var end = 400\n        var curLeft = 0\n\n        setInterval(() => {\n            var step = (end - box.offsetLeft) / 10;\n            step = step > 0 ? Math.ceil(step) : Math.floor(step)\n            if (curLeft + step >= end) {\n                clearInterval()\n                curLeft = end\n            } else {\n                curLeft += step;\n            }\n            box.style.left = curLeft + 'px'\n        }, 30)\n    })();\n\n    //3=》匀速第二种方式\n    (function () {\n        var box = document.getElementById('box3')\n        var start = 0;\n        var end = 400;\n        var change=end-start;\n        var times = 2000;\n        var now = 0;\n        \n        // 现在应该出现的地点=总长*走过的时间/总时间+起点\n        function linear(s, c, t, n) {\n            return s + c * n / t\n        }\n        setInterval(() => {\n            if (now >= times) {\n                box.style.left = end + 'px'\n                return\n            }\n            box.style.left = linear(0, 400, 2000, now) + 'px'\n            now += 10;\n        }, 10)\n    })();\n\n    //4=>用settimeout来实现第一种方法\n    (function () {\n        var box = document.getElementById('box4')\n        var step = 400 / 2000 * 10\n        var curLeft = 0;\n        var end = 400;\n        // setInterval(() => {\n        //     if (curLeft + step >= end) {\n        //         clearInterval()\n        //         curLeft = end\n        //     } else {\n        //         curLeft += step;\n        //     }\n        //     box.style.left = curLeft + 'px'\n        // }, 10)\n        var timer = null;\n\n        function move() {\n            clearTimeout(timer)\n            if (curLeft + step >= end) {\n                clearTimeout()\n                curLeft = end\n            } else {\n                curLeft += step;\n            }\n            box.style.left = curLeft + 'px'\n            timer = setTimeout(move, 10)\n        }\n        move()\n    })();\n```","source":"_posts/2017-11-24-sport.md","raw":"---\ntitle: sport\ndate: 2017-11-24 12:08:36\ntags:\n---\n```javascript\n    // 1=>  2秒钟匀速运动到line处\n    (function () {\n        var box = document.getElementById('box')\n        var step = 400 / 2000 * 10 //  总长400,每一步需要多少\n        var curLeft = 0;\n        var end = 400;\n        setInterval(() => {\n            if (curLeft + step >= end) { //如果下一步超出，那么直接到指定位置\n                clearInterval()\n                curLeft = end\n            } else {\n                curLeft += step;\n            }\n            box.style.left = curLeft + 'px'\n        }, 10)\n    })();\n\n    // 2=> 不限时缓冲运动到line处\n    (function () {\n        var box = document.getElementById('box2')\n        var end = 400\n        var curLeft = 0\n\n        setInterval(() => {\n            var step = (end - box.offsetLeft) / 10;\n            step = step > 0 ? Math.ceil(step) : Math.floor(step)\n            if (curLeft + step >= end) {\n                clearInterval()\n                curLeft = end\n            } else {\n                curLeft += step;\n            }\n            box.style.left = curLeft + 'px'\n        }, 30)\n    })();\n\n    //3=》匀速第二种方式\n    (function () {\n        var box = document.getElementById('box3')\n        var start = 0;\n        var end = 400;\n        var change=end-start;\n        var times = 2000;\n        var now = 0;\n        \n        // 现在应该出现的地点=总长*走过的时间/总时间+起点\n        function linear(s, c, t, n) {\n            return s + c * n / t\n        }\n        setInterval(() => {\n            if (now >= times) {\n                box.style.left = end + 'px'\n                return\n            }\n            box.style.left = linear(0, 400, 2000, now) + 'px'\n            now += 10;\n        }, 10)\n    })();\n\n    //4=>用settimeout来实现第一种方法\n    (function () {\n        var box = document.getElementById('box4')\n        var step = 400 / 2000 * 10\n        var curLeft = 0;\n        var end = 400;\n        // setInterval(() => {\n        //     if (curLeft + step >= end) {\n        //         clearInterval()\n        //         curLeft = end\n        //     } else {\n        //         curLeft += step;\n        //     }\n        //     box.style.left = curLeft + 'px'\n        // }, 10)\n        var timer = null;\n\n        function move() {\n            clearTimeout(timer)\n            if (curLeft + step >= end) {\n                clearTimeout()\n                curLeft = end\n            } else {\n                curLeft += step;\n            }\n            box.style.left = curLeft + 'px'\n            timer = setTimeout(move, 10)\n        }\n        move()\n    })();\n```","slug":"sport","published":1,"updated":"2018-03-10T01:25:56.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl001myctig938v8dg","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1=&gt;  2秒钟匀速运动到line处</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">400</span> / <span class=\"number\">2000</span> * <span class=\"number\">10</span> <span class=\"comment\">//  总长400,每一步需要多少</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> curLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"number\">400</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curLeft + step &gt;= end) &#123; <span class=\"comment\">//如果下一步超出，那么直接到指定位置</span></span><br><span class=\"line\">            clearInterval()</span><br><span class=\"line\">            curLeft = end</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curLeft += step;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        box.style.left = curLeft + <span class=\"string\">'px'</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2=&gt; 不限时缓冲运动到line处</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box2'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"number\">400</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> curLeft = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> step = (end - box.offsetLeft) / <span class=\"number\">10</span>;</span><br><span class=\"line\">        step = step &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(step) : <span class=\"built_in\">Math</span>.floor(step)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curLeft + step &gt;= end) &#123;</span><br><span class=\"line\">            clearInterval()</span><br><span class=\"line\">            curLeft = end</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curLeft += step;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        box.style.left = curLeft + <span class=\"string\">'px'</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3=》匀速第二种方式</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box3'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> change=end-start;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> times = <span class=\"number\">2000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 现在应该出现的地点=总长*走过的时间/总时间+起点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linear</span>(<span class=\"params\">s, c, t, n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s + c * n / t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now &gt;= times) &#123;</span><br><span class=\"line\">            box.style.left = end + <span class=\"string\">'px'</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        box.style.left = linear(<span class=\"number\">0</span>, <span class=\"number\">400</span>, <span class=\"number\">2000</span>, now) + <span class=\"string\">'px'</span></span><br><span class=\"line\">        now += <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4=&gt;用settimeout来实现第一种方法</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box4'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">400</span> / <span class=\"number\">2000</span> * <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> curLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"comment\">// setInterval(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (curLeft + step &gt;= end) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         clearInterval()</span></span><br><span class=\"line\">    <span class=\"comment\">//         curLeft = end</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125; else &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         curLeft += step;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     box.style.left = curLeft + 'px'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;, 10)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        clearTimeout(timer)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curLeft + step &gt;= end) &#123;</span><br><span class=\"line\">            clearTimeout()</span><br><span class=\"line\">            curLeft = end</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curLeft += step;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        box.style.left = curLeft + <span class=\"string\">'px'</span></span><br><span class=\"line\">        timer = setTimeout(move, <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    move()</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1=&gt;  2秒钟匀速运动到line处</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">400</span> / <span class=\"number\">2000</span> * <span class=\"number\">10</span> <span class=\"comment\">//  总长400,每一步需要多少</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> curLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"number\">400</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curLeft + step &gt;= end) &#123; <span class=\"comment\">//如果下一步超出，那么直接到指定位置</span></span><br><span class=\"line\">            clearInterval()</span><br><span class=\"line\">            curLeft = end</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curLeft += step;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        box.style.left = curLeft + <span class=\"string\">'px'</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2=&gt; 不限时缓冲运动到line处</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box2'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"number\">400</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> curLeft = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> step = (end - box.offsetLeft) / <span class=\"number\">10</span>;</span><br><span class=\"line\">        step = step &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(step) : <span class=\"built_in\">Math</span>.floor(step)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curLeft + step &gt;= end) &#123;</span><br><span class=\"line\">            clearInterval()</span><br><span class=\"line\">            curLeft = end</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curLeft += step;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        box.style.left = curLeft + <span class=\"string\">'px'</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3=》匀速第二种方式</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box3'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> change=end-start;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> times = <span class=\"number\">2000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 现在应该出现的地点=总长*走过的时间/总时间+起点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linear</span>(<span class=\"params\">s, c, t, n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s + c * n / t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now &gt;= times) &#123;</span><br><span class=\"line\">            box.style.left = end + <span class=\"string\">'px'</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        box.style.left = linear(<span class=\"number\">0</span>, <span class=\"number\">400</span>, <span class=\"number\">2000</span>, now) + <span class=\"string\">'px'</span></span><br><span class=\"line\">        now += <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4=&gt;用settimeout来实现第一种方法</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box4'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">400</span> / <span class=\"number\">2000</span> * <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> curLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"comment\">// setInterval(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (curLeft + step &gt;= end) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         clearInterval()</span></span><br><span class=\"line\">    <span class=\"comment\">//         curLeft = end</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125; else &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         curLeft += step;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     box.style.left = curLeft + 'px'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;, 10)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        clearTimeout(timer)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curLeft + step &gt;= end) &#123;</span><br><span class=\"line\">            clearTimeout()</span><br><span class=\"line\">            curLeft = end</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curLeft += step;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        box.style.left = curLeft + <span class=\"string\">'px'</span></span><br><span class=\"line\">        timer = setTimeout(move, <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    move()</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    柯里化函数思想：一个js预处理的思想\n</body>\n\n</html>\n<script>\n    var obj = {\n        name: 'nullwu'\n    }\n\n    function fn(a, e) {\n        console.log(a, e)\n    }\n    // 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj\n    // 1、用call，但是需要包裹一个匿名函数\n    // setTimeout(function(){\n    //     fn.call(obj)\n    // },1000)\n    // // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值\n    // setTimeout(fn.bind(obj), 1000)\n    // 3、自定义bind来实现\n    // setTimeout(bind(fn,obj,100,200),1000)\n    function bind(callback, context) {\n        var outerArg = Array.prototype.slice.call(arguments, 2) //获取除了前两个以外的参数(传的参数)\n        context = context || window\n        // 点击以后会这行这个小函数，所以实际上事件对象会在这里出现\n        return function (e) {\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            callback.apply(context, outerArg.concat(innerArg))\n        }\n    }\n    // document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理\n\n    Function.prototype.mybind = function (context) {\n        // context是要把this改为谁\n        var _this = this;\n        //  获取剩余的参数\n        var outerArg = Array.prototype.slice.call(arguments, 1)\n        if ('bind' in Function.prototype) {\n            //  把参数传给原生的bind\n            return this.bind.apply(this, [context].concat(outerArg)) //this是调用者\n        }\n        return function () {\n            //  获取事件对象\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            //  兼容ie6-8的事件对象\n            innerArg.length === 0 ? innerArg[innerArg.length] = window.event : null;\n            //  将剩余参数和事件对象拼接\n            var arg = outerArg.concat(innerArg)\n            _this.apply(context, arg)\n        }\n    }\n    document.body.onclick = fn.mybind(obj, 100)\n</script>","source":"_posts/test.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    柯里化函数思想：一个js预处理的思想\n</body>\n\n</html>\n<script>\n    var obj = {\n        name: 'nullwu'\n    }\n\n    function fn(a, e) {\n        console.log(a, e)\n    }\n    // 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj\n    // 1、用call，但是需要包裹一个匿名函数\n    // setTimeout(function(){\n    //     fn.call(obj)\n    // },1000)\n    // // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值\n    // setTimeout(fn.bind(obj), 1000)\n    // 3、自定义bind来实现\n    // setTimeout(bind(fn,obj,100,200),1000)\n    function bind(callback, context) {\n        var outerArg = Array.prototype.slice.call(arguments, 2) //获取除了前两个以外的参数(传的参数)\n        context = context || window\n        // 点击以后会这行这个小函数，所以实际上事件对象会在这里出现\n        return function (e) {\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            callback.apply(context, outerArg.concat(innerArg))\n        }\n    }\n    // document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理\n\n    Function.prototype.mybind = function (context) {\n        // context是要把this改为谁\n        var _this = this;\n        //  获取剩余的参数\n        var outerArg = Array.prototype.slice.call(arguments, 1)\n        if ('bind' in Function.prototype) {\n            //  把参数传给原生的bind\n            return this.bind.apply(this, [context].concat(outerArg)) //this是调用者\n        }\n        return function () {\n            //  获取事件对象\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            //  兼容ie6-8的事件对象\n            innerArg.length === 0 ? innerArg[innerArg.length] = window.event : null;\n            //  将剩余参数和事件对象拼接\n            var arg = outerArg.concat(innerArg)\n            _this.apply(context, arg)\n        }\n    }\n    document.body.onclick = fn.mybind(obj, 100)\n</script>","slug":"test","published":1,"date":"2018-03-10T01:25:56.908Z","updated":"2018-03-10T01:25:56.908Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjekpabxl001oyctil221woh7","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    柯里化函数思想：一个js预处理的思想\n</body>\n\n</html>\n<script>\n    var obj = {\n        name: 'nullwu'\n    }\n\n    function fn(a, e) {\n        console.log(a, e)\n    }\n    // 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj\n    // 1、用call，但是需要包裹一个匿名函数\n    // setTimeout(function(){\n    //     fn.call(obj)\n    // },1000)\n    // // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值\n    // setTimeout(fn.bind(obj), 1000)\n    // 3、自定义bind来实现\n    // setTimeout(bind(fn,obj,100,200),1000)\n    function bind(callback, context) {\n        var outerArg = Array.prototype.slice.call(arguments, 2) //获取除了前两个以外的参数(传的参数)\n        context = context || window\n        // 点击以后会这行这个小函数，所以实际上事件对象会在这里出现\n        return function (e) {\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            callback.apply(context, outerArg.concat(innerArg))\n        }\n    }\n    // document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理\n\n    Function.prototype.mybind = function (context) {\n        // context是要把this改为谁\n        var _this = this;\n        //  获取剩余的参数\n        var outerArg = Array.prototype.slice.call(arguments, 1)\n        if ('bind' in Function.prototype) {\n            //  把参数传给原生的bind\n            return this.bind.apply(this, [context].concat(outerArg)) //this是调用者\n        }\n        return function () {\n            //  获取事件对象\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            //  兼容ie6-8的事件对象\n            innerArg.length === 0 ? innerArg[innerArg.length] = window.event : null;\n            //  将剩余参数和事件对象拼接\n            var arg = outerArg.concat(innerArg)\n            _this.apply(context, arg)\n        }\n    }\n    document.body.onclick = fn.mybind(obj, 100)\n</script>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    柯里化函数思想：一个js预处理的思想\n</body>\n\n</html>\n<script>\n    var obj = {\n        name: 'nullwu'\n    }\n\n    function fn(a, e) {\n        console.log(a, e)\n    }\n    // 给定时器绑定一个方法，当定时器到达让方法执行，并且让fn中的this改为obj\n    // 1、用call，但是需要包裹一个匿名函数\n    // setTimeout(function(){\n    //     fn.call(obj)\n    // },1000)\n    // // 2、直接用bind,原理是首先执行bind这个方法，将返回值和定时器绑定，到时间执行这个返回值\n    // setTimeout(fn.bind(obj), 1000)\n    // 3、自定义bind来实现\n    // setTimeout(bind(fn,obj,100,200),1000)\n    function bind(callback, context) {\n        var outerArg = Array.prototype.slice.call(arguments, 2) //获取除了前两个以外的参数(传的参数)\n        context = context || window\n        // 点击以后会这行这个小函数，所以实际上事件对象会在这里出现\n        return function (e) {\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            callback.apply(context, outerArg.concat(innerArg))\n        }\n    }\n    // document.body.onclick=bind(fn,obj,100,200)//默认的把事件对象也预先处理\n\n    Function.prototype.mybind = function (context) {\n        // context是要把this改为谁\n        var _this = this;\n        //  获取剩余的参数\n        var outerArg = Array.prototype.slice.call(arguments, 1)\n        if ('bind' in Function.prototype) {\n            //  把参数传给原生的bind\n            return this.bind.apply(this, [context].concat(outerArg)) //this是调用者\n        }\n        return function () {\n            //  获取事件对象\n            var innerArg = Array.prototype.slice.call(arguments, 0)\n            //  兼容ie6-8的事件对象\n            innerArg.length === 0 ? innerArg[innerArg.length] = window.event : null;\n            //  将剩余参数和事件对象拼接\n            var arg = outerArg.concat(innerArg)\n            _this.apply(context, arg)\n        }\n    }\n    document.body.onclick = fn.mybind(obj, 100)\n</script>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjekpabwa0000yctia688g31i","category_id":"cjekpabwp0004yctiyauxu4ff","_id":"cjekpabx5000gyctiyyc7j350"},{"post_id":"cjekpabwp000aycti6vaox2wy","category_id":"cjekpabwp0004yctiyauxu4ff","_id":"cjekpabx5000kyctiqu8qksf4"},{"post_id":"cjekpabwa0002ycti8bkja9mq","category_id":"cjekpabwp000byctiax296n8y","_id":"cjekpabx5000nyctibnahufvx"},{"post_id":"cjekpabx5000jyctin14dga49","category_id":"cjekpabwp0004yctiyauxu4ff","_id":"cjekpabx5000sycti88qak7s5"},{"post_id":"cjekpabwp0006yctithydt50g","category_id":"cjekpabwp000byctiax296n8y","_id":"cjekpabx5000xyctipy5ssn4b"},{"post_id":"cjekpabx5000lycti95vjxjzj","category_id":"cjekpabwp000byctiax296n8y","_id":"cjekpabx5000zycti86ysnr5d"},{"post_id":"cjekpabwp0008yctihmaxhrrv","category_id":"cjekpabwp000byctiax296n8y","_id":"cjekpabx50013yctimhss5cxd"},{"post_id":"cjekpabwp000eyctibpz8libj","category_id":"cjekpabx5000tyctitlmxi79i","_id":"cjekpabxl0016yctin8k5s00d"},{"post_id":"cjekpabwp000fyctix9nexkr3","category_id":"cjekpabx5000tyctitlmxi79i","_id":"cjekpabxl001byctiffdnjsby"}],"PostTag":[{"post_id":"cjekpabwa0000yctia688g31i","tag_id":"cjekpabwp0005yctid8hwijl6","_id":"cjekpabwp000dyction8d9ngv"},{"post_id":"cjekpabwa0002ycti8bkja9mq","tag_id":"cjekpabwp000cyctiojtbe2j3","_id":"cjekpabx5000qyctin81npebl"},{"post_id":"cjekpabwa0002ycti8bkja9mq","tag_id":"cjekpabx5000iyctiw8w6kq1c","_id":"cjekpabx5000uyctirana5j6h"},{"post_id":"cjekpabwp0006yctithydt50g","tag_id":"cjekpabx5000iyctiw8w6kq1c","_id":"cjekpabxl0014yctincu5u0nk"},{"post_id":"cjekpabwp0006yctithydt50g","tag_id":"cjekpabx5000vycti0wsbvgdk","_id":"cjekpabxl0017yctipc6eryhs"},{"post_id":"cjekpabwp0008yctihmaxhrrv","tag_id":"cjekpabx50011yctiq6wgbbpa","_id":"cjekpabxl001iycti5y33tir6"},{"post_id":"cjekpabwp0008yctihmaxhrrv","tag_id":"cjekpabxl0019yctiwr2ult3b","_id":"cjekpabxl001kyctivj180gyl"},{"post_id":"cjekpabwp0008yctihmaxhrrv","tag_id":"cjekpabx5000vycti0wsbvgdk","_id":"cjekpabxl001nyctiyku42057"},{"post_id":"cjekpabwp000aycti6vaox2wy","tag_id":"cjekpabxl001gyctip4y5tdlq","_id":"cjekpaby0001pyctitaaq4tad"},{"post_id":"cjekpabwp000eyctibpz8libj","tag_id":"cjekpabxl001lycti7ix4nvxh","_id":"cjekpaby0001uyctia3ooic4k"},{"post_id":"cjekpabwp000eyctibpz8libj","tag_id":"cjekpaby0001qycti5cyoo50d","_id":"cjekpaby0001vyctiryslw4k8"},{"post_id":"cjekpabwp000eyctibpz8libj","tag_id":"cjekpaby0001ryctizvihhcqh","_id":"cjekpaby0001xyctiia5e265r"},{"post_id":"cjekpabwp000eyctibpz8libj","tag_id":"cjekpabxl0019yctiwr2ult3b","_id":"cjekpaby0001yyctipc41qyh1"},{"post_id":"cjekpabwp000fyctix9nexkr3","tag_id":"cjekpabxl001lycti7ix4nvxh","_id":"cjekpaby00020ycti3cpxutrv"},{"post_id":"cjekpabx5000jyctin14dga49","tag_id":"cjekpaby0001wycti9kjjxa4i","_id":"cjekpaby00021yctim0k1jwx6"},{"post_id":"cjekpabx5000lycti95vjxjzj","tag_id":"cjekpaby0001zyctik5btcuhw","_id":"cjekpaby00023ycti92stafly"},{"post_id":"cjekpabx5000pycti6ckefd2g","tag_id":"cjekpaby00022yctie118hfwu","_id":"cjekpaby00025yctiyknxe46q"},{"post_id":"cjekpabx5000wyctipgrwbu2l","tag_id":"cjekpaby00024yctidbj3ghk3","_id":"cjekpaby00026yctiqaluq8ya"}],"Tag":[{"name":"git","_id":"cjekpabwp0005yctid8hwijl6"},{"name":"mongodb","_id":"cjekpabwp000cyctiojtbe2j3"},{"name":"linux","_id":"cjekpabx5000iyctiw8w6kq1c"},{"name":"node.js","_id":"cjekpabx5000vycti0wsbvgdk"},{"name":"nginx","_id":"cjekpabx50011yctiq6wgbbpa"},{"name":"vue.js","_id":"cjekpabxl0019yctiwr2ult3b"},{"name":"es6","_id":"cjekpabxl001gyctip4y5tdlq"},{"name":"token","_id":"cjekpabxl001lycti7ix4nvxh"},{"name":"vuex","_id":"cjekpaby0001qycti5cyoo50d"},{"name":"ndoe.js","_id":"cjekpaby0001ryctizvihhcqh"},{"name":"gulp","_id":"cjekpaby0001wycti9kjjxa4i"},{"name":"hexo","_id":"cjekpaby0001zyctik5btcuhw"},{"name":"webpack","_id":"cjekpaby00022yctie118hfwu"},{"name":"websocket","_id":"cjekpaby00024yctidbj3ghk3"}]}}